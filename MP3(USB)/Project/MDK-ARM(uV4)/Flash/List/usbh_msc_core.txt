; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\usbh_msc_core.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\usbh_msc_core.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc -I..\..\Libraries\STM32_USB_HOST_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbh_mass_storage -I..\..\User\bsp_stm32f4xx\inc -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_HS -DUSE_EMBEDDED_PHY --omf_browse=.\flash\obj\usbh_msc_core.crf ..\..\Libraries\STM32_USB_HOST_Library\Class\MSC\src\usbh_msc_core.c]
                          THUMB

                          AREA ||i.USBH_MSC_BOTReset||, CODE, READONLY, ALIGN=1

                  USBH_MSC_BOTReset PROC
;;;472      */
;;;473    static USBH_Status USBH_MSC_BOTReset(USB_OTG_CORE_HANDLE *pdev,
000000  b570              PUSH     {r4-r6,lr}
;;;474                                  USBH_HOST *phost)
;;;475    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;476      
;;;477      phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS | \
000006  2121              MOVS     r1,#0x21
000008  7521              STRB     r1,[r4,#0x14]
;;;478                                  USB_REQ_RECIPIENT_INTERFACE;
;;;479      
;;;480      phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
00000a  21ff              MOVS     r1,#0xff
00000c  7561              STRB     r1,[r4,#0x15]
;;;481      phost->Control.setup.b.wValue.w = 0;
00000e  2100              MOVS     r1,#0
000010  82e1              STRH     r1,[r4,#0x16]
;;;482      phost->Control.setup.b.wIndex.w = 0;
000012  8321              STRH     r1,[r4,#0x18]
;;;483      phost->Control.setup.b.wLength.w = 0;           
000014  8361              STRH     r1,[r4,#0x1a]
;;;484      
;;;485      return USBH_CtlReq(pdev, phost, 0 , 0 ); 
000016  2300              MOVS     r3,#0
000018  461a              MOV      r2,r3
00001a  4621              MOV      r1,r4
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       USBH_CtlReq
;;;486    }
000022  bd70              POP      {r4-r6,pc}
;;;487    
                          ENDP


                          AREA ||i.USBH_MSC_ClassRequest||, CODE, READONLY, ALIGN=2

                  USBH_MSC_ClassRequest PROC
;;;265    
;;;266    static USBH_Status USBH_MSC_ClassRequest(USB_OTG_CORE_HANDLE *pdev , 
000000  b510              PUSH     {r4,lr}
;;;267                                            void *phost)
;;;268    {   
000002  4602              MOV      r2,r0
;;;269      
;;;270      USBH_Status status = USBH_OK ;
000004  2000              MOVS     r0,#0
;;;271      USBH_MSC_BOTXferParam.MSCState = USBH_MSC_BOT_INIT_STATE;
000006  2300              MOVS     r3,#0
000008  4c01              LDR      r4,|L2.16|
00000a  7023              STRB     r3,[r4,#0]
;;;272      
;;;273      return status; 
;;;274    }
00000c  bd10              POP      {r4,pc}
;;;275    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      USBH_MSC_BOTXferParam

                          AREA ||i.USBH_MSC_ErrorHandle||, CODE, READONLY, ALIGN=2

                  USBH_MSC_ErrorHandle PROC
;;;517    
;;;518    void USBH_MSC_ErrorHandle(uint8_t status)
000000  2801              CMP      r0,#1
;;;519    {  
;;;520        if(status == USBH_MSC_FAIL)
000002  d112              BNE      |L3.42|
;;;521        { 
;;;522          MSCErrorCount++;
000004  490d              LDR      r1,|L3.60|
000006  7809              LDRB     r1,[r1,#0]  ; MSCErrorCount
000008  1c49              ADDS     r1,r1,#1
00000a  4a0c              LDR      r2,|L3.60|
00000c  7011              STRB     r1,[r2,#0]
;;;523          if(MSCErrorCount < USBH_MSC_ERROR_RETRY_LIMIT)
00000e  4611              MOV      r1,r2
000010  7809              LDRB     r1,[r1,#0]  ; MSCErrorCount
000012  290a              CMP      r1,#0xa
000014  da05              BGE      |L3.34|
;;;524          { /* Try MSC level error recovery, Issue the request Sense to get 
;;;525            Drive error reason  */
;;;526            USBH_MSC_BOTXferParam.MSCState = USBH_MSC_REQUEST_SENSE;
000016  2106              MOVS     r1,#6
000018  4a09              LDR      r2,|L3.64|
00001a  7011              STRB     r1,[r2,#0]
;;;527            USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
00001c  2101              MOVS     r1,#1
00001e  70d1              STRB     r1,[r2,#3]
000020  e00a              B        |L3.56|
                  |L3.34|
;;;528          }
;;;529          else
;;;530          {
;;;531            /* Error trials exceeded the limit, go to unrecovered state */
;;;532            USBH_MSC_BOTXferParam.MSCState = USBH_MSC_UNRECOVERED_STATE;
000022  210a              MOVS     r1,#0xa
000024  4a06              LDR      r2,|L3.64|
000026  7011              STRB     r1,[r2,#0]
000028  e006              B        |L3.56|
                  |L3.42|
;;;533          }
;;;534        } 
;;;535        else if(status == USBH_MSC_PHASE_ERROR)
00002a  2802              CMP      r0,#2
00002c  d103              BNE      |L3.54|
;;;536        {
;;;537          /* Phase error, Go to Unrecoovered state */
;;;538          USBH_MSC_BOTXferParam.MSCState = USBH_MSC_UNRECOVERED_STATE;
00002e  210a              MOVS     r1,#0xa
000030  4a03              LDR      r2,|L3.64|
000032  7011              STRB     r1,[r2,#0]
000034  e000              B        |L3.56|
                  |L3.54|
;;;539        }
;;;540        else if(status == USBH_MSC_BUSY)
000036  bf00              NOP      
                  |L3.56|
;;;541        {
;;;542          /*No change in state*/
;;;543        }
;;;544    }
000038  4770              BX       lr
;;;545    
                          ENDP

00003a  0000              DCW      0x0000
                  |L3.60|
                          DCD      MSCErrorCount
                  |L3.64|
                          DCD      USBH_MSC_BOTXferParam

                          AREA ||i.USBH_MSC_GETMaxLUN||, CODE, READONLY, ALIGN=2

                  USBH_MSC_GETMaxLUN PROC
;;;496      */
;;;497    static USBH_Status USBH_MSC_GETMaxLUN(USB_OTG_CORE_HANDLE *pdev , USBH_HOST *phost)
000000  b570              PUSH     {r4-r6,lr}
;;;498    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;499      phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
000006  21a1              MOVS     r1,#0xa1
000008  7521              STRB     r1,[r4,#0x14]
;;;500                                  USB_REQ_RECIPIENT_INTERFACE;
;;;501      
;;;502      phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
00000a  21fe              MOVS     r1,#0xfe
00000c  7561              STRB     r1,[r4,#0x15]
;;;503      phost->Control.setup.b.wValue.w = 0;
00000e  2100              MOVS     r1,#0
000010  82e1              STRH     r1,[r4,#0x16]
;;;504      phost->Control.setup.b.wIndex.w = 0;
000012  8321              STRH     r1,[r4,#0x18]
;;;505      phost->Control.setup.b.wLength.w = 1;           
000014  2101              MOVS     r1,#1
000016  8361              STRH     r1,[r4,#0x1a]
;;;506      
;;;507      return USBH_CtlReq(pdev, phost, MSC_Machine.buff , 1 ); 
000018  2301              MOVS     r3,#1
00001a  4a03              LDR      r2,|L4.40|
00001c  4621              MOV      r1,r4
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       USBH_CtlReq
;;;508    }
000024  bd70              POP      {r4-r6,pc}
;;;509    
                          ENDP

000026  0000              DCW      0x0000
                  |L4.40|
                          DCD      MSC_Machine+0x8

                          AREA ||i.USBH_MSC_Handle||, CODE, READONLY, ALIGN=2

                  USBH_MSC_Handle PROC
;;;284    
;;;285    static USBH_Status USBH_MSC_Handle(USB_OTG_CORE_HANDLE *pdev , 
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;286                                       void   *phost)
;;;287    {
000004  4681              MOV      r9,r0
000006  460f              MOV      r7,r1
;;;288      USBH_HOST *pphost = phost;
000008  463e              MOV      r6,r7
;;;289        
;;;290      USBH_Status status = USBH_BUSY;
00000a  2401              MOVS     r4,#1
;;;291      uint8_t mscStatus = USBH_MSC_BUSY;
00000c  2503              MOVS     r5,#3
;;;292      uint8_t appliStatus = 0;
00000e  f04f0800          MOV      r8,#0
;;;293      
;;;294      static uint8_t maxLunExceed = FALSE;
;;;295      
;;;296        
;;;297      if(HCD_IsDeviceConnected(pdev))
000012  4648              MOV      r0,r9
000014  f7fffffe          BL       HCD_IsDeviceConnected
000018  2800              CMP      r0,#0
00001a  d078              BEQ      |L5.270|
;;;298      {   
;;;299        switch(USBH_MSC_BOTXferParam.MSCState)
00001c  485e              LDR      r0,|L5.408|
00001e  7800              LDRB     r0,[r0,#0]  ; USBH_MSC_BOTXferParam
000020  280b              CMP      r0,#0xb
000022  d275              BCS      |L5.272|
000024  e8dff000          TBB      [pc,r0]
000028  060d1e55          DCB      0x06,0x0d,0x1e,0x55
00002c  66798a99          DCB      0x66,0x79,0x8a,0x99
000030  9e44b000          DCB      0x9e,0x44,0xb0,0x00
;;;300        {
;;;301        case USBH_MSC_BOT_INIT_STATE:
;;;302          USBH_MSC_Init(pdev);
000034  4648              MOV      r0,r9
000036  f7fffffe          BL       USBH_MSC_Init
;;;303          USBH_MSC_BOTXferParam.MSCState = USBH_MSC_BOT_RESET;  
00003a  2001              MOVS     r0,#1
00003c  4956              LDR      r1,|L5.408|
00003e  7008              STRB     r0,[r1,#0]
;;;304          break;
000040  e0a5              B        |L5.398|
;;;305          
;;;306        case USBH_MSC_BOT_RESET:   
;;;307          /* Issue BOT RESET request */
;;;308          status = USBH_MSC_BOTReset(pdev, phost);
000042  4639              MOV      r1,r7
000044  4648              MOV      r0,r9
000046  f7fffffe          BL       USBH_MSC_BOTReset
00004a  4604              MOV      r4,r0
;;;309          if(status == USBH_OK )
00004c  b914              CBNZ     r4,|L5.84|
;;;310          {
;;;311            USBH_MSC_BOTXferParam.MSCState = USBH_MSC_GET_MAX_LUN;
00004e  2002              MOVS     r0,#2
000050  4951              LDR      r1,|L5.408|
000052  7008              STRB     r0,[r1,#0]
                  |L5.84|
;;;312          }
;;;313          
;;;314          if(status == USBH_NOT_SUPPORTED )
000054  2c03              CMP      r4,#3
000056  d104              BNE      |L5.98|
;;;315          {
;;;316           /* If the Command has failed, then we need to move to Next State, after
;;;317            STALL condition is cleared by Control-Transfer */
;;;318            USBH_MSC_BOTXferParam.MSCStateBkp = USBH_MSC_GET_MAX_LUN; 
000058  2002              MOVS     r0,#2
00005a  494f              LDR      r1,|L5.408|
00005c  7048              STRB     r0,[r1,#1]
;;;319    
;;;320            /* a Clear Feature should be issued here */
;;;321            USBH_MSC_BOTXferParam.MSCState = USBH_MSC_CTRL_ERROR_STATE;
00005e  2009              MOVS     r0,#9
000060  7008              STRB     r0,[r1,#0]
                  |L5.98|
;;;322          }  
;;;323          break;
000062  e094              B        |L5.398|
;;;324          
;;;325        case USBH_MSC_GET_MAX_LUN:
;;;326          /* Issue GetMaxLUN request */
;;;327          status = USBH_MSC_GETMaxLUN(pdev, phost);
000064  4639              MOV      r1,r7
000066  4648              MOV      r0,r9
000068  f7fffffe          BL       USBH_MSC_GETMaxLUN
00006c  4604              MOV      r4,r0
;;;328          
;;;329          if(status == USBH_OK )
00006e  b9bc              CBNZ     r4,|L5.160|
;;;330          {
;;;331            MSC_Machine.maxLun = *(MSC_Machine.buff) ;
000070  484a              LDR      r0,|L5.412|
000072  7a00              LDRB     r0,[r0,#8]  ; MSC_Machine
000074  4949              LDR      r1,|L5.412|
000076  f8810208          STRB     r0,[r1,#0x208]
;;;332            
;;;333            /* If device has more that one logical unit then it is not supported */
;;;334            if((MSC_Machine.maxLun > 0) && (maxLunExceed == FALSE))
00007a  4608              MOV      r0,r1
00007c  f8900208          LDRB     r0,[r0,#0x208]  ; MSC_Machine
000080  2800              CMP      r0,#0
000082  dd0a              BLE      |L5.154|
000084  4846              LDR      r0,|L5.416|
000086  7800              LDRB     r0,[r0,#0]  ; maxLunExceed
000088  b938              CBNZ     r0,|L5.154|
;;;335            {
;;;336              maxLunExceed = TRUE;
00008a  2001              MOVS     r0,#1
00008c  4944              LDR      r1,|L5.416|
00008e  7008              STRB     r0,[r1,#0]
;;;337              pphost->usr_cb->DeviceNotSupported();
000090  f8d61080          LDR      r1,[r6,#0x80]
000094  6c08              LDR      r0,[r1,#0x40]
000096  4780              BLX      r0
;;;338              
;;;339              break;
000098  e079              B        |L5.398|
                  |L5.154|
;;;340            }
;;;341            USBH_MSC_BOTXferParam.MSCState = USBH_MSC_TEST_UNIT_READY;
00009a  2003              MOVS     r0,#3
00009c  493e              LDR      r1,|L5.408|
00009e  7008              STRB     r0,[r1,#0]
                  |L5.160|
;;;342          }
;;;343          
;;;344          if(status == USBH_NOT_SUPPORTED )
0000a0  2c03              CMP      r4,#3
0000a2  d104              BNE      |L5.174|
;;;345          {
;;;346                   /* If the Command has failed, then we need to move to Next State, after
;;;347            STALL condition is cleared by Control-Transfer */
;;;348            USBH_MSC_BOTXferParam.MSCStateBkp = USBH_MSC_TEST_UNIT_READY; 
0000a4  2003              MOVS     r0,#3
0000a6  493c              LDR      r1,|L5.408|
0000a8  7048              STRB     r0,[r1,#1]
;;;349            
;;;350            /* a Clear Feature should be issued here */
;;;351            USBH_MSC_BOTXferParam.MSCState = USBH_MSC_CTRL_ERROR_STATE;
0000aa  2009              MOVS     r0,#9
0000ac  7008              STRB     r0,[r1,#0]
                  |L5.174|
;;;352          }    
;;;353          break;
0000ae  e06e              B        |L5.398|
;;;354          
;;;355        case USBH_MSC_CTRL_ERROR_STATE:
;;;356          /* Issue Clearfeature request */
;;;357          status = USBH_ClrFeature(pdev,
0000b0  7973              LDRB     r3,[r6,#5]
0000b2  2200              MOVS     r2,#0
0000b4  4639              MOV      r1,r7
0000b6  4648              MOV      r0,r9
0000b8  f7fffffe          BL       USBH_ClrFeature
0000bc  4604              MOV      r4,r0
;;;358                                   phost,
;;;359                                   0x00,
;;;360                                   pphost->Control.hc_num_out);
;;;361          if(status == USBH_OK )
0000be  b93c              CBNZ     r4,|L5.208|
;;;362          {
;;;363            /* If GetMaxLun Request not support, assume Single LUN configuration */
;;;364            MSC_Machine.maxLun = 0;  
0000c0  2000              MOVS     r0,#0
0000c2  4936              LDR      r1,|L5.412|
0000c4  f8810208          STRB     r0,[r1,#0x208]
;;;365            
;;;366            USBH_MSC_BOTXferParam.MSCState = USBH_MSC_BOTXferParam.MSCStateBkp;     
0000c8  4833              LDR      r0,|L5.408|
0000ca  7840              LDRB     r0,[r0,#1]  ; USBH_MSC_BOTXferParam
0000cc  4932              LDR      r1,|L5.408|
0000ce  7008              STRB     r0,[r1,#0]
                  |L5.208|
;;;367          }
;;;368          break;  
0000d0  e05d              B        |L5.398|
;;;369          
;;;370        case USBH_MSC_TEST_UNIT_READY:
;;;371          /* Issue SCSI command TestUnitReady */ 
;;;372          mscStatus = USBH_MSC_TestUnitReady(pdev);
0000d2  4648              MOV      r0,r9
0000d4  f7fffffe          BL       USBH_MSC_TestUnitReady
0000d8  4605              MOV      r5,r0
;;;373          
;;;374          if(mscStatus == USBH_MSC_OK )
0000da  b93d              CBNZ     r5,|L5.236|
;;;375          {
;;;376            USBH_MSC_BOTXferParam.MSCState = USBH_MSC_READ_CAPACITY10;
0000dc  2004              MOVS     r0,#4
0000de  492e              LDR      r1,|L5.408|
0000e0  7008              STRB     r0,[r1,#0]
;;;377            MSCErrorCount = 0;
0000e2  2000              MOVS     r0,#0
0000e4  492f              LDR      r1,|L5.420|
0000e6  7008              STRB     r0,[r1,#0]
;;;378            status = USBH_OK;
0000e8  2400              MOVS     r4,#0
0000ea  e002              B        |L5.242|
                  |L5.236|
;;;379          }
;;;380          else
;;;381          {
;;;382            USBH_MSC_ErrorHandle(mscStatus);
0000ec  4628              MOV      r0,r5
0000ee  f7fffffe          BL       USBH_MSC_ErrorHandle
                  |L5.242|
;;;383          } 
;;;384          break;
0000f2  e04c              B        |L5.398|
;;;385          
;;;386        case USBH_MSC_READ_CAPACITY10:
;;;387          /* Issue READ_CAPACITY10 SCSI command */
;;;388          mscStatus = USBH_MSC_ReadCapacity10(pdev);
0000f4  4648              MOV      r0,r9
0000f6  f7fffffe          BL       USBH_MSC_ReadCapacity10
0000fa  4605              MOV      r5,r0
;;;389          if(mscStatus == USBH_MSC_OK )
0000fc  b94d              CBNZ     r5,|L5.274|
;;;390          {
;;;391            USBH_MSC_BOTXferParam.MSCState = USBH_MSC_MODE_SENSE6;
0000fe  2005              MOVS     r0,#5
000100  4925              LDR      r1,|L5.408|
000102  7008              STRB     r0,[r1,#0]
;;;392            MSCErrorCount = 0;
000104  2000              MOVS     r0,#0
000106  4927              LDR      r1,|L5.420|
000108  7008              STRB     r0,[r1,#0]
;;;393            status = USBH_OK;
00010a  2400              MOVS     r4,#0
00010c  e004              B        |L5.280|
                  |L5.270|
00010e  e03f              B        |L5.400|
                  |L5.272|
000110  e03c              B        |L5.396|
                  |L5.274|
;;;394          }
;;;395          else
;;;396          {
;;;397            USBH_MSC_ErrorHandle(mscStatus);
000112  4628              MOV      r0,r5
000114  f7fffffe          BL       USBH_MSC_ErrorHandle
                  |L5.280|
;;;398          }
;;;399          break;
000118  e039              B        |L5.398|
;;;400    
;;;401        case USBH_MSC_MODE_SENSE6:
;;;402          /* Issue ModeSense6 SCSI command for detecting if device is write-protected */
;;;403          mscStatus = USBH_MSC_ModeSense6(pdev);
00011a  4648              MOV      r0,r9
00011c  f7fffffe          BL       USBH_MSC_ModeSense6
000120  4605              MOV      r5,r0
;;;404          if(mscStatus == USBH_MSC_OK )
000122  b93d              CBNZ     r5,|L5.308|
;;;405          {
;;;406            USBH_MSC_BOTXferParam.MSCState = USBH_MSC_DEFAULT_APPLI_STATE;
000124  2008              MOVS     r0,#8
000126  491c              LDR      r1,|L5.408|
000128  7008              STRB     r0,[r1,#0]
;;;407            MSCErrorCount = 0;
00012a  2000              MOVS     r0,#0
00012c  491d              LDR      r1,|L5.420|
00012e  7008              STRB     r0,[r1,#0]
;;;408            status = USBH_OK;
000130  2400              MOVS     r4,#0
000132  e002              B        |L5.314|
                  |L5.308|
;;;409          }
;;;410          else
;;;411          {
;;;412            USBH_MSC_ErrorHandle(mscStatus);
000134  4628              MOV      r0,r5
000136  f7fffffe          BL       USBH_MSC_ErrorHandle
                  |L5.314|
;;;413          }
;;;414          break;
00013a  e028              B        |L5.398|
;;;415          
;;;416        case USBH_MSC_REQUEST_SENSE:
;;;417          /* Issue RequestSense SCSI command for retreiving error code */
;;;418          mscStatus = USBH_MSC_RequestSense(pdev);
00013c  4648              MOV      r0,r9
00013e  f7fffffe          BL       USBH_MSC_RequestSense
000142  4605              MOV      r5,r0
;;;419          if(mscStatus == USBH_MSC_OK )
000144  b92d              CBNZ     r5,|L5.338|
;;;420          {
;;;421            USBH_MSC_BOTXferParam.MSCState = USBH_MSC_BOTXferParam.MSCStateBkp;
000146  4814              LDR      r0,|L5.408|
000148  7840              LDRB     r0,[r0,#1]  ; USBH_MSC_BOTXferParam
00014a  4913              LDR      r1,|L5.408|
00014c  7008              STRB     r0,[r1,#0]
;;;422            status = USBH_OK;
00014e  2400              MOVS     r4,#0
000150  e002              B        |L5.344|
                  |L5.338|
;;;423          }
;;;424          else
;;;425          {
;;;426            USBH_MSC_ErrorHandle(mscStatus);
000152  4628              MOV      r0,r5
000154  f7fffffe          BL       USBH_MSC_ErrorHandle
                  |L5.344|
;;;427          }  
;;;428          break;
000158  e019              B        |L5.398|
;;;429          
;;;430        case USBH_MSC_BOT_USB_TRANSFERS:
;;;431          /* Process the BOT state machine */
;;;432          USBH_MSC_HandleBOTXfer(pdev , phost);
00015a  4639              MOV      r1,r7
00015c  4648              MOV      r0,r9
00015e  f7fffffe          BL       USBH_MSC_HandleBOTXfer
;;;433          break;
000162  e014              B        |L5.398|
;;;434        
;;;435        case USBH_MSC_DEFAULT_APPLI_STATE:
;;;436          /* Process Application callback for MSC */
;;;437          appliStatus = pphost->usr_cb->UserApplication();
000164  f8d61080          LDR      r1,[r6,#0x80]
000168  6bc8              LDR      r0,[r1,#0x3c]
00016a  4780              BLX      r0
00016c  f00008ff          AND      r8,r0,#0xff
;;;438          if(appliStatus == 0)
000170  f1b80f00          CMP      r8,#0
000174  d103              BNE      |L5.382|
;;;439          {
;;;440            USBH_MSC_BOTXferParam.MSCState = USBH_MSC_DEFAULT_APPLI_STATE;
000176  2008              MOVS     r0,#8
000178  4907              LDR      r1,|L5.408|
00017a  7008              STRB     r0,[r1,#0]
00017c  e003              B        |L5.390|
                  |L5.382|
;;;441          }
;;;442          else if (appliStatus == 1) 
00017e  f1b80f01          CMP      r8,#1
000182  d100              BNE      |L5.390|
;;;443          {
;;;444            /* De-init requested from application layer */
;;;445            status =  USBH_APPLY_DEINIT;
000184  2406              MOVS     r4,#6
                  |L5.390|
;;;446          }
;;;447          break;
000186  e002              B        |L5.398|
;;;448          
;;;449        case USBH_MSC_UNRECOVERED_STATE:
;;;450          
;;;451          status = USBH_UNRECOVERED_ERROR;
000188  2404              MOVS     r4,#4
;;;452          
;;;453          break;
00018a  e000              B        |L5.398|
                  |L5.396|
;;;454          
;;;455        default:
;;;456          break; 
00018c  bf00              NOP      
                  |L5.398|
00018e  bf00              NOP                            ;304
                  |L5.400|
;;;457          
;;;458        }
;;;459      }
;;;460       return status;
000190  4620              MOV      r0,r4
;;;461    }
000192  e8bd87f0          POP      {r4-r10,pc}
;;;462    
                          ENDP

000196  0000              DCW      0x0000
                  |L5.408|
                          DCD      USBH_MSC_BOTXferParam
                  |L5.412|
                          DCD      MSC_Machine
                  |L5.416|
                          DCD      maxLunExceed
                  |L5.420|
                          DCD      MSCErrorCount

                          AREA ||i.USBH_MSC_InterfaceDeInit||, CODE, READONLY, ALIGN=2

                  USBH_MSC_InterfaceDeInit PROC
;;;239      */
;;;240    void USBH_MSC_InterfaceDeInit ( USB_OTG_CORE_HANDLE *pdev,
000000  b570              PUSH     {r4-r6,lr}
;;;241                                    void *phost)
;;;242    {	
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;243      if ( MSC_Machine.hc_num_out)
000006  4810              LDR      r0,|L6.72|
000008  7840              LDRB     r0,[r0,#1]  ; MSC_Machine
00000a  b160              CBZ      r0,|L6.38|
;;;244      {
;;;245        USB_OTG_HC_Halt(pdev, MSC_Machine.hc_num_out);
00000c  480e              LDR      r0,|L6.72|
00000e  7841              LDRB     r1,[r0,#1]  ; MSC_Machine
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       USB_OTG_HC_Halt
;;;246        USBH_Free_Channel  (pdev, MSC_Machine.hc_num_out);
000016  480c              LDR      r0,|L6.72|
000018  7841              LDRB     r1,[r0,#1]  ; MSC_Machine
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       USBH_Free_Channel
;;;247        MSC_Machine.hc_num_out = 0;     /* Reset the Channel as Free */
000020  2000              MOVS     r0,#0
000022  4909              LDR      r1,|L6.72|
000024  7048              STRB     r0,[r1,#1]
                  |L6.38|
;;;248      }
;;;249       
;;;250      if ( MSC_Machine.hc_num_in)
000026  4808              LDR      r0,|L6.72|
000028  7800              LDRB     r0,[r0,#0]  ; MSC_Machine
00002a  b160              CBZ      r0,|L6.70|
;;;251      {
;;;252        USB_OTG_HC_Halt(pdev, MSC_Machine.hc_num_in);
00002c  4806              LDR      r0,|L6.72|
00002e  7801              LDRB     r1,[r0,#0]  ; MSC_Machine
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       USB_OTG_HC_Halt
;;;253        USBH_Free_Channel  (pdev, MSC_Machine.hc_num_in);
000036  4804              LDR      r0,|L6.72|
000038  7801              LDRB     r1,[r0,#0]  ; MSC_Machine
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       USBH_Free_Channel
;;;254        MSC_Machine.hc_num_in = 0;     /* Reset the Channel as Free */
000040  2000              MOVS     r0,#0
000042  4901              LDR      r1,|L6.72|
000044  7008              STRB     r0,[r1,#0]
                  |L6.70|
;;;255      } 
;;;256    }
000046  bd70              POP      {r4-r6,pc}
;;;257    
                          ENDP

                  |L6.72|
                          DCD      MSC_Machine

                          AREA ||i.USBH_MSC_InterfaceInit||, CODE, READONLY, ALIGN=2

                  USBH_MSC_InterfaceInit PROC
;;;170      */
;;;171    static USBH_Status USBH_MSC_InterfaceInit ( USB_OTG_CORE_HANDLE *pdev, 
000000  b57c              PUSH     {r2-r6,lr}
;;;172                                            void *phost)
;;;173    {	 
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;174      USBH_HOST *pphost = phost;
000006  462c              MOV      r4,r5
;;;175      
;;;176      if((pphost->device_prop.Itf_Desc[0].bInterfaceClass == MSC_CLASS) && \
000008  f8940043          LDRB     r0,[r4,#0x43]
00000c  2808              CMP      r0,#8
00000e  d156              BNE      |L7.190|
;;;177         (pphost->device_prop.Itf_Desc[0].bInterfaceProtocol == MSC_PROTOCOL))
000010  f8940045          LDRB     r0,[r4,#0x45]
000014  2850              CMP      r0,#0x50
000016  d152              BNE      |L7.190|
;;;178      {
;;;179        if(pphost->device_prop.Ep_Desc[0][0].bEndpointAddress & 0x80)
000018  f8940052          LDRB     r0,[r4,#0x52]
00001c  f0000080          AND      r0,r0,#0x80
000020  b138              CBZ      r0,|L7.50|
;;;180        {
;;;181          MSC_Machine.MSBulkInEp = (pphost->device_prop.Ep_Desc[0][0].bEndpointAddress);
000022  f8940052          LDRB     r0,[r4,#0x52]
000026  4929              LDR      r1,|L7.204|
000028  70c8              STRB     r0,[r1,#3]
;;;182          MSC_Machine.MSBulkInEpSize  = pphost->device_prop.Ep_Desc[0][0].wMaxPacketSize;
00002a  f8b40054          LDRH     r0,[r4,#0x54]
00002e  8088              STRH     r0,[r1,#4]
000030  e006              B        |L7.64|
                  |L7.50|
;;;183        }
;;;184        else
;;;185        {
;;;186          MSC_Machine.MSBulkOutEp = (pphost->device_prop.Ep_Desc[0][0].bEndpointAddress);
000032  f8940052          LDRB     r0,[r4,#0x52]
000036  4925              LDR      r1,|L7.204|
000038  7088              STRB     r0,[r1,#2]
;;;187          MSC_Machine.MSBulkOutEpSize  = pphost->device_prop.Ep_Desc[0] [0].wMaxPacketSize;      
00003a  f8b40054          LDRH     r0,[r4,#0x54]
00003e  80c8              STRH     r0,[r1,#6]
                  |L7.64|
;;;188        }
;;;189        
;;;190        if(pphost->device_prop.Ep_Desc[0][1].bEndpointAddress & 0x80)
000040  f894005a          LDRB     r0,[r4,#0x5a]
000044  f0000080          AND      r0,r0,#0x80
000048  b138              CBZ      r0,|L7.90|
;;;191        {
;;;192          MSC_Machine.MSBulkInEp = (pphost->device_prop.Ep_Desc[0][1].bEndpointAddress);
00004a  f894005a          LDRB     r0,[r4,#0x5a]
00004e  491f              LDR      r1,|L7.204|
000050  70c8              STRB     r0,[r1,#3]
;;;193          MSC_Machine.MSBulkInEpSize  = pphost->device_prop.Ep_Desc[0][1].wMaxPacketSize;      
000052  f8b4005c          LDRH     r0,[r4,#0x5c]
000056  8088              STRH     r0,[r1,#4]
000058  e006              B        |L7.104|
                  |L7.90|
;;;194        }
;;;195        else
;;;196        {
;;;197          MSC_Machine.MSBulkOutEp = (pphost->device_prop.Ep_Desc[0][1].bEndpointAddress);
00005a  f894005a          LDRB     r0,[r4,#0x5a]
00005e  491b              LDR      r1,|L7.204|
000060  7088              STRB     r0,[r1,#2]
;;;198          MSC_Machine.MSBulkOutEpSize  = pphost->device_prop.Ep_Desc[0][1].wMaxPacketSize;      
000062  f8b4005c          LDRH     r0,[r4,#0x5c]
000066  80c8              STRH     r0,[r1,#6]
                  |L7.104|
;;;199        }
;;;200        
;;;201        MSC_Machine.hc_num_out = USBH_Alloc_Channel(pdev, 
000068  4818              LDR      r0,|L7.204|
00006a  7881              LDRB     r1,[r0,#2]  ; MSC_Machine
00006c  4630              MOV      r0,r6
00006e  f7fffffe          BL       USBH_Alloc_Channel
000072  4916              LDR      r1,|L7.204|
000074  7048              STRB     r0,[r1,#1]
;;;202                                                    MSC_Machine.MSBulkOutEp);
;;;203        MSC_Machine.hc_num_in = USBH_Alloc_Channel(pdev,
000076  4608              MOV      r0,r1
000078  78c1              LDRB     r1,[r0,#3]  ; MSC_Machine
00007a  4630              MOV      r0,r6
00007c  f7fffffe          BL       USBH_Alloc_Channel
000080  4912              LDR      r1,|L7.204|
000082  7008              STRB     r0,[r1,#0]
;;;204                                                    MSC_Machine.MSBulkInEp);  
;;;205        
;;;206        /* Open the new channels */
;;;207        USBH_Open_Channel  (pdev,
000084  4608              MOV      r0,r1
000086  88c0              LDRH     r0,[r0,#6]  ; MSC_Machine
000088  2102              MOVS     r1,#2
00008a  e9cd1000          STRD     r1,r0,[sp,#0]
00008e  2021              MOVS     r0,#0x21
000090  5d03              LDRB     r3,[r0,r4]
000092  f8942020          LDRB     r2,[r4,#0x20]
000096  480d              LDR      r0,|L7.204|
000098  7841              LDRB     r1,[r0,#1]  ; MSC_Machine
00009a  4630              MOV      r0,r6
00009c  f7fffffe          BL       USBH_Open_Channel
;;;208                            MSC_Machine.hc_num_out,
;;;209                            pphost->device_prop.address,
;;;210                            pphost->device_prop.speed,
;;;211                            EP_TYPE_BULK,
;;;212                            MSC_Machine.MSBulkOutEpSize);  
;;;213        
;;;214        USBH_Open_Channel  (pdev,
0000a0  480a              LDR      r0,|L7.204|
0000a2  8880              LDRH     r0,[r0,#4]  ; MSC_Machine
0000a4  2102              MOVS     r1,#2
0000a6  e9cd1000          STRD     r1,r0,[sp,#0]
0000aa  2021              MOVS     r0,#0x21
0000ac  5d03              LDRB     r3,[r0,r4]
0000ae  f8942020          LDRB     r2,[r4,#0x20]
0000b2  4806              LDR      r0,|L7.204|
0000b4  7801              LDRB     r1,[r0,#0]  ; MSC_Machine
0000b6  4630              MOV      r0,r6
0000b8  f7fffffe          BL       USBH_Open_Channel
0000bc  e003              B        |L7.198|
                  |L7.190|
;;;215                            MSC_Machine.hc_num_in,
;;;216                            pphost->device_prop.address,
;;;217                            pphost->device_prop.speed,
;;;218                            EP_TYPE_BULK,
;;;219                            MSC_Machine.MSBulkInEpSize);    
;;;220        
;;;221      }
;;;222      
;;;223      else
;;;224      {
;;;225        pphost->usr_cb->DeviceNotSupported(); 
0000be  f8d41080          LDR      r1,[r4,#0x80]
0000c2  6c08              LDR      r0,[r1,#0x40]
0000c4  4780              BLX      r0
                  |L7.198|
;;;226      }
;;;227      
;;;228      return USBH_OK ;
0000c6  2000              MOVS     r0,#0
;;;229     
;;;230    }
0000c8  bd7c              POP      {r2-r6,pc}
;;;231    
                          ENDP

0000ca  0000              DCW      0x0000
                  |L7.204|
                          DCD      MSC_Machine

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  MSC_Machine
                          %        522

                          AREA ||.data||, DATA, ALIGN=2

                  MSC_Setup
                          %        8
                  MSCErrorCount
000008  00000000          DCB      0x00,0x00,0x00,0x00
                  USBH_MSC_cb
                          DCD      USBH_MSC_InterfaceInit
                          DCD      USBH_MSC_InterfaceDeInit
                          DCD      USBH_MSC_ClassRequest
                          DCD      USBH_MSC_Handle
                  maxLunExceed
00001c  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\Libraries\\STM32_USB_HOST_Library\\Class\\MSC\\src\\usbh_msc_core.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_usbh_msc_core_c_0007fda2____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_usbh_msc_core_c_0007fda2____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_usbh_msc_core_c_0007fda2____REVSH|
#line 144
|__asm___15_usbh_msc_core_c_0007fda2____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
