; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\demo_mp3_player.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\demo_mp3_player.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc -I..\..\Libraries\STM32_USB_HOST_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbh_mass_storage -I..\..\User\bsp_stm32f4xx\inc -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_HS -DUSE_EMBEDDED_PHY --omf_browse=.\flash\obj\demo_mp3_player.crf ..\..\User\demo_mp3_player.c]
                          THUMB

                          AREA ||i.DemoMP3||, CODE, READONLY, ALIGN=2

                  DemoMP3 PROC
;;;51     	uint8_t ucNextSong;
;;;52     void DemoMP3(void)
000000  b508              PUSH     {r3,lr}
;;;53     {
;;;54     	MP3HardInit();		/* 配置VS1053B硬件和WM8978硬件 */
000002  f7fffffe          BL       MP3HardInit
;;;55     	
;;;56     	USBH_Init(&USB_OTG_Core,USB_OTG_HS_CORE_ID,&USB_Host,&USBH_MSC_cb,&USR_cb);
000006  4807              LDR      r0,|L1.36|
000008  4b07              LDR      r3,|L1.40|
00000a  4a08              LDR      r2,|L1.44|
00000c  2100              MOVS     r1,#0
00000e  9000              STR      r0,[sp,#0]
000010  4807              LDR      r0,|L1.48|
000012  f7fffffe          BL       USBH_Init
;;;57     	
;;;58     	while(1)
000016  e003              B        |L1.32|
                  |L1.24|
;;;59     	{
;;;60     		USBH_Process(&USB_OTG_Core,&USB_Host);
000018  4904              LDR      r1,|L1.44|
00001a  4805              LDR      r0,|L1.48|
00001c  f7fffffe          BL       USBH_Process
                  |L1.32|
000020  e7fa              B        |L1.24|
;;;61     	}
;;;62     }
;;;63     
                          ENDP

000022  0000              DCW      0x0000
                  |L1.36|
                          DCD      USR_cb
                  |L1.40|
                          DCD      USBH_MSC_cb
                  |L1.44|
                          DCD      USB_Host
                  |L1.48|
                          DCD      USB_OTG_Core

                          AREA ||i.FillSongList||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  FillSongList PROC
;;;259    */
;;;260    static void FillSongList(void)
000000  b570              PUSH     {r4-r6,lr}
;;;261    {
000002  b0b2              SUB      sp,sp,#0xc8
;;;262    	/* 访问Fatfs用到的全局变量 */
;;;263    	FRESULT result;
;;;264    	FILINFO FileInf;
;;;265    	DIR DirInf;
;;;266    	char path[128];
;;;267    	
;;;268    	char *fn;
;;;269    	
;;;270    #if _USE_LFN 
;;;271    	static char lfn[_MAX_LFN +1];
;;;272    	FileInf.lfname = lfn;
000004  4848              LDR      r0,|L2.296|
000006  9030              STR      r0,[sp,#0xc0]
;;;273    	FileInf.lfsize = sizeof(lfn);
000008  f44f7080          MOV      r0,#0x100
00000c  9031              STR      r0,[sp,#0xc4]
;;;274    #endif
;;;275    
;;;276    	/* 挂载文件系统 */
;;;277    	result = f_mount(FS_SD, &g_fs);	/* Mount a logical drive */
00000e  4947              LDR      r1,|L2.300|
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       f_mount
000016  4604              MOV      r4,r0
;;;278    	if (result != FR_OK)
000018  b11c              CBZ      r4,|L2.34|
;;;279    	{
;;;280    		printf("挂载文件系统失败 (%d)\r\n", result);
00001a  4621              MOV      r1,r4
00001c  a044              ADR      r0,|L2.304|
00001e  f7fffffe          BL       __2printf
                  |L2.34|
;;;281    	}
;;;282    
;;;283    	/* 打开歌曲目录 */
;;;284    	sprintf(path, "%s", MP3_PATH);
000022  a249              ADR      r2,|L2.328|
000024  a14a              ADR      r1,|L2.336|
000026  a801              ADD      r0,sp,#4
000028  f7fffffe          BL       __2sprintf
;;;285    	result = f_opendir(&DirInf, path); 	/* path可以带盘符，最后一个字符不能是/ */
00002c  a901              ADD      r1,sp,#4
00002e  a821              ADD      r0,sp,#0x84
000030  f7fffffe          BL       f_opendir
000034  4604              MOV      r4,r0
;;;286    	if (result != FR_OK)
000036  b11c              CBZ      r4,|L2.64|
;;;287    	{
;;;288    		printf("Open Root Directory Error (%d)\r\n", result);
000038  4621              MOV      r1,r4
00003a  a046              ADR      r0,|L2.340|
00003c  f7fffffe          BL       __2printf
                  |L2.64|
;;;289    	}
;;;290    	
;;;291    	g_tMP3.ListIndex = 0;
000040  2000              MOVS     r0,#0
000042  494d              LDR      r1,|L2.376|
000044  8188              STRH     r0,[r1,#0xc]
;;;292    	g_tMP3.ListCount = 0;	/* 歌曲个数 */
000046  8148              STRH     r0,[r1,#0xa]
;;;293    	
;;;294    	printf("MP3 目录中的MP3文件:\r\n");
000048  a04c              ADR      r0,|L2.380|
00004a  f7fffffe          BL       __2printf
;;;295    	printf("/***************************************/\r\n");
00004e  a051              ADR      r0,|L2.404|
000050  f7fffffe          BL       __2printf
;;;296    	
;;;297    	for(;;)
000054  bf00              NOP      
                  |L2.86|
;;;298    	{
;;;299    		result = f_readdir(&DirInf,&FileInf); 		/* 读取目录项，索引会自动下移 */
000056  a92a              ADD      r1,sp,#0xa8
000058  a821              ADD      r0,sp,#0x84
00005a  f7fffffe          BL       f_readdir
00005e  4604              MOV      r4,r0
;;;300    			
;;;301    		if (result != FR_OK || FileInf.fname[0] == 0)
000060  b914              CBNZ     r4,|L2.104|
000062  f89d00b1          LDRB     r0,[sp,#0xb1]
000066  b900              CBNZ     r0,|L2.106|
                  |L2.104|
;;;302    		{
;;;303    			break;
000068  e04d              B        |L2.262|
                  |L2.106|
;;;304    		}
;;;305    
;;;306    		if (FileInf.fname[0] == '.')	/* 表示目录 */
00006a  f89d00b1          LDRB     r0,[sp,#0xb1]
00006e  282e              CMP      r0,#0x2e
000070  d100              BNE      |L2.116|
;;;307    		{
;;;308    			continue;
000072  e7f0              B        |L2.86|
                  |L2.116|
;;;309    		}
;;;310    	
;;;311    		if (FileInf.fattrib != AM_DIR)
000074  f89d00b0          LDRB     r0,[sp,#0xb0]
000078  2810              CMP      r0,#0x10
00007a  d043              BEQ      |L2.260|
;;;312    		{
;;;313    			uint8_t Len;
;;;314    
;;;315    			Len = strlen(FileInf.fname);
00007c  f10d00b1          ADD      r0,sp,#0xb1
000080  f7fffffe          BL       strlen
000084  b2c6              UXTB     r6,r0
;;;316    			if (Len >= 5)
000086  2e05              CMP      r6,#5
000088  db3b              BLT      |L2.258|
;;;317    			{
;;;318    				if (memcmp(&FileInf.fname[Len - 3], "MP3", 3) == 0)
00008a  1ef1              SUBS     r1,r6,#3
00008c  f10d02b1          ADD      r2,sp,#0xb1
000090  1888              ADDS     r0,r1,r2
000092  2203              MOVS     r2,#3
000094  a14a              ADR      r1,|L2.448|
000096  f7fffffe          BL       memcmp
00009a  bb88              CBNZ     r0,|L2.256|
;;;319    				{
;;;320    					/* 复制MP3文件名到播放列表 */
;;;321    
;;;322    #if _USE_LFN
;;;323    					fn = *FileInf.lfname ? FileInf.lfname : FileInf.fname;
00009c  9830              LDR      r0,[sp,#0xc0]
00009e  7800              LDRB     r0,[r0,#0]
0000a0  b108              CBZ      r0,|L2.166|
0000a2  9830              LDR      r0,[sp,#0xc0]
0000a4  e001              B        |L2.170|
                  |L2.166|
0000a6  f10d00b1          ADD      r0,sp,#0xb1
                  |L2.170|
0000aa  4605              MOV      r5,r0
;;;324    					strcpy(g_tPlayList[g_tMP3.ListCount].LenFileName, fn);
0000ac  4932              LDR      r1,|L2.376|
0000ae  8949              LDRH     r1,[r1,#0xa]  ; g_tMP3
0000b0  eb010281          ADD      r2,r1,r1,LSL #2
0000b4  eb021181          ADD      r1,r2,r1,LSL #6
0000b8  4a42              LDR      r2,|L2.452|
0000ba  eb020181          ADD      r1,r2,r1,LSL #2
0000be  f1010014          ADD      r0,r1,#0x14
0000c2  4629              MOV      r1,r5
0000c4  f7fffffe          BL       strcpy
;;;325    #else
;;;326    					fn = FileInf.fname;
;;;327    					strcpy(g_tPlayList[g_tMP3.ListCount].FileName, fn);
;;;328    #endif
;;;329    					
;;;330    					g_tPlayList[g_tMP3.ListCount].FileSize = FileInf.fsize;
0000c8  492b              LDR      r1,|L2.376|
0000ca  8949              LDRH     r1,[r1,#0xa]  ; g_tMP3
0000cc  eb010281          ADD      r2,r1,r1,LSL #2
0000d0  eb021181          ADD      r1,r2,r1,LSL #6
0000d4  4a3b              LDR      r2,|L2.452|
0000d6  eb020181          ADD      r1,r2,r1,LSL #2
0000da  982a              LDR      r0,[sp,#0xa8]
0000dc  6108              STR      r0,[r1,#0x10]
;;;331    					printf("%d-%s\r\n",g_tMP3.ListCount,fn);
0000de  4826              LDR      r0,|L2.376|
0000e0  8941              LDRH     r1,[r0,#0xa]  ; g_tMP3
0000e2  462a              MOV      r2,r5
0000e4  a038              ADR      r0,|L2.456|
0000e6  f7fffffe          BL       __2printf
;;;332    					g_tMP3.ListCount++;		/* 歌曲个数 */
0000ea  4823              LDR      r0,|L2.376|
0000ec  8940              LDRH     r0,[r0,#0xa]  ; g_tMP3
0000ee  1c40              ADDS     r0,r0,#1
0000f0  4921              LDR      r1,|L2.376|
0000f2  8148              STRH     r0,[r1,#0xa]
;;;333    					
;;;334    					
;;;335    					/* 如果MP3文件已填满，则退出 */
;;;336    					if (g_tMP3.ListCount > SONG_LIST_MAX)
0000f4  4608              MOV      r0,r1
0000f6  8940              LDRH     r0,[r0,#0xa]  ; g_tMP3
0000f8  f5b07f96          CMP      r0,#0x12c
0000fc  dd01              BLE      |L2.258|
;;;337    					{
;;;338    						break;
0000fe  e002              B        |L2.262|
                  |L2.256|
000100  e7ff              B        |L2.258|
                  |L2.258|
;;;339    					}
;;;340    				}
;;;341    			}
;;;342    		}
000102  bf00              NOP      
                  |L2.260|
000104  e7a7              B        |L2.86|
                  |L2.262|
000106  bf00              NOP                            ;303
;;;343    	}
;;;344    	printf("/***************************************/\r\n");
000108  a022              ADR      r0,|L2.404|
00010a  f7fffffe          BL       __2printf
;;;345    	
;;;346    	if (g_tMP3.ListCount == 0)
00010e  481a              LDR      r0,|L2.376|
000110  8940              LDRH     r0,[r0,#0xa]  ; g_tMP3
000112  b918              CBNZ     r0,|L2.284|
;;;347    	{
;;;348    		printf("没有在根目录下找到 MP3 文件\r\n");
000114  a02e              ADR      r0,|L2.464|
000116  f7fffffe          BL       __2printf
00011a  e003              B        |L2.292|
                  |L2.284|
;;;349    	}
;;;350    	else
;;;351    	{
;;;352    		g_tMP3.MaxIndex = g_tMP3.ListCount;
00011c  4816              LDR      r0,|L2.376|
00011e  8940              LDRH     r0,[r0,#0xa]  ; g_tMP3
000120  4915              LDR      r1,|L2.376|
000122  81c8              STRH     r0,[r1,#0xe]
                  |L2.292|
;;;353    	}
;;;354    }
000124  b032              ADD      sp,sp,#0xc8
000126  bd70              POP      {r4-r6,pc}
;;;355    
                          ENDP

                  |L2.296|
                          DCD      lfn
                  |L2.300|
                          DCD      g_fs
                  |L2.304|
000130  b9d2d4d8          DCB      185,210,212,216,206,196,188,254,207,181,205,179,202,167,176
000134  cec4bcfe
000138  cfb5cdb3
00013c  caa7b0  
00013f  dc202825          DCB      220," (%d)\r\n",0
000143  64290d0a
000147  00      
                  |L2.328|
000148  2f4d5033          DCB      "/MP3",0
00014c  00      
00014d  00                DCB      0
00014e  00                DCB      0
00014f  00                DCB      0
                  |L2.336|
000150  257300            DCB      "%s",0
000153  00                DCB      0
                  |L2.340|
000154  4f70656e          DCB      "Open Root Directory Error (%d)\r\n",0
000158  20526f6f
00015c  74204469
000160  72656374
000164  6f727920
000168  4572726f
00016c  72202825
000170  64290d0a
000174  00      
000175  00                DCB      0
000176  00                DCB      0
000177  00                DCB      0
                  |L2.376|
                          DCD      g_tMP3
                  |L2.380|
00017c  4d503320          DCB      "MP3 ",196,191,194,188,214,208,181,196,"MP3",206,196,188
000180  c4bfc2bc
000184  d6d0b5c4
000188  4d5033ce
00018c  c4bc    
00018e  fe3a0d0a          DCB      254,":\r\n",0
000192  00      
000193  00                DCB      0
                  |L2.404|
000194  2f2a2a2a          DCB      "/***************************************/\r\n",0
000198  2a2a2a2a
00019c  2a2a2a2a
0001a0  2a2a2a2a
0001a4  2a2a2a2a
0001a8  2a2a2a2a
0001ac  2a2a2a2a
0001b0  2a2a2a2a
0001b4  2a2a2a2a
0001b8  2a2a2a2a
0001bc  2f0d0a00
                  |L2.448|
0001c0  4d503300          DCB      "MP3",0
                  |L2.452|
                          DCD      g_tPlayList
                  |L2.456|
0001c8  25642d25          DCB      "%d-%s\r\n",0
0001cc  730d0a00
                  |L2.464|
0001d0  c3bbd3d0          DCB      195,187,211,208,212,218,184,249,196,191,194,188,207,194,213
0001d4  d4dab8f9
0001d8  c4bfc2bc
0001dc  cfc2d5  
0001df  d2b5bd20          DCB      210,181,189," MP3 ",206,196,188,254,"\r\n",0
0001e3  4d503320
0001e7  cec4bcfe
0001eb  0d0a00  
0001ee  00                DCB      0
0001ef  00                DCB      0

                          AREA ||i.Generate_Index||, CODE, READONLY, ALIGN=2

                  Generate_Index PROC
;;;416    */
;;;417    static uint16_t Generate_Index(void)
000000  b570              PUSH     {r4-r6,lr}
;;;418    {
;;;419    	uint16_t index;
;;;420    	uint32_t random;
;;;421    	
;;;422    	random = bsp_Generate_Random();
000002  f7fffffe          BL       bsp_Generate_Random
000006  4605              MOV      r5,r0
;;;423    	index = random % g_tMP3.MaxIndex;
000008  4804              LDR      r0,|L3.28|
00000a  89c0              LDRH     r0,[r0,#0xe]  ; g_tMP3
00000c  fbb5f1f0          UDIV     r1,r5,r0
000010  fb005011          MLS      r0,r0,r1,r5
000014  b284              UXTH     r4,r0
;;;424    	
;;;425    	return index;
000016  4620              MOV      r0,r4
;;;426    }
000018  bd70              POP      {r4-r6,pc}
;;;427    
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      g_tMP3

                          AREA ||i.MP3HardInit||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  MP3HardInit PROC
;;;187    */
;;;188    static void MP3HardInit(void)
000000  b510              PUSH     {r4,lr}
;;;189    {
;;;190    	/* 配置VS1053硬件 */
;;;191    	{
;;;192    		/* 等待芯片内部操作完成 */
;;;193    		if (vs1053_WaitTimeOut())
000002  f7fffffe          BL       vs1053_WaitTimeOut
000006  b118              CBZ      r0,|L4.16|
;;;194    		{
;;;195    			/* 如果没有插VS1053B模块，DREQ口线将返回低电平，这是一种异常情况 */
;;;196    			printf("没有检测到MP3模块硬件\r\n");
000008  a01a              ADR      r0,|L4.116|
00000a  f7fffffe          BL       __2printf
                  |L4.14|
;;;197    			return;
;;;198    		}
;;;199    
;;;200    		vs1053_Init();
;;;201    		vs1053_SoftReset();
;;;202    
;;;203    		/* 打印MP3解码芯片型号 */
;;;204    		{
;;;205    			char *pModel;
;;;206    
;;;207    			switch (vs1053_ReadChipID())
;;;208    			{
;;;209    				case VS1001:
;;;210    					pModel = "VS1001";
;;;211    					break;
;;;212    
;;;213    				case VS1011:
;;;214    					pModel = "VS1011";
;;;215    					break;
;;;216    
;;;217    				case VS1002:
;;;218    					pModel = "VS1002";
;;;219    					break;
;;;220    
;;;221    				case VS1003:
;;;222    					pModel = "VS1003";
;;;223    					break;
;;;224    
;;;225    				case VS1053:
;;;226    					pModel = "VS1053";
;;;227    					break;
;;;228    
;;;229    				case VS1033:
;;;230    					pModel = "VS1033";
;;;231    					break;
;;;232    
;;;233    				case VS1103:
;;;234    					pModel = "VS1103";
;;;235    					break;
;;;236    
;;;237    				default:
;;;238    					pModel = "unknow";
;;;239    					break;
;;;240    			}
;;;241    			printf(" 解码芯片型号 : %s\r\n", pModel);	/* 显示芯片型号 */
;;;242    		}
;;;243    
;;;244    		g_tMP3.ucVolume = 200; 			/* 缺省音量,越大声音越小 */
;;;245    		vs1053_SetVolume(g_tMP3.ucVolume);
;;;246    
;;;247    		vs1053_SetBASS(0, 0, 0, 0);		/* 高频和低音不增强 */
;;;248    	}
;;;249    
;;;250    }
00000e  bd10              POP      {r4,pc}
                  |L4.16|
000010  f7fffffe          BL       vs1053_Init
000014  f7fffffe          BL       vs1053_SoftReset
000018  f7fffffe          BL       vs1053_ReadChipID
00001c  2808              CMP      r0,#8                 ;207
00001e  d213              BCS      |L4.72|
000020  e8dff000          TBB      [pc,r0]               ;207
000024  0406080a          DCB      0x04,0x06,0x08,0x0a
000028  0c0e1210          DCB      0x0c,0x0e,0x12,0x10
00002c  a417              ADR      r4,|L4.140|
00002e  e00d              B        |L4.76|
000030  a418              ADR      r4,|L4.148|
000032  e00b              B        |L4.76|
000034  a419              ADR      r4,|L4.156|
000036  e009              B        |L4.76|
000038  a41a              ADR      r4,|L4.164|
00003a  e007              B        |L4.76|
00003c  a41b              ADR      r4,|L4.172|
00003e  e005              B        |L4.76|
000040  a41c              ADR      r4,|L4.180|
000042  e003              B        |L4.76|
000044  a41d              ADR      r4,|L4.188|
000046  e001              B        |L4.76|
                  |L4.72|
000048  a41e              ADR      r4,|L4.196|
00004a  bf00              NOP                            ;239
                  |L4.76|
00004c  bf00              NOP                            ;211
00004e  4621              MOV      r1,r4                 ;241
000050  a01e              ADR      r0,|L4.204|
000052  f7fffffe          BL       __2printf
000056  20c8              MOVS     r0,#0xc8              ;244
000058  4922              LDR      r1,|L4.228|
00005a  7048              STRB     r0,[r1,#1]            ;244
00005c  7848              LDRB     r0,[r1,#1]            ;245  ; g_tMP3
00005e  f7fffffe          BL       vs1053_SetVolume
000062  2300              MOVS     r3,#0                 ;247
000064  461a              MOV      r2,r3                 ;247
000066  4619              MOV      r1,r3                 ;247
000068  4618              MOV      r0,r3                 ;247
00006a  f7fffffe          BL       vs1053_SetBASS
00006e  bf00              NOP      
000070  e7cd              B        |L4.14|
;;;251    
                          ENDP

000072  0000              DCW      0x0000
                  |L4.116|
000074  c3bbd3d0          DCB      195,187,211,208,188,236,178,226,181,189,"MP3",196,163,191
000078  bcecb2e2
00007c  b5bd4d50
000080  33c4a3bf
000084  e9d3b2bc          DCB      233,211,178,188,254,"\r\n",0
000088  fe0d0a00
                  |L4.140|
00008c  56533130          DCB      "VS1001",0
000090  303100  
000093  00                DCB      0
                  |L4.148|
000094  56533130          DCB      "VS1011",0
000098  313100  
00009b  00                DCB      0
                  |L4.156|
00009c  56533130          DCB      "VS1002",0
0000a0  303200  
0000a3  00                DCB      0
                  |L4.164|
0000a4  56533130          DCB      "VS1003",0
0000a8  303300  
0000ab  00                DCB      0
                  |L4.172|
0000ac  56533130          DCB      "VS1053",0
0000b0  353300  
0000b3  00                DCB      0
                  |L4.180|
0000b4  56533130          DCB      "VS1033",0
0000b8  333300  
0000bb  00                DCB      0
                  |L4.188|
0000bc  56533131          DCB      "VS1103",0
0000c0  303300  
0000c3  00                DCB      0
                  |L4.196|
0000c4  756e6b6e          DCB      "unknow",0
0000c8  6f7700  
0000cb  00                DCB      0
                  |L4.204|
0000cc  20bde2c2          DCB      " ",189,226,194,235,208,190,198,172,208,205,186,197," : "
0000d0  ebd0bec6
0000d4  acd0cdba
0000d8  c5203a20
0000dc  25730d0a          DCB      "%s\r\n",0
0000e0  00      
0000e1  00                DCB      0
0000e2  00                DCB      0
0000e3  00                DCB      0
                  |L4.228|
                          DCD      g_tMP3

                          AREA ||i.Mp3Pro||, CODE, READONLY, ALIGN=2

                  Mp3Pro PROC
;;;363    */
;;;364    static uint8_t Mp3Pro(void)
000000  b510              PUSH     {r4,lr}
;;;365    {
000002  b08a              SUB      sp,sp,#0x28
;;;366    	uint32_t bw,i;
;;;367    	char buf[32];
;;;368    
;;;369    	/* 如果VS1003空闲，则写入新的数据 */
;;;370    	if (vs1053_ReqNewData())
000004  f7fffffe          BL       vs1053_ReqNewData
000008  b1e0              CBZ      r0,|L5.68|
;;;371    	{
;;;372    		f_read(&g_Mp3File, &buf, 32, &bw);
00000a  ab09              ADD      r3,sp,#0x24
00000c  2220              MOVS     r2,#0x20
00000e  a901              ADD      r1,sp,#4
000010  480d              LDR      r0,|L5.72|
000012  f7fffffe          BL       f_read
;;;373    		if (bw <= 0)
000016  9809              LDR      r0,[sp,#0x24]
000018  b910              CBNZ     r0,|L5.32|
;;;374    		{
;;;375    			return 1;
00001a  2001              MOVS     r0,#1
                  |L5.28|
;;;376    		}
;;;377    
;;;378    		/* 计算进度 */
;;;379    		g_tMP3.uiProgress += bw;
;;;380    
;;;381    		vs1053_PreWriteData();	/* 写数据准备，设置好片选 */
;;;382    		for (i = 0; i < bw; i++)
;;;383    		{
;;;384    			vs1053_WriteData(buf[i]);
;;;385    		}
;;;386    	}
;;;387    	return 0;
;;;388    }
00001c  b00a              ADD      sp,sp,#0x28
00001e  bd10              POP      {r4,pc}
                  |L5.32|
000020  480a              LDR      r0,|L5.76|
000022  6840              LDR      r0,[r0,#4]            ;379  ; g_tMP3
000024  9909              LDR      r1,[sp,#0x24]         ;379
000026  4408              ADD      r0,r0,r1              ;379
000028  4908              LDR      r1,|L5.76|
00002a  6048              STR      r0,[r1,#4]            ;379  ; g_tMP3
00002c  f7fffffe          BL       vs1053_PreWriteData
000030  2400              MOVS     r4,#0                 ;382
000032  e004              B        |L5.62|
                  |L5.52|
000034  a901              ADD      r1,sp,#4              ;384
000036  5d08              LDRB     r0,[r1,r4]            ;384
000038  f7fffffe          BL       vs1053_WriteData
00003c  1c64              ADDS     r4,r4,#1              ;382
                  |L5.62|
00003e  9809              LDR      r0,[sp,#0x24]         ;382
000040  4284              CMP      r4,r0                 ;382
000042  d3f7              BCC      |L5.52|
                  |L5.68|
000044  2000              MOVS     r0,#0                 ;387
000046  e7e9              B        |L5.28|
;;;389    /*
                          ENDP

                  |L5.72|
                          DCD      g_Mp3File
                  |L5.76|
                          DCD      g_tMP3

                          AREA ||i.atoi||, CODE, READONLY, ALIGN=1

                  atoi PROC
;;;396    */
;;;397    static int atoi(char *str)        
000000  b510              PUSH     {r4,lr}
;;;398    {
000002  4601              MOV      r1,r0
;;;399     int i,sum;
;;;400     i=0;
000004  2200              MOVS     r2,#0
;;;401     sum=0;
000006  2000              MOVS     r0,#0
;;;402     while(str[i])            
000008  e006              B        |L6.24|
                  |L6.10|
;;;403     {
;;;404      sum=sum*10+(str[i] - 0x30);
00000a  5c8b              LDRB     r3,[r1,r2]
00000c  3b30              SUBS     r3,r3,#0x30
00000e  eb000480          ADD      r4,r0,r0,LSL #2
000012  eb030044          ADD      r0,r3,r4,LSL #1
;;;405    	 i++;
000016  1c52              ADDS     r2,r2,#1
                  |L6.24|
000018  5c8b              LDRB     r3,[r1,r2]            ;402
00001a  2b00              CMP      r3,#0                 ;402
00001c  d1f5              BNE      |L6.10|
;;;406     }
;;;407     return(sum);
;;;408    }
00001e  bd10              POP      {r4,pc}
;;;409    /*
                          ENDP


                          AREA ||i.ush_usr_action||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  ush_usr_action PROC
;;;109    */
;;;110    void ush_usr_action()
000000  b510              PUSH     {r4,lr}
;;;111    {		
000002  f5ad7d00          SUB      sp,sp,#0x200
;;;112    	char IndexBuf[256];
;;;113    
;;;114    		bsp_Idle();		/* 这个函数在bsp.c文件。用户可以修改这个函数实现CPU休眠和喂狗 */
000006  f7fffffe          BL       bsp_Idle
;;;115    	
;;;116    		//串口选择歌曲
;;;117    		if(g_tUsart1.ucRxFinish == FINISH)
00000a  4846              LDR      r0,|L7.292|
00000c  7c40              LDRB     r0,[r0,#0x11]  ; g_tUsart1
00000e  2801              CMP      r0,#1
000010  d11f              BNE      |L7.82|
;;;118    		{
;;;119    			memset(IndexBuf,0,256);					
000012  0201              LSLS     r1,r0,#8
000014  a840              ADD      r0,sp,#0x100
000016  f7fffffe          BL       __aeabi_memclr4
;;;120    			memcpy(IndexBuf,g_tUsart1.pRxBuf,g_tUsart1.usRxCount);	
00001a  4842              LDR      r0,|L7.292|
00001c  89c2              LDRH     r2,[r0,#0xe]  ; g_tUsart1
00001e  6841              LDR      r1,[r0,#4]  ; g_tUsart1
000020  a840              ADD      r0,sp,#0x100
000022  f7fffffe          BL       __aeabi_memcpy
;;;121    			g_tMP3.ListIndex = atoi(IndexBuf);					
000026  a840              ADD      r0,sp,#0x100
000028  f7fffffe          BL       atoi
00002c  493e              LDR      r1,|L7.296|
00002e  8188              STRH     r0,[r1,#0xc]
;;;122    			
;;;123    			g_tUsart1.ucRxFinish = 0;
000030  2000              MOVS     r0,#0
000032  493c              LDR      r1,|L7.292|
000034  7448              STRB     r0,[r1,#0x11]
;;;124    			g_tUsart1.usRxCount = 0;
000036  81c8              STRH     r0,[r1,#0xe]
;;;125    			memset(IndexBuf,0,256);
000038  f44f7180          MOV      r1,#0x100
00003c  a840              ADD      r0,sp,#0x100
00003e  f7fffffe          BL       __aeabi_memclr4
;;;126    			memset(g_tUsart1.pRxBuf,0,g_tUsart1.usRxSize);
000042  4a38              LDR      r2,|L7.292|
000044  8951              LDRH     r1,[r2,#0xa]  ; g_tUsart1
000046  6850              LDR      r0,[r2,#4]  ; g_tUsart1
000048  f7fffffe          BL       __aeabi_memclr
;;;127    			
;;;128    			ucNextSong = 1; //启动歌曲切换
00004c  2001              MOVS     r0,#1
00004e  4937              LDR      r1,|L7.300|
000050  7008              STRB     r0,[r1,#0]
                  |L7.82|
;;;129    		}
;;;130    			
;;;131    		/* 打开歌曲文件 */
;;;132    		if (ucNextSong == 1)
000052  4836              LDR      r0,|L7.300|
000054  7800              LDRB     r0,[r0,#0]  ; ucNextSong
000056  2801              CMP      r0,#1
000058  d140              BNE      |L7.220|
;;;133    		{
;;;134    			ucNextSong = 0;
00005a  2000              MOVS     r0,#0
00005c  4933              LDR      r1,|L7.300|
00005e  7008              STRB     r0,[r1,#0]
;;;135    
;;;136    			/* 关闭上一个文件*/
;;;137    			f_close(&g_Mp3File);
000060  4833              LDR      r0,|L7.304|
000062  f7fffffe          BL       f_close
;;;138    
;;;139    			/* 打开MUSIC目录下的mp3 文件 */
;;;140    			{
;;;141    				char FileName[256];
;;;142    				FRESULT result;
;;;143    
;;;144    				sprintf(FileName, "%s/%s",MP3_PATH,g_tPlayList[g_tMP3.ListIndex].LenFileName);
000066  4830              LDR      r0,|L7.296|
000068  8980              LDRH     r0,[r0,#0xc]  ; g_tMP3
00006a  eb000180          ADD      r1,r0,r0,LSL #2
00006e  eb011080          ADD      r0,r1,r0,LSL #6
000072  4930              LDR      r1,|L7.308|
000074  eb010080          ADD      r0,r1,r0,LSL #2
000078  f1000314          ADD      r3,r0,#0x14
00007c  a22e              ADR      r2,|L7.312|
00007e  a130              ADR      r1,|L7.320|
000080  4668              MOV      r0,sp
000082  f7fffffe          BL       __2sprintf
;;;145    				result = f_open(&g_Mp3File, FileName, FA_OPEN_EXISTING | FA_READ);
000086  2201              MOVS     r2,#1
000088  4669              MOV      r1,sp
00008a  4829              LDR      r0,|L7.304|
00008c  f7fffffe          BL       f_open
000090  4604              MOV      r4,r0
;;;146    				if (result !=  FR_OK)
000092  b184              CBZ      r4,|L7.182|
;;;147    				{
;;;148    					printf("打开MP3文件失败, %d-%s\r\n",g_tMP3.ListIndex, g_tPlayList[g_tMP3.ListIndex].LenFileName);
000094  4824              LDR      r0,|L7.296|
000096  8980              LDRH     r0,[r0,#0xc]  ; g_tMP3
000098  eb000380          ADD      r3,r0,r0,LSL #2
00009c  eb031080          ADD      r0,r3,r0,LSL #6
0000a0  4b24              LDR      r3,|L7.308|
0000a2  eb030080          ADD      r0,r3,r0,LSL #2
0000a6  f1000214          ADD      r2,r0,#0x14
0000aa  481f              LDR      r0,|L7.296|
0000ac  8981              LDRH     r1,[r0,#0xc]  ; g_tMP3
0000ae  a026              ADR      r0,|L7.328|
0000b0  f7fffffe          BL       __2printf
0000b4  e00f              B        |L7.214|
                  |L7.182|
;;;149    				}
;;;150    				else
;;;151    				{
;;;152    					printf("正在播放: %d-%s\r\n",g_tMP3.ListIndex, g_tPlayList[g_tMP3.ListIndex].LenFileName);
0000b6  481c              LDR      r0,|L7.296|
0000b8  8980              LDRH     r0,[r0,#0xc]  ; g_tMP3
0000ba  eb000380          ADD      r3,r0,r0,LSL #2
0000be  eb031080          ADD      r0,r3,r0,LSL #6
0000c2  4b1c              LDR      r3,|L7.308|
0000c4  eb030080          ADD      r0,r3,r0,LSL #2
0000c8  f1000214          ADD      r2,r0,#0x14
0000cc  4816              LDR      r0,|L7.296|
0000ce  8981              LDRH     r1,[r0,#0xc]  ; g_tMP3
0000d0  a024              ADR      r0,|L7.356|
0000d2  f7fffffe          BL       __2printf
                  |L7.214|
;;;153    				}
;;;154    			}
;;;155    			g_tMP3.uiProgress = 0;	/* 进度 */
0000d6  2000              MOVS     r0,#0
0000d8  4913              LDR      r1,|L7.296|
0000da  6048              STR      r0,[r1,#4]  ; g_tMP3
                  |L7.220|
;;;156    		}
;;;157    
;;;158    		if (g_tMP3.ucPauseEn == 0)
0000dc  4812              LDR      r0,|L7.296|
0000de  7a00              LDRB     r0,[r0,#8]  ; g_tMP3
0000e0  b9e0              CBNZ     r0,|L7.284|
;;;159    		{
;;;160    			if (Mp3Pro() == 1)
0000e2  f7fffffe          BL       Mp3Pro
0000e6  2801              CMP      r0,#1
0000e8  d118              BNE      |L7.284|
;;;161    			{
;;;162    				//播放完成，根据模式确认下一首歌索引
;;;163    				if(g_tMP3.Mode == SIGNAL)
0000ea  480f              LDR      r0,|L7.296|
0000ec  7c00              LDRB     r0,[r0,#0x10]  ; g_tMP3
0000ee  b920              CBNZ     r0,|L7.250|
;;;164    				{
;;;165    					g_tMP3.ListIndex = g_tMP3.ListIndex;
0000f0  480d              LDR      r0,|L7.296|
0000f2  8980              LDRH     r0,[r0,#0xc]  ; g_tMP3
0000f4  490c              LDR      r1,|L7.296|
0000f6  8188              STRH     r0,[r1,#0xc]
0000f8  e00d              B        |L7.278|
                  |L7.250|
;;;166    				}
;;;167    				else if(g_tMP3.Mode == LIST)
0000fa  480b              LDR      r0,|L7.296|
0000fc  7c00              LDRB     r0,[r0,#0x10]  ; g_tMP3
0000fe  2801              CMP      r0,#1
000100  d105              BNE      |L7.270|
;;;168    				{
;;;169    					g_tMP3.ListIndex += 1;
000102  4809              LDR      r0,|L7.296|
000104  8980              LDRH     r0,[r0,#0xc]  ; g_tMP3
000106  1c40              ADDS     r0,r0,#1
000108  4907              LDR      r1,|L7.296|
00010a  8188              STRH     r0,[r1,#0xc]
00010c  e003              B        |L7.278|
                  |L7.270|
;;;170    				}
;;;171    				else 
;;;172    				{
;;;173    					g_tMP3.ListIndex = Generate_Index();
00010e  f7fffffe          BL       Generate_Index
000112  4905              LDR      r1,|L7.296|
000114  8188              STRH     r0,[r1,#0xc]
                  |L7.278|
;;;174    				}
;;;175    				ucNextSong = 1;											//打开下一首歌
000116  2001              MOVS     r0,#1
000118  4904              LDR      r1,|L7.300|
00011a  7008              STRB     r0,[r1,#0]
                  |L7.284|
;;;176    			}
;;;177    		}
;;;178    }
00011c  f50d7d00          ADD      sp,sp,#0x200
000120  bd10              POP      {r4,pc}
;;;179    
                          ENDP

000122  0000              DCW      0x0000
                  |L7.292|
                          DCD      g_tUsart1
                  |L7.296|
                          DCD      g_tMP3
                  |L7.300|
                          DCD      ucNextSong
                  |L7.304|
                          DCD      g_Mp3File
                  |L7.308|
                          DCD      g_tPlayList
                  |L7.312|
000138  2f4d5033          DCB      "/MP3",0
00013c  00      
00013d  00                DCB      0
00013e  00                DCB      0
00013f  00                DCB      0
                  |L7.320|
000140  25732f25          DCB      "%s/%s",0
000144  7300    
000146  00                DCB      0
000147  00                DCB      0
                  |L7.328|
000148  b4f2bfaa          DCB      180,242,191,170,"MP3",206,196,188,254,202,167,176,220,","
00014c  4d5033ce
000150  c4bcfeca
000154  a7b0dc2c
000158  2025642d          DCB      " %d-%s\r\n",0
00015c  25730d0a
000160  00      
000161  00                DCB      0
000162  00                DCB      0
000163  00                DCB      0
                  |L7.356|
000164  d5fdd4da          DCB      213,253,212,218,178,165,183,197,": %d-%s\r\n",0
000168  b2a5b7c5
00016c  3a202564
000170  2d25730d
000174  0a00    
000176  00                DCB      0
000177  00                DCB      0

                          AREA ||i.ush_usr_fs_init||, CODE, READONLY, ALIGN=2

                  ush_usr_fs_init PROC
;;;71     */
;;;72     void ush_usr_fs_init()
000000  b510              PUSH     {r4,lr}
;;;73     {
;;;74     	FillSongList();		/* 搜索磁盘根目录下的MP3文件，并填充到播放列表数组 */
000002  f7fffffe          BL       FillSongList
;;;75     
;;;76     	g_tMP3.ucPauseEn = 0;	/* 缺省开始播放 */
000006  2000              MOVS     r0,#0
000008  490e              LDR      r1,|L8.68|
00000a  7208              STRB     r0,[r1,#8]
;;;77     
;;;78     	if (g_tMP3.ListCount > 0)
00000c  4608              MOV      r0,r1
00000e  8940              LDRH     r0,[r0,#0xa]  ; g_tMP3
000010  2800              CMP      r0,#0
000012  dd03              BLE      |L8.28|
;;;79     	{
;;;80     		ucNextSong = 1;			/* 定位下一首歌曲的标志 */
000014  2001              MOVS     r0,#1
000016  490c              LDR      r1,|L8.72|
000018  7008              STRB     r0,[r1,#0]
00001a  e002              B        |L8.34|
                  |L8.28|
;;;81     	}
;;;82     	else
;;;83     	{
;;;84     		ucNextSong = 0;
00001c  2000              MOVS     r0,#0
00001e  490a              LDR      r1,|L8.72|
000020  7008              STRB     r0,[r1,#0]
                  |L8.34|
;;;85     	}
;;;86     	//配置初始化模式
;;;87     	g_tMP3.Mode = RANDOM;
000022  2002              MOVS     r0,#2
000024  4907              LDR      r1,|L8.68|
000026  7408              STRB     r0,[r1,#0x10]
;;;88     	
;;;89     	//根据模式确认索引
;;;90     	if(g_tMP3.Mode == RANDOM)
000028  4608              MOV      r0,r1
00002a  7c00              LDRB     r0,[r0,#0x10]  ; g_tMP3
00002c  2802              CMP      r0,#2
00002e  d104              BNE      |L8.58|
;;;91     	{
;;;92     		g_tMP3.ListIndex = Generate_Index();
000030  f7fffffe          BL       Generate_Index
000034  4903              LDR      r1,|L8.68|
000036  8188              STRH     r0,[r1,#0xc]
000038  e002              B        |L8.64|
                  |L8.58|
;;;93     	}
;;;94     	else
;;;95     	{
;;;96     		g_tMP3.ListIndex = 0;
00003a  2000              MOVS     r0,#0
00003c  4901              LDR      r1,|L8.68|
00003e  8188              STRH     r0,[r1,#0xc]
                  |L8.64|
;;;97     	}
;;;98     }
000040  bd10              POP      {r4,pc}
;;;99     
                          ENDP

000042  0000              DCW      0x0000
                  |L8.68|
                          DCD      g_tMP3
                  |L8.72|
                          DCD      ucNextSong

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_tMP3
                          %        20
                  g_tPlayList
                          %        82800
                  g_fs
                          %        564
                  g_Mp3File
                          %        552
                  lfn
                          %        256

                          AREA ||.data||, DATA, ALIGN=0

                  ucKeyCode
000000  00                DCB      0x00
                  ucNextSong
000001  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\demo_mp3_player.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_demo_mp3_player_c_DemoMP3____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___17_demo_mp3_player_c_DemoMP3____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_demo_mp3_player_c_DemoMP3____REVSH|
#line 144
|__asm___17_demo_mp3_player_c_DemoMP3____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
