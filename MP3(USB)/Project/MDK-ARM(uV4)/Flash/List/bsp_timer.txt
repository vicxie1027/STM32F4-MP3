; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_timer.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_timer.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc -I..\..\Libraries\STM32_USB_HOST_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbh_mass_storage -I..\..\User\bsp_stm32f4xx\inc -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_HS -DUSE_EMBEDDED_PHY --omf_browse=.\flash\obj\bsp_timer.crf ..\..\User\bsp_stm32f4xx\src\bsp_timer.c]
                          THUMB

                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=1

                  SysTick_Handler PROC
;;;376    */
;;;377    void SysTick_Handler(void)
000000  b510              PUSH     {r4,lr}
;;;378    {
;;;379    	SysTick_ISR();
000002  f7fffffe          BL       SysTick_ISR
;;;380    }
000006  bd10              POP      {r4,pc}
;;;381    
                          ENDP


                          AREA ||i.SysTick_ISR||, CODE, READONLY, ALIGN=2

                  SysTick_ISR PROC
;;;85     extern void bsp_RunPer10ms(void);
;;;86     void SysTick_ISR(void)
000000  b510              PUSH     {r4,lr}
;;;87     {
;;;88     	static uint8_t s_count = 0;
;;;89     	uint8_t i;
;;;90     
;;;91     	/* 每隔1ms进来1次 （仅用于 bsp_DelayMS） */
;;;92     	if (s_uiDelayCount > 0)
000002  481b              LDR      r0,|L2.112|
000004  6800              LDR      r0,[r0,#0]  ; s_uiDelayCount
000006  b140              CBZ      r0,|L2.26|
;;;93     	{
;;;94     		if (--s_uiDelayCount == 0)
000008  4819              LDR      r0,|L2.112|
00000a  6800              LDR      r0,[r0,#0]  ; s_uiDelayCount
00000c  1e40              SUBS     r0,r0,#1
00000e  4918              LDR      r1,|L2.112|
000010  6008              STR      r0,[r1,#0]  ; s_uiDelayCount
000012  b910              CBNZ     r0,|L2.26|
;;;95     		{
;;;96     			s_ucTimeOutFlag = 1;
000014  2001              MOVS     r0,#1
000016  4917              LDR      r1,|L2.116|
000018  7008              STRB     r0,[r1,#0]
                  |L2.26|
;;;97     		}
;;;98     	}
;;;99     
;;;100    	/* 每隔1ms，对软件定时器的计数器进行减一操作 */
;;;101    	for (i = 0; i < TMR_COUNT; i++)
00001a  2400              MOVS     r4,#0
00001c  e008              B        |L2.48|
                  |L2.30|
;;;102    	{
;;;103    		bsp_SoftTimerDec(&s_tTmr[i]);
00001e  eb040144          ADD      r1,r4,r4,LSL #1
000022  4a15              LDR      r2,|L2.120|
000024  eb020081          ADD      r0,r2,r1,LSL #2
000028  f7fffffe          BL       bsp_SoftTimerDec
00002c  1c60              ADDS     r0,r4,#1              ;101
00002e  b2c4              UXTB     r4,r0                 ;101
                  |L2.48|
000030  2c04              CMP      r4,#4                 ;101
000032  dbf4              BLT      |L2.30|
;;;104    	}
;;;105    
;;;106    	/* 全局运行时间每1ms增1 */
;;;107    	g_iRunTime++;
000034  4811              LDR      r0,|L2.124|
000036  6800              LDR      r0,[r0,#0]  ; g_iRunTime
000038  1c40              ADDS     r0,r0,#1
00003a  4910              LDR      r1,|L2.124|
00003c  6008              STR      r0,[r1,#0]  ; g_iRunTime
;;;108    	if (g_iRunTime == 0x7FFFFFFF)	/* 这个变量是 int32_t 类型，最大数为 0x7FFFFFFF */
00003e  4608              MOV      r0,r1
000040  6800              LDR      r0,[r0,#0]  ; g_iRunTime
000042  f06f4100          MVN      r1,#0x80000000
000046  4288              CMP      r0,r1
000048  d102              BNE      |L2.80|
;;;109    	{
;;;110    		g_iRunTime = 0;
00004a  2000              MOVS     r0,#0
00004c  490b              LDR      r1,|L2.124|
00004e  6008              STR      r0,[r1,#0]  ; g_iRunTime
                  |L2.80|
;;;111    	}
;;;112    
;;;113    	bsp_RunPer1ms();		/* 每隔1ms调用一次此函数，此函数在 bsp.c */
000050  f7fffffe          BL       bsp_RunPer1ms
;;;114    
;;;115    	if (++s_count >= 10)
000054  480a              LDR      r0,|L2.128|
000056  7800              LDRB     r0,[r0,#0]  ; s_count
000058  1c40              ADDS     r0,r0,#1
00005a  b2c0              UXTB     r0,r0
00005c  4908              LDR      r1,|L2.128|
00005e  7008              STRB     r0,[r1,#0]
000060  280a              CMP      r0,#0xa
000062  db03              BLT      |L2.108|
;;;116    	{
;;;117    		s_count = 0;
000064  2000              MOVS     r0,#0
000066  7008              STRB     r0,[r1,#0]
;;;118    
;;;119    		bsp_RunPer10ms();	/* 每隔10ms调用一次此函数，此函数在 bsp.c */
000068  f7fffffe          BL       bsp_RunPer10ms
                  |L2.108|
;;;120    	}
;;;121    }
00006c  bd10              POP      {r4,pc}
;;;122    
                          ENDP

00006e  0000              DCW      0x0000
                  |L2.112|
                          DCD      s_uiDelayCount
                  |L2.116|
                          DCD      s_ucTimeOutFlag
                  |L2.120|
                          DCD      s_tTmr
                  |L2.124|
                          DCD      g_iRunTime
                  |L2.128|
                          DCD      s_count

                          AREA ||i.__set_PRIMASK||, CODE, READONLY, ALIGN=1

                  __set_PRIMASK PROC
;;;193     */
;;;194    __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
000000  f3808810          MSR      PRIMASK,r0
;;;195    {
;;;196      register uint32_t __regPriMask         __ASM("primask");
;;;197      __regPriMask = (priMask);
;;;198    }
000004  4770              BX       lr
;;;199    
                          ENDP


                          AREA ||i.bsp_CheckTimer||, CODE, READONLY, ALIGN=2

                  bsp_CheckTimer PROC
;;;329    */
;;;330    uint8_t bsp_CheckTimer(uint8_t _id)
000000  4601              MOV      r1,r0
;;;331    {
;;;332    	if (_id >= TMR_COUNT)
000002  2904              CMP      r1,#4
000004  db01              BLT      |L4.10|
;;;333    	{
;;;334    		return 0;
000006  2000              MOVS     r0,#0
                  |L4.8|
;;;335    	}
;;;336    
;;;337    	if (s_tTmr[_id].Flag == 1)
;;;338    	{
;;;339    		s_tTmr[_id].Flag = 0;
;;;340    		return 1;
;;;341    	}
;;;342    	else
;;;343    	{
;;;344    		return 0;
;;;345    	}
;;;346    }
000008  4770              BX       lr
                  |L4.10|
00000a  eb010041          ADD      r0,r1,r1,LSL #1       ;337
00000e  4a08              LDR      r2,|L4.48|
000010  eb020080          ADD      r0,r2,r0,LSL #2       ;337
000014  7840              LDRB     r0,[r0,#1]            ;337
000016  2801              CMP      r0,#1                 ;337
000018  d108              BNE      |L4.44|
00001a  2000              MOVS     r0,#0                 ;339
00001c  eb010241          ADD      r2,r1,r1,LSL #1       ;339
000020  4b03              LDR      r3,|L4.48|
000022  eb030282          ADD      r2,r3,r2,LSL #2       ;339
000026  7050              STRB     r0,[r2,#1]            ;339
000028  2001              MOVS     r0,#1                 ;340
00002a  e7ed              B        |L4.8|
                  |L4.44|
00002c  2000              MOVS     r0,#0                 ;344
00002e  e7eb              B        |L4.8|
;;;347    
                          ENDP

                  |L4.48|
                          DCD      s_tTmr

                          AREA ||i.bsp_DelayMS||, CODE, READONLY, ALIGN=2

                  bsp_DelayMS PROC
;;;156    */
;;;157    void bsp_DelayMS(uint32_t n)
000000  b510              PUSH     {r4,lr}
;;;158    {
000002  4604              MOV      r4,r0
;;;159    	if (n == 0)
000004  b904              CBNZ     r4,|L5.8|
                  |L5.6|
;;;160    	{
;;;161    		return;
;;;162    	}
;;;163    	else if (n == 1)
;;;164    	{
;;;165    		n = 2;
;;;166    	}
;;;167    
;;;168    	DISABLE_INT();  			/* 关中断 */
;;;169    
;;;170    	s_uiDelayCount = n;
;;;171    	s_ucTimeOutFlag = 0;
;;;172    
;;;173    	ENABLE_INT();  				/* 开中断 */
;;;174    
;;;175    	while (1)
;;;176    	{
;;;177    		bsp_Idle();				/* CPU空闲执行的操作， 见 bsp.c 和 bsp.h 文件 */
;;;178    
;;;179    		/*
;;;180    			等待延迟时间到
;;;181    			注意：编译器认为 s_ucTimeOutFlag = 0，所以可能优化错误，因此 s_ucTimeOutFlag 变量必须申明为 volatile
;;;182    		*/
;;;183    		if (s_ucTimeOutFlag == 1)
;;;184    		{
;;;185    			break;
;;;186    		}
;;;187    	}
;;;188    }
000006  bd10              POP      {r4,pc}
                  |L5.8|
000008  2c01              CMP      r4,#1                 ;163
00000a  d100              BNE      |L5.14|
00000c  2402              MOVS     r4,#2                 ;165
                  |L5.14|
00000e  2001              MOVS     r0,#1                 ;168
000010  f7fffffe          BL       __set_PRIMASK
000014  4809              LDR      r0,|L5.60|
000016  6004              STR      r4,[r0,#0]            ;170  ; s_uiDelayCount
000018  2000              MOVS     r0,#0                 ;171
00001a  4909              LDR      r1,|L5.64|
00001c  7008              STRB     r0,[r1,#0]            ;171
00001e  f7fffffe          BL       __set_PRIMASK
000022  e006              B        |L5.50|
                  |L5.36|
000024  f7fffffe          BL       bsp_Idle
000028  4805              LDR      r0,|L5.64|
00002a  7800              LDRB     r0,[r0,#0]            ;183  ; s_ucTimeOutFlag
00002c  2801              CMP      r0,#1                 ;183
00002e  d100              BNE      |L5.50|
000030  e000              B        |L5.52|
                  |L5.50|
000032  e7f7              B        |L5.36|
                  |L5.52|
000034  bf00              NOP                            ;185
000036  bf00              NOP      
000038  e7e5              B        |L5.6|
;;;189    
                          ENDP

00003a  0000              DCW      0x0000
                  |L5.60|
                          DCD      s_uiDelayCount
                  |L5.64|
                          DCD      s_ucTimeOutFlag

                          AREA ||i.bsp_DelayUS||, CODE, READONLY, ALIGN=2

                  bsp_DelayUS PROC
;;;197    */
;;;198    void bsp_DelayUS(uint32_t n)
000000  b5f0              PUSH     {r4-r7,lr}
;;;199    {
000002  4603              MOV      r3,r0
;;;200        uint32_t ticks;
;;;201        uint32_t told;
;;;202        uint32_t tnow;
;;;203        uint32_t tcnt = 0;
000004  2200              MOVS     r2,#0
;;;204        uint32_t reload;
;;;205           
;;;206    	reload = SysTick->LOAD;                
000006  f04f26e0          MOV      r6,#0xe000e000
00000a  6975              LDR      r5,[r6,#0x14]
;;;207        ticks = n * (SystemCoreClock / 1000000);	 /* 需要的节拍数 */  
00000c  4e0f              LDR      r6,|L6.76|
00000e  6836              LDR      r6,[r6,#0]  ; SystemCoreClock
000010  4f0f              LDR      r7,|L6.80|
000012  fbb6f6f7          UDIV     r6,r6,r7
000016  fb06f403          MUL      r4,r6,r3
;;;208        
;;;209        tcnt = 0;
00001a  bf00              NOP      
;;;210        told = SysTick->VAL;             /* 刚进入时的计数器值 */
00001c  f04f26e0          MOV      r6,#0xe000e000
000020  69b1              LDR      r1,[r6,#0x18]
;;;211    
;;;212        while (1)
000022  e010              B        |L6.70|
                  |L6.36|
;;;213        {
;;;214            tnow = SysTick->VAL;    
000024  f04f26e0          MOV      r6,#0xe000e000
000028  69b0              LDR      r0,[r6,#0x18]
;;;215            if (tnow != told)
00002a  4288              CMP      r0,r1
00002c  d00b              BEQ      |L6.70|
;;;216            {    
;;;217                /* SYSTICK是一个递减的计数器 */    
;;;218                if (tnow < told)
00002e  4288              CMP      r0,r1
000030  d202              BCS      |L6.56|
;;;219                {
;;;220                    tcnt += told - tnow;    
000032  1a0e              SUBS     r6,r1,r0
000034  4432              ADD      r2,r2,r6
000036  e002              B        |L6.62|
                  |L6.56|
;;;221                }
;;;222                /* 重新装载递减 */
;;;223                else
;;;224                {
;;;225                    tcnt += reload - tnow + told;    
000038  1a2e              SUBS     r6,r5,r0
00003a  440e              ADD      r6,r6,r1
00003c  4432              ADD      r2,r2,r6
                  |L6.62|
;;;226                }        
;;;227                told = tnow;
00003e  4601              MOV      r1,r0
;;;228    
;;;229                /* 时间超过/等于要延迟的时间,则退出 */
;;;230                if (tcnt >= ticks)
000040  42a2              CMP      r2,r4
000042  d300              BCC      |L6.70|
;;;231                {
;;;232                	break;
000044  e000              B        |L6.72|
                  |L6.70|
000046  e7ed              B        |L6.36|
                  |L6.72|
000048  bf00              NOP      
;;;233                }
;;;234            }  
;;;235        }
;;;236    } 
00004a  bdf0              POP      {r4-r7,pc}
;;;237    
                          ENDP

                  |L6.76|
                          DCD      SystemCoreClock
                  |L6.80|
                          DCD      0x000f4240

                          AREA ||i.bsp_GetRunTime||, CODE, READONLY, ALIGN=2

                  bsp_GetRunTime PROC
;;;355    */
;;;356    int32_t bsp_GetRunTime(void)
000000  b510              PUSH     {r4,lr}
;;;357    {
;;;358    	int32_t runtime;
;;;359    
;;;360    	DISABLE_INT();  	/* 关中断 */
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       __set_PRIMASK
;;;361    
;;;362    	runtime = g_iRunTime;	/* 这个变量在Systick中断中被改写，因此需要关中断进行保护 */
000008  4803              LDR      r0,|L7.24|
00000a  6804              LDR      r4,[r0,#0]  ; g_iRunTime
;;;363    
;;;364    	ENABLE_INT();  		/* 开中断 */
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       __set_PRIMASK
;;;365    
;;;366    	return runtime;
000012  4620              MOV      r0,r4
;;;367    }
000014  bd10              POP      {r4,pc}
;;;368    
                          ENDP

000016  0000              DCW      0x0000
                  |L7.24|
                          DCD      g_iRunTime

                          AREA ||i.bsp_InitTimer||, CODE, READONLY, ALIGN=2

                  bsp_InitTimer PROC
;;;47     */
;;;48     void bsp_InitTimer(void)
000000  b570              PUSH     {r4-r6,lr}
;;;49     {
;;;50     	uint8_t i;
;;;51     
;;;52     	/* 清零所有的软件定时器 */
;;;53     	for (i = 0; i < TMR_COUNT; i++)
000002  2000              MOVS     r0,#0
000004  e016              B        |L8.52|
                  |L8.6|
;;;54     	{
;;;55     		s_tTmr[i].Count = 0;
000006  2100              MOVS     r1,#0
000008  eb000240          ADD      r2,r0,r0,LSL #1
00000c  4b1e              LDR      r3,|L8.136|
00000e  eb030282          ADD      r2,r3,r2,LSL #2
000012  6051              STR      r1,[r2,#4]
;;;56     		s_tTmr[i].PreLoad = 0;
000014  eb000240          ADD      r2,r0,r0,LSL #1
000018  eb030282          ADD      r2,r3,r2,LSL #2
00001c  6091              STR      r1,[r2,#8]
;;;57     		s_tTmr[i].Flag = 0;
00001e  eb000240          ADD      r2,r0,r0,LSL #1
000022  eb030282          ADD      r2,r3,r2,LSL #2
000026  7051              STRB     r1,[r2,#1]
;;;58     		s_tTmr[i].Mode = TMR_ONCE_MODE;	/* 缺省是1次性工作模式 */
000028  eb000240          ADD      r2,r0,r0,LSL #1
00002c  f8031022          STRB     r1,[r3,r2,LSL #2]
000030  1c41              ADDS     r1,r0,#1              ;53
000032  b2c8              UXTB     r0,r1                 ;53
                  |L8.52|
000034  2804              CMP      r0,#4                 ;53
000036  dbe6              BLT      |L8.6|
;;;59     	}
;;;60     
;;;61     	/*
;;;62     		配置systic中断周期为1ms，并启动systick中断。
;;;63     
;;;64         	SystemCoreClock 是固件中定义的系统内核时钟，对于STM32F4XX,一般为 168MHz
;;;65     
;;;66         	SysTick_Config() 函数的形参表示内核时钟多少个周期后触发一次Systick定时中断.
;;;67     	    	-- SystemCoreClock / 1000  表示定时频率为 1000Hz， 也就是定时周期为  1ms
;;;68     	    	-- SystemCoreClock / 500   表示定时频率为 500Hz，  也就是定时周期为  2ms
;;;69     	    	-- SystemCoreClock / 2000  表示定时频率为 2000Hz， 也就是定时周期为  500us
;;;70     
;;;71         	对于常规的应用，我们一般取定时周期1ms。对于低速CPU或者低功耗应用，可以设置定时周期为 10ms
;;;72         */
;;;73     	SysTick_Config(SystemCoreClock / 1000);
000038  4914              LDR      r1,|L8.140|
00003a  6809              LDR      r1,[r1,#0]  ; SystemCoreClock
00003c  f44f737a          MOV      r3,#0x3e8
000040  fbb1f2f3          UDIV     r2,r1,r3
000044  1e51              SUBS     r1,r2,#1
000046  f1b17f80          CMP      r1,#0x1000000
00004a  d300              BCC      |L8.78|
00004c  e01b              B        |L8.134|
                  |L8.78|
00004e  1e51              SUBS     r1,r2,#1
000050  f04f23e0          MOV      r3,#0xe000e000
000054  6159              STR      r1,[r3,#0x14]
000056  1759              ASRS     r1,r3,#29
000058  230f              MOVS     r3,#0xf
00005a  2900              CMP      r1,#0
00005c  da07              BGE      |L8.110|
00005e  071c              LSLS     r4,r3,#28
000060  0e26              LSRS     r6,r4,#24
000062  4c0b              LDR      r4,|L8.144|
000064  f001050f          AND      r5,r1,#0xf
000068  1f2d              SUBS     r5,r5,#4
00006a  5566              STRB     r6,[r4,r5]
00006c  e003              B        |L8.118|
                  |L8.110|
00006e  071c              LSLS     r4,r3,#28
000070  0e25              LSRS     r5,r4,#24
000072  4c08              LDR      r4,|L8.148|
000074  5465              STRB     r5,[r4,r1]
                  |L8.118|
000076  bf00              NOP      
000078  2100              MOVS     r1,#0
00007a  f04f23e0          MOV      r3,#0xe000e000
00007e  6199              STR      r1,[r3,#0x18]
000080  2107              MOVS     r1,#7
000082  6119              STR      r1,[r3,#0x10]
000084  bf00              NOP      
                  |L8.134|
;;;74     }
000086  bd70              POP      {r4-r6,pc}
;;;75     
                          ENDP

                  |L8.136|
                          DCD      s_tTmr
                  |L8.140|
                          DCD      SystemCoreClock
                  |L8.144|
                          DCD      0xe000ed18
                  |L8.148|
                          DCD      0xe000e400

                          AREA ||i.bsp_SoftTimerDec||, CODE, READONLY, ALIGN=1

                  bsp_SoftTimerDec PROC
;;;130    */
;;;131    static void bsp_SoftTimerDec(SOFT_TMR *_tmr)
000000  6841              LDR      r1,[r0,#4]
;;;132    {
;;;133    	if (_tmr->Count > 0)
000002  b151              CBZ      r1,|L9.26|
;;;134    	{
;;;135    		/* 如果定时器变量减到1则设置定时器到达标志 */
;;;136    		if (--_tmr->Count == 0)
000004  6841              LDR      r1,[r0,#4]
000006  1e49              SUBS     r1,r1,#1
000008  6041              STR      r1,[r0,#4]
00000a  b931              CBNZ     r1,|L9.26|
;;;137    		{
;;;138    			_tmr->Flag = 1;
00000c  2101              MOVS     r1,#1
00000e  7041              STRB     r1,[r0,#1]
;;;139    
;;;140    			/* 如果是自动模式，则自动重装计数器 */
;;;141    			if(_tmr->Mode == TMR_AUTO_MODE)
000010  7801              LDRB     r1,[r0,#0]
000012  2901              CMP      r1,#1
000014  d101              BNE      |L9.26|
;;;142    			{
;;;143    				_tmr->Count = _tmr->PreLoad;
000016  6881              LDR      r1,[r0,#8]
000018  6041              STR      r1,[r0,#4]
                  |L9.26|
;;;144    			}
;;;145    		}
;;;146    	}
;;;147    }
00001a  4770              BX       lr
;;;148    
                          ENDP


                          AREA ||i.bsp_StartAutoTimer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  bsp_StartAutoTimer PROC
;;;275    */
;;;276    void bsp_StartAutoTimer(uint8_t _id, uint32_t _period)
000000  b570              PUSH     {r4-r6,lr}
;;;277    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;278    	if (_id >= TMR_COUNT)
000006  2c04              CMP      r4,#4
000008  db06              BLT      |L10.24|
;;;279    	{
;;;280    		/* 打印出错的源代码文件名、函数名称 */
;;;281    		BSP_Printf("Error: file %s, function %s()\r\n", __FILE__, __FUNCTION__);
00000a  4a12              LDR      r2,|L10.84|
00000c  a112              ADR      r1,|L10.88|
00000e  a01d              ADR      r0,|L10.132|
000010  f7fffffe          BL       __2printf
;;;282    		while(1); /* 参数异常，死机等待看门狗复位 */
000014  bf00              NOP      
                  |L10.22|
000016  e7fe              B        |L10.22|
                  |L10.24|
;;;283    	}
;;;284    
;;;285    	DISABLE_INT();  		/* 关中断 */
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       __set_PRIMASK
;;;286    
;;;287    	s_tTmr[_id].Count = _period;			/* 实时计数器初值 */
00001e  eb040044          ADD      r0,r4,r4,LSL #1
000022  4920              LDR      r1,|L10.164|
000024  eb010080          ADD      r0,r1,r0,LSL #2
000028  6045              STR      r5,[r0,#4]
;;;288    	s_tTmr[_id].PreLoad = _period;		/* 计数器自动重装值，仅自动模式起作用 */
00002a  eb040044          ADD      r0,r4,r4,LSL #1
00002e  eb010080          ADD      r0,r1,r0,LSL #2
000032  6085              STR      r5,[r0,#8]
;;;289    	s_tTmr[_id].Flag = 0;				/* 定时时间到标志 */
000034  2000              MOVS     r0,#0
000036  eb040144          ADD      r1,r4,r4,LSL #1
00003a  4a1a              LDR      r2,|L10.164|
00003c  eb020181          ADD      r1,r2,r1,LSL #2
000040  7048              STRB     r0,[r1,#1]
;;;290    	s_tTmr[_id].Mode = TMR_AUTO_MODE;	/* 自动工作模式 */
000042  2001              MOVS     r0,#1
000044  eb040144          ADD      r1,r4,r4,LSL #1
000048  f8020021          STRB     r0,[r2,r1,LSL #2]
;;;291    
;;;292    	ENABLE_INT();  			/* 开中断 */
00004c  2000              MOVS     r0,#0
00004e  f7fffffe          BL       __set_PRIMASK
;;;293    }
000052  bd70              POP      {r4-r6,pc}
;;;294    
                          ENDP

                  |L10.84|
                          DCD      |symbol_number.41|
                  |L10.88|
000058  2e2e5c2e          DCB      "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_timer.c",0
00005c  2e5c5573
000060  65725c62
000064  73705f73
000068  746d3332
00006c  66347878
000070  5c737263
000074  5c627370
000078  5f74696d
00007c  65722e63
000080  00      
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0
                  |L10.132|
000084  4572726f          DCB      "Error: file %s, function %s()\r\n",0
000088  723a2066
00008c  696c6520
000090  25732c20
000094  66756e63
000098  74696f6e
00009c  20257328
0000a0  290d0a00
                  |L10.164|
                          DCD      s_tTmr

                          AREA ||i.bsp_StartTimer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  bsp_StartTimer PROC
;;;247    */
;;;248    void bsp_StartTimer(uint8_t _id, uint32_t _period)
000000  b570              PUSH     {r4-r6,lr}
;;;249    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;250    	if (_id >= TMR_COUNT)
000006  2c04              CMP      r4,#4
000008  db06              BLT      |L11.24|
;;;251    	{
;;;252    		/* 打印出错的源代码文件名、函数名称 */
;;;253    		BSP_Printf("Error: file %s, function %s()\r\n", __FILE__, __FUNCTION__);
00000a  4a11              LDR      r2,|L11.80|
00000c  a111              ADR      r1,|L11.84|
00000e  a01c              ADR      r0,|L11.128|
000010  f7fffffe          BL       __2printf
;;;254    		while(1); /* 参数异常，死机等待看门狗复位 */
000014  bf00              NOP      
                  |L11.22|
000016  e7fe              B        |L11.22|
                  |L11.24|
;;;255    	}
;;;256    
;;;257    	DISABLE_INT();  			/* 关中断 */
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       __set_PRIMASK
;;;258    
;;;259    	s_tTmr[_id].Count = _period;		/* 实时计数器初值 */
00001e  eb040044          ADD      r0,r4,r4,LSL #1
000022  491f              LDR      r1,|L11.160|
000024  eb010080          ADD      r0,r1,r0,LSL #2
000028  6045              STR      r5,[r0,#4]
;;;260    	s_tTmr[_id].PreLoad = _period;		/* 计数器自动重装值，仅自动模式起作用 */
00002a  eb040044          ADD      r0,r4,r4,LSL #1
00002e  eb010080          ADD      r0,r1,r0,LSL #2
000032  6085              STR      r5,[r0,#8]
;;;261    	s_tTmr[_id].Flag = 0;				/* 定时时间到标志 */
000034  2000              MOVS     r0,#0
000036  eb040144          ADD      r1,r4,r4,LSL #1
00003a  4a19              LDR      r2,|L11.160|
00003c  eb020181          ADD      r1,r2,r1,LSL #2
000040  7048              STRB     r0,[r1,#1]
;;;262    	s_tTmr[_id].Mode = TMR_ONCE_MODE;	/* 1次性工作模式 */
000042  eb040144          ADD      r1,r4,r4,LSL #1
000046  f8020021          STRB     r0,[r2,r1,LSL #2]
;;;263    
;;;264    	ENABLE_INT();  				/* 开中断 */
00004a  f7fffffe          BL       __set_PRIMASK
;;;265    }
00004e  bd70              POP      {r4-r6,pc}
;;;266    
                          ENDP

                  |L11.80|
                          DCD      __FUNCTION__
                  |L11.84|
000054  2e2e5c2e          DCB      "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_timer.c",0
000058  2e5c5573
00005c  65725c62
000060  73705f73
000064  746d3332
000068  66347878
00006c  5c737263
000070  5c627370
000074  5f74696d
000078  65722e63
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0
                  |L11.128|
000080  4572726f          DCB      "Error: file %s, function %s()\r\n",0
000084  723a2066
000088  696c6520
00008c  25732c20
000090  66756e63
000094  74696f6e
000098  20257328
00009c  290d0a00
                  |L11.160|
                          DCD      s_tTmr

                          AREA ||i.bsp_StopTimer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  bsp_StopTimer PROC
;;;302    */
;;;303    void bsp_StopTimer(uint8_t _id)
000000  b510              PUSH     {r4,lr}
;;;304    {
000002  4604              MOV      r4,r0
;;;305    	if (_id >= TMR_COUNT)
000004  2c04              CMP      r4,#4
000006  db06              BLT      |L12.22|
;;;306    	{
;;;307    		/* 打印出错的源代码文件名、函数名称 */
;;;308    		BSP_Printf("Error: file %s, function %s()\r\n", __FILE__, __FUNCTION__);
000008  4a0e              LDR      r2,|L12.68|
00000a  a10f              ADR      r1,|L12.72|
00000c  a019              ADR      r0,|L12.116|
00000e  f7fffffe          BL       __2printf
;;;309    		while(1); /* 参数异常，死机等待看门狗复位 */
000012  bf00              NOP      
                  |L12.20|
000014  e7fe              B        |L12.20|
                  |L12.22|
;;;310    	}
;;;311    
;;;312    	DISABLE_INT();  	/* 关中断 */
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       __set_PRIMASK
;;;313    
;;;314    	s_tTmr[_id].Count = 0;				/* 实时计数器初值 */
00001c  2000              MOVS     r0,#0
00001e  eb040144          ADD      r1,r4,r4,LSL #1
000022  4a1c              LDR      r2,|L12.148|
000024  eb020181          ADD      r1,r2,r1,LSL #2
000028  6048              STR      r0,[r1,#4]
;;;315    	s_tTmr[_id].Flag = 0;				/* 定时时间到标志 */
00002a  eb040144          ADD      r1,r4,r4,LSL #1
00002e  eb020181          ADD      r1,r2,r1,LSL #2
000032  7048              STRB     r0,[r1,#1]
;;;316    	s_tTmr[_id].Mode = TMR_ONCE_MODE;	/* 自动工作模式 */
000034  eb040144          ADD      r1,r4,r4,LSL #1
000038  f8020021          STRB     r0,[r2,r1,LSL #2]
;;;317    
;;;318    	ENABLE_INT();  		/* 开中断 */
00003c  f7fffffe          BL       __set_PRIMASK
;;;319    }
000040  bd10              POP      {r4,pc}
;;;320    
                          ENDP

000042  0000              DCW      0x0000
                  |L12.68|
                          DCD      |symbol_number.42|
                  |L12.72|
000048  2e2e5c2e          DCB      "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_timer.c",0
00004c  2e5c5573
000050  65725c62
000054  73705f73
000058  746d3332
00005c  66347878
000060  5c737263
000064  5c627370
000068  5f74696d
00006c  65722e63
000070  00      
000071  00                DCB      0
000072  00                DCB      0
000073  00                DCB      0
                  |L12.116|
000074  4572726f          DCB      "Error: file %s, function %s()\r\n",0
000078  723a2066
00007c  696c6520
000080  25732c20
000084  66756e63
000088  74696f6e
00008c  20257328
000090  290d0a00
                  |L12.148|
                          DCD      s_tTmr

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  s_tTmr
                          %        48

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  6273705f          DCB      0x62,0x73,0x70,0x5f
000004  53746172          DCB      0x53,0x74,0x61,0x72
000008  7454696d          DCB      0x74,0x54,0x69,0x6d
00000c  657200            DCB      0x65,0x72,0x00
                  |symbol_number.41|
00000f  62                DCB      0x62
000010  73705f53          DCB      0x73,0x70,0x5f,0x53
000014  74617274          DCB      0x74,0x61,0x72,0x74
000018  4175746f          DCB      0x41,0x75,0x74,0x6f
00001c  54696d65          DCB      0x54,0x69,0x6d,0x65
000020  7200              DCB      0x72,0x00
                  |symbol_number.42|
000022  6273              DCB      0x62,0x73
000024  705f5374          DCB      0x70,0x5f,0x53,0x74
000028  6f705469          DCB      0x6f,0x70,0x54,0x69
00002c  6d657200          DCB      0x6d,0x65,0x72,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  s_uiDelayCount
                          DCD      0x00000000
                  s_ucTimeOutFlag
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  g_iRunTime
                          DCD      0x00000000
                  s_count
00000c  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_timer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_timer_c_95bb07ef____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_bsp_timer_c_95bb07ef____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_timer_c_95bb07ef____REVSH|
#line 144
|__asm___11_bsp_timer_c_95bb07ef____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
