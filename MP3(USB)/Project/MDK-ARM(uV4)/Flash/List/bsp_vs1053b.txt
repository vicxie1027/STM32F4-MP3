; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_vs1053b.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_vs1053b.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc -I..\..\Libraries\STM32_USB_HOST_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbh_mass_storage -I..\..\User\bsp_stm32f4xx\inc -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_HS -DUSE_EMBEDDED_PHY --omf_browse=.\flash\obj\bsp_vs1053b.crf ..\..\User\bsp_stm32f4xx\src\bsp_vs1053b.c]
                          THUMB

                          AREA ||i.LoadUserPatch||, CODE, READONLY, ALIGN=2

                  LoadUserPatch PROC
;;;412    
;;;413    void LoadUserPatch(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;414    {
;;;415    	int i = 0;
000004  2400              MOVS     r4,#0
;;;416    
;;;417    	while (i < sizeof(plugin) / sizeof(plugin[0]))
000006  e02c              B        |L1.98|
                  |L1.8|
;;;418    	{
;;;419    		unsigned short addr, n, val;
;;;420    
;;;421    		addr = plugin[i++];
000008  4620              MOV      r0,r4
00000a  1c64              ADDS     r4,r4,#1
00000c  491a              LDR      r1,|L1.120|
00000e  f8317010          LDRH     r7,[r1,r0,LSL #1]
;;;422    		n = plugin[i++];
000012  4620              MOV      r0,r4
000014  1c64              ADDS     r4,r4,#1
000016  f8315010          LDRH     r5,[r1,r0,LSL #1]
;;;423    		if (n & 0x8000U)
00001a  f4054000          AND      r0,r5,#0x8000
00001e  b180              CBZ      r0,|L1.66|
;;;424    		{
;;;425    			/* RLE run, replicate n samples */
;;;426    			n &= 0x7FFF;
000020  f3c5050e          UBFX     r5,r5,#0,#15
;;;427    			val = plugin[i++];
000024  4620              MOV      r0,r4
000026  1c64              ADDS     r4,r4,#1
000028  f8316010          LDRH     r6,[r1,r0,LSL #1]
;;;428    			while (n--)
00002c  e003              B        |L1.54|
                  |L1.46|
;;;429    			{
;;;430    				vs1053_WriteCmd(addr, val);
00002e  b2f8              UXTB     r0,r7
000030  4631              MOV      r1,r6
000032  f7fffffe          BL       vs1053_WriteCmd
                  |L1.54|
000036  0028              MOVS     r0,r5                 ;428
000038  f1a50101          SUB      r1,r5,#1              ;428
00003c  b28d              UXTH     r5,r1                 ;428
00003e  d1f6              BNE      |L1.46|
000040  e00e              B        |L1.96|
                  |L1.66|
;;;431    			}
;;;432    		}
;;;433    		else
;;;434    		{
;;;435    			/* Copy run, copy n samples */
;;;436    			while (n--)
000042  e008              B        |L1.86|
                  |L1.68|
;;;437    			{
;;;438    				val = plugin[i++];
000044  4620              MOV      r0,r4
000046  1c64              ADDS     r4,r4,#1
000048  490b              LDR      r1,|L1.120|
00004a  f8316010          LDRH     r6,[r1,r0,LSL #1]
;;;439    				vs1053_WriteCmd(addr, val);
00004e  b2f8              UXTB     r0,r7
000050  4631              MOV      r1,r6
000052  f7fffffe          BL       vs1053_WriteCmd
                  |L1.86|
000056  0028              MOVS     r0,r5                 ;436
000058  f1a50101          SUB      r1,r5,#1              ;436
00005c  b28d              UXTH     r5,r1                 ;436
00005e  d1f1              BNE      |L1.68|
                  |L1.96|
;;;440    			}
;;;441    		}
;;;442    	}
000060  bf00              NOP      
                  |L1.98|
000062  f5b47f17          CMP      r4,#0x25c             ;417
000066  d9cf              BLS      |L1.8|
;;;443    	/* 等待芯片内部操作完成 */
;;;444    	if (vs1053_WaitTimeOut())
000068  f7fffffe          BL       vs1053_WaitTimeOut
00006c  b108              CBZ      r0,|L1.114|
                  |L1.110|
;;;445    	{
;;;446    		return;
;;;447    	}
;;;448    }
00006e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.114|
000072  bf00              NOP      
000074  e7fb              B        |L1.110|
;;;449    
                          ENDP

000076  0000              DCW      0x0000
                  |L1.120|
                          DCD      plugin

                          AREA ||i.ResetDecodeTime||, CODE, READONLY, ALIGN=1

                  ResetDecodeTime PROC
;;;740    */
;;;741    void ResetDecodeTime(void)
000000  b510              PUSH     {r4,lr}
;;;742    {
;;;743    	vs1053_WriteCmd(SCI_DECODE_TIME, 0x0000);
000002  2100              MOVS     r1,#0
000004  2004              MOVS     r0,#4
000006  f7fffffe          BL       vs1053_WriteCmd
;;;744    }
00000a  bd10              POP      {r4,pc}
;;;745    
                          ENDP


                          AREA ||i.bsp_CfgSPIForVS1053B||, CODE, READONLY, ALIGN=2

                  bsp_CfgSPIForVS1053B PROC
;;;185    */
;;;186    void bsp_CfgSPIForVS1053B(void)
000000  b500              PUSH     {lr}
;;;187    {
000002  b085              SUB      sp,sp,#0x14
;;;188    	SPI_InitTypeDef  SPI_InitStructure;
;;;189    
;;;190    	/* 打开SPI时钟 */
;;;191    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
000004  2101              MOVS     r1,#1
000006  0308              LSLS     r0,r1,#12
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;192    
;;;193    	/* SPI1 配置 */
;;;194    	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;	/* 选择2线全双工模式 */
00000c  2000              MOVS     r0,#0
00000e  f8ad0000          STRH     r0,[sp,#0]
;;;195    	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;		/* CPU的SPI作为主设备 */
000012  f44f7082          MOV      r0,#0x104
000016  f8ad0002          STRH     r0,[sp,#2]
;;;196    	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;	/* 8个数据 */
00001a  2000              MOVS     r0,#0
00001c  f8ad0004          STRH     r0,[sp,#4]
;;;197    	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;			/* CLK引脚空闲状态电平 = 0 */
000020  f8ad0006          STRH     r0,[sp,#6]
;;;198    	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;		/* 数据采样在第1个边沿(上升沿) */
000024  f8ad0008          STRH     r0,[sp,#8]
;;;199    	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;  			/* 软件控制片选 */
000028  f44f7000          MOV      r0,#0x200
00002c  f8ad000a          STRH     r0,[sp,#0xa]
;;;200    
;;;201    	/*
;;;202    		由于SPI1的时钟源是84M, SPI3的时钟源是42M。为了获得更快的速度，软件上选择SPI1。
;;;203    		pdf page=23 vs1053B SPI输入时钟 4个CLKI cycles； CLKI = 12.288M
;;;204    		因此最大SPI时钟 = 12.288 / 4 = 3.072MHz
;;;205    		需要 32分频
;;;206    	*/
;;;207    	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_64;
000030  2028              MOVS     r0,#0x28
000032  f8ad000c          STRH     r0,[sp,#0xc]
;;;208    
;;;209    	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;	/* 最高位先传输 */
000036  2000              MOVS     r0,#0
000038  f8ad000e          STRH     r0,[sp,#0xe]
;;;210    	SPI_InitStructure.SPI_CRCPolynomial = 7;
00003c  2007              MOVS     r0,#7
00003e  f8ad0010          STRH     r0,[sp,#0x10]
;;;211    	SPI_Init(SPI1,&SPI_InitStructure);
000042  4669              MOV      r1,sp
000044  4806              LDR      r0,|L3.96|
000046  f7fffffe          BL       SPI_Init
;;;212    
;;;213    	SPI_Cmd(SPI1, DISABLE);			/* 先禁止SPI  */
00004a  2100              MOVS     r1,#0
00004c  4804              LDR      r0,|L3.96|
00004e  f7fffffe          BL       SPI_Cmd
;;;214    
;;;215    	SPI_Cmd(SPI1, ENABLE);			/* 使能SPI  */
000052  2101              MOVS     r1,#1
000054  4802              LDR      r0,|L3.96|
000056  f7fffffe          BL       SPI_Cmd
;;;216    }
00005a  b005              ADD      sp,sp,#0x14
00005c  bd00              POP      {pc}
;;;217    
                          ENDP

00005e  0000              DCW      0x0000
                  |L3.96|
                          DCD      0x40013000

                          AREA ||i.vs1053_Init||, CODE, READONLY, ALIGN=2

                  vs1053_Init PROC
;;;129    */
;;;130    void vs1053_Init(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;131    {
;;;132    	GPIO_InitTypeDef GPIO_InitStructure;
;;;133    
;;;134    	/* 打开相关模块的时钟 */
;;;135    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC, ENABLE);
000002  2101              MOVS     r1,#1
000004  2007              MOVS     r0,#7
000006  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;136    
;;;137    	/* 配置 SCK, MISO 、 MOSI 为复用功能 */
;;;138    	GPIO_PinAFConfig(GPIOB, GPIO_PinSource3, GPIO_AF_SPI1);
00000a  2205              MOVS     r2,#5
00000c  2103              MOVS     r1,#3
00000e  4829              LDR      r0,|L4.180|
000010  f7fffffe          BL       GPIO_PinAFConfig
;;;139    	GPIO_PinAFConfig(GPIOB, GPIO_PinSource4, GPIO_AF_SPI1);
000014  2205              MOVS     r2,#5
000016  2104              MOVS     r1,#4
000018  4826              LDR      r0,|L4.180|
00001a  f7fffffe          BL       GPIO_PinAFConfig
;;;140    	GPIO_PinAFConfig(GPIOB, GPIO_PinSource5, GPIO_AF_SPI1);
00001e  2205              MOVS     r2,#5
000020  4611              MOV      r1,r2
000022  4824              LDR      r0,|L4.180|
000024  f7fffffe          BL       GPIO_PinAFConfig
;;;141    
;;;142    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000028  2002              MOVS     r0,#2
00002a  f88d0004          STRB     r0,[sp,#4]
;;;143    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00002e  f88d0005          STRB     r0,[sp,#5]
;;;144    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000032  2000              MOVS     r0,#0
000034  f88d0006          STRB     r0,[sp,#6]
;;;145    	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
000038  2002              MOVS     r0,#2
00003a  f88d0007          STRB     r0,[sp,#7]
;;;146    
;;;147    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5;
00003e  2038              MOVS     r0,#0x38
000040  9000              STR      r0,[sp,#0]
;;;148    	GPIO_Init(GPIOB, &GPIO_InitStructure);
000042  4669              MOV      r1,sp
000044  481b              LDR      r0,|L4.180|
000046  f7fffffe          BL       GPIO_Init
;;;149    
;;;150    	/* 配置PB8作为vs1053B的数据请求 */
;;;151    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;		/* 设为输入口 */
00004a  2000              MOVS     r0,#0
00004c  f88d0004          STRB     r0,[sp,#4]
;;;152    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;		/* 设为推挽模式 */
000050  f88d0006          STRB     r0,[sp,#6]
;;;153    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;	/* 无需上下拉电阻 */
000054  f88d0007          STRB     r0,[sp,#7]
;;;154    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	/* IO口速度 */
000058  2002              MOVS     r0,#2
00005a  f88d0005          STRB     r0,[sp,#5]
;;;155    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
00005e  01c0              LSLS     r0,r0,#7
000060  9000              STR      r0,[sp,#0]
;;;156    	GPIO_Init(GPIOB, &GPIO_InitStructure);
000062  4669              MOV      r1,sp
000064  4813              LDR      r0,|L4.180|
000066  f7fffffe          BL       GPIO_Init
;;;157    
;;;158    	/* 配置PA5作为vs1053B的XDCS */
;;;159    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;		/* 设为输出口 */
00006a  2001              MOVS     r0,#1
00006c  f88d0004          STRB     r0,[sp,#4]
;;;160    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;		/* 设为推挽模式 */
000070  2000              MOVS     r0,#0
000072  f88d0006          STRB     r0,[sp,#6]
;;;161    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;	/* 上下拉电阻不使能 */
000076  f88d0007          STRB     r0,[sp,#7]
;;;162    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;	/* IO口最大速度 */
00007a  2003              MOVS     r0,#3
00007c  f88d0005          STRB     r0,[sp,#5]
;;;163    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
000080  2020              MOVS     r0,#0x20
000082  9000              STR      r0,[sp,#0]
;;;164    	GPIO_Init(GPIOA, &GPIO_InitStructure);
000084  4669              MOV      r1,sp
000086  480c              LDR      r0,|L4.184|
000088  f7fffffe          BL       GPIO_Init
;;;165    
;;;166    	/* 配置PC2作为vs1053B的XCS */
;;;167    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;		/* 设为输出口 */
00008c  2001              MOVS     r0,#1
00008e  f88d0004          STRB     r0,[sp,#4]
;;;168    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;		/* 设为推挽模式 */
000092  2000              MOVS     r0,#0
000094  f88d0006          STRB     r0,[sp,#6]
;;;169    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;	/* 上下拉电阻不使能 */
000098  f88d0007          STRB     r0,[sp,#7]
;;;170    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;	/* IO口最大速度 */
00009c  2003              MOVS     r0,#3
00009e  f88d0005          STRB     r0,[sp,#5]
;;;171    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
0000a2  2004              MOVS     r0,#4
0000a4  9000              STR      r0,[sp,#0]
;;;172    	GPIO_Init(GPIOC, &GPIO_InitStructure);
0000a6  4669              MOV      r1,sp
0000a8  4804              LDR      r0,|L4.188|
0000aa  f7fffffe          BL       GPIO_Init
;;;173    
;;;174    	/* 配置SPI硬件参数用于访问MP3解码器VS1053B */
;;;175    	bsp_CfgSPIForVS1053B();
0000ae  f7fffffe          BL       bsp_CfgSPIForVS1053B
;;;176    }
0000b2  bd1c              POP      {r2-r4,pc}
;;;177    
                          ENDP

                  |L4.180|
                          DCD      0x40020400
                  |L4.184|
                          DCD      0x40020000
                  |L4.188|
                          DCD      0x40020800

                          AREA ||i.vs1053_PreWriteData||, CODE, READONLY, ALIGN=2

                  vs1053_PreWriteData PROC
;;;307    */
;;;308    void vs1053_PreWriteData(void)
000000  2004              MOVS     r0,#4
;;;309    {
;;;310    	VS1053_CS_1();
000002  4903              LDR      r1,|L5.16|
000004  8008              STRH     r0,[r1,#0]
;;;311    	VS1053_DS_0();
000006  2020              MOVS     r0,#0x20
000008  4902              LDR      r1,|L5.20|
00000a  8348              STRH     r0,[r1,#0x1a]
;;;312    }
00000c  4770              BX       lr
;;;313    
                          ENDP

00000e  0000              DCW      0x0000
                  |L5.16|
                          DCD      0x40020818
                  |L5.20|
                          DCD      0x40020000

                          AREA ||i.vs1053_ReadByte||, CODE, READONLY, ALIGN=1

                  vs1053_ReadByte PROC
;;;248    */
;;;249    uint8_t vs1053_ReadByte(void)
000000  b510              PUSH     {r4,lr}
;;;250    {
;;;251    	return vs1053_WriteByte(DUMMY_BYTE);
000002  20ff              MOVS     r0,#0xff
000004  f7fffffe          BL       vs1053_WriteByte
;;;252    }
000008  bd10              POP      {r4,pc}
;;;253    
                          ENDP


                          AREA ||i.vs1053_ReadChipID||, CODE, READONLY, ALIGN=1

                  vs1053_ReadChipID PROC
;;;365    */
;;;366    uint8_t vs1053_ReadChipID(void)
000000  b510              PUSH     {r4,lr}
;;;367    {
;;;368    	uint16_t usStatus;
;;;369    	/* pdf page 40
;;;370    		SCI STATUS 状态寄存器的 Bit7:4 表示芯片的版本
;;;371    		0 for VS1001
;;;372    		1 for VS1011
;;;373    		2 for VS1002
;;;374    		3 for VS1003
;;;375    		4 for VS1053,
;;;376    		5 for VS1033,
;;;377    		7 for VS1103.
;;;378    	*/
;;;379    	usStatus = vs1053_ReadReg(SCI_STATUS);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       vs1053_ReadReg
000008  4604              MOV      r4,r0
;;;380    
;;;381    	return ((usStatus >> 4) & 0x000F);
00000a  f3c41003          UBFX     r0,r4,#4,#4
;;;382    }
00000e  bd10              POP      {r4,pc}
;;;383    
                          ENDP


                          AREA ||i.vs1053_ReadReg||, CODE, READONLY, ALIGN=2

                  vs1053_ReadReg PROC
;;;337    */
;;;338    uint16_t vs1053_ReadReg(uint8_t _ucAddr)
000000  b570              PUSH     {r4-r6,lr}
;;;339    {
000002  4605              MOV      r5,r0
;;;340    	uint16_t usTemp;
;;;341    
;;;342    	/* 等待芯片内部操作完成 */
;;;343    	if (vs1053_WaitTimeOut())
000004  f7fffffe          BL       vs1053_WaitTimeOut
000008  b108              CBZ      r0,|L8.14|
;;;344    	{
;;;345    		return 0;
00000a  2000              MOVS     r0,#0
                  |L8.12|
;;;346    	}
;;;347    
;;;348    	VS1053_DS_1();
;;;349    	VS1053_CS_0();
;;;350    	vs1053_WriteByte(VS_READ_COMMAND);	/* 发送vs1053读命令 */
;;;351    	vs1053_WriteByte(_ucAddr);			/* 发送地址 */
;;;352    	usTemp = vs1053_ReadByte() << 8;	/* 读取高字节 */
;;;353    	usTemp += vs1053_ReadByte();		/* 读取低字节 */
;;;354    	VS1053_CS_1();
;;;355    	return usTemp;
;;;356    }
00000c  bd70              POP      {r4-r6,pc}
                  |L8.14|
00000e  2020              MOVS     r0,#0x20              ;348
000010  490b              LDR      r1,|L8.64|
000012  8308              STRH     r0,[r1,#0x18]         ;348
000014  2004              MOVS     r0,#4                 ;349
000016  490b              LDR      r1,|L8.68|
000018  8008              STRH     r0,[r1,#0]            ;349
00001a  2003              MOVS     r0,#3                 ;350
00001c  f7fffffe          BL       vs1053_WriteByte
000020  4628              MOV      r0,r5                 ;351
000022  f7fffffe          BL       vs1053_WriteByte
000026  f7fffffe          BL       vs1053_ReadByte
00002a  0204              LSLS     r4,r0,#8              ;352
00002c  f7fffffe          BL       vs1053_ReadByte
000030  4420              ADD      r0,r0,r4              ;353
000032  b284              UXTH     r4,r0                 ;353
000034  2004              MOVS     r0,#4                 ;354
000036  4903              LDR      r1,|L8.68|
000038  1e89              SUBS     r1,r1,#2              ;354
00003a  8008              STRH     r0,[r1,#0]            ;354
00003c  4620              MOV      r0,r4                 ;355
00003e  e7e5              B        |L8.12|
;;;357    
                          ENDP

                  |L8.64|
                          DCD      0x40020000
                  |L8.68|
                          DCD      0x4002081a

                          AREA ||i.vs1053_ReqNewData||, CODE, READONLY, ALIGN=2

                  vs1053_ReqNewData PROC
;;;287    */
;;;288    uint8_t vs1053_ReqNewData(void)
000000  4804              LDR      r0,|L9.20|
;;;289    {
;;;290    	if (VS1053_IS_BUSY())
000002  6800              LDR      r0,[r0,#0]
000004  f4007080          AND      r0,r0,#0x100
000008  b908              CBNZ     r0,|L9.14|
;;;291    	{
;;;292    		return 0;
00000a  2000              MOVS     r0,#0
                  |L9.12|
;;;293    	}
;;;294    	else
;;;295    	{
;;;296    		return 1;
;;;297    	}
;;;298    }
00000c  4770              BX       lr
                  |L9.14|
00000e  2001              MOVS     r0,#1                 ;296
000010  e7fc              B        |L9.12|
;;;299    
                          ENDP

000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      0x40020410

                          AREA ||i.vs1053_SetBASS||, CODE, READONLY, ALIGN=1

                  vs1053_SetBASS PROC
;;;675    */
;;;676    void vs1053_SetBASS(int8_t _cHighAmp, uint16_t _usHighFreqCut, uint8_t _ucLowAmp, uint16_t _usLowFreqCut)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;677    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4690              MOV      r8,r2
00000a  461f              MOV      r7,r3
;;;678    	uint16_t usValue;
;;;679    
;;;680    	/*
;;;681    		SCI_BASS 寄存器定义:
;;;682    
;;;683    		Bit15:12  高音控制 -8 ... 7  (0是关闭)
;;;684    		Bit11:8   下限频率,单位1KHz,  1...15
;;;685    
;;;686    		Bit7:4    低音控制 0...15 (0是关闭)
;;;687    		Bit3:0    上限频率,单位10Hz, 2...15
;;;688    	*/
;;;689    
;;;690    	/* 高音增强幅度 */
;;;691    	if (_cHighAmp < -8)
00000c  f1150f08          CMN      r5,#8
000010  da02              BGE      |L10.24|
;;;692    	{
;;;693    		_cHighAmp = -8;
000012  f06f0507          MVN      r5,#7
000016  e002              B        |L10.30|
                  |L10.24|
;;;694    	}
;;;695    	else if (_cHighAmp > 7)
000018  2d07              CMP      r5,#7
00001a  dd00              BLE      |L10.30|
;;;696    	{
;;;697    		_cHighAmp = 7;
00001c  2507              MOVS     r5,#7
                  |L10.30|
;;;698    	}
;;;699    	usValue = _cHighAmp << 12;
00001e  f64f70ff          MOV      r0,#0xffff
000022  ea003405          AND      r4,r0,r5,LSL #12
;;;700    
;;;701    	/* 高音增强截止频率 */
;;;702    	if (_usHighFreqCut < 1000)
000026  f5b67f7a          CMP      r6,#0x3e8
00002a  da02              BGE      |L10.50|
;;;703    	{
;;;704    		_usHighFreqCut = 1000;
00002c  f44f767a          MOV      r6,#0x3e8
000030  e004              B        |L10.60|
                  |L10.50|
;;;705    	}
;;;706    	else if (_usHighFreqCut > 15000)
000032  f6432098          MOV      r0,#0x3a98
000036  4286              CMP      r6,r0
000038  dd00              BLE      |L10.60|
;;;707    	{
;;;708    		_usHighFreqCut = 15000;
00003a  4606              MOV      r6,r0
                  |L10.60|
;;;709    	}
;;;710    	usValue  += ((_usHighFreqCut / 1000) << 8);
00003c  f44f707a          MOV      r0,#0x3e8
000040  fb96f0f0          SDIV     r0,r6,r0
000044  eb042000          ADD      r0,r4,r0,LSL #8
000048  b284              UXTH     r4,r0
;;;711    
;;;712    	/* 低音增强幅度 */
;;;713    	if (_ucLowAmp > 15)
00004a  f1b80f0f          CMP      r8,#0xf
00004e  dd01              BLE      |L10.84|
;;;714    	{
;;;715    		_ucLowAmp = 15;
000050  f04f080f          MOV      r8,#0xf
                  |L10.84|
;;;716    	}
;;;717    	usValue  += (_ucLowAmp << 4);
000054  eb041008          ADD      r0,r4,r8,LSL #4
000058  b284              UXTH     r4,r0
;;;718    
;;;719    	/* 低音增强截止频率 */
;;;720    	if (_usLowFreqCut < 20)
00005a  2f14              CMP      r7,#0x14
00005c  da01              BGE      |L10.98|
;;;721    	{
;;;722    		_usLowFreqCut = 20;
00005e  2714              MOVS     r7,#0x14
000060  e002              B        |L10.104|
                  |L10.98|
;;;723    	}
;;;724    	else if (_usLowFreqCut > 150)
000062  2f96              CMP      r7,#0x96
000064  dd00              BLE      |L10.104|
;;;725    	{
;;;726    		_usLowFreqCut = 150;
000066  2796              MOVS     r7,#0x96
                  |L10.104|
;;;727    	}
;;;728    	usValue  += (_usLowFreqCut / 10);
000068  200a              MOVS     r0,#0xa
00006a  fb97f0f0          SDIV     r0,r7,r0
00006e  4420              ADD      r0,r0,r4
000070  b284              UXTH     r4,r0
;;;729    
;;;730    	vs1053_WriteCmd(SCI_BASS, usValue);
000072  4621              MOV      r1,r4
000074  2002              MOVS     r0,#2
000076  f7fffffe          BL       vs1053_WriteCmd
;;;731    }
00007a  e8bd81f0          POP      {r4-r8,pc}
;;;732    
                          ENDP


                          AREA ||i.vs1053_SetVolume||, CODE, READONLY, ALIGN=1

                  vs1053_SetVolume PROC
;;;644    */
;;;645    void vs1053_SetVolume(uint8_t _ucVol)
000000  b510              PUSH     {r4,lr}
;;;646    {
000002  4604              MOV      r4,r0
;;;647    
;;;648    	/* 对于 VS1053， 0表示最大音量，254表示静音 */
;;;649    	if (_ucVol == 0)
000004  b90c              CBNZ     r4,|L11.10|
;;;650    	{
;;;651    		_ucVol = 254;
000006  24fe              MOVS     r4,#0xfe
000008  e006              B        |L11.24|
                  |L11.10|
;;;652    	}
;;;653    	else if (_ucVol == 255)
00000a  2cff              CMP      r4,#0xff
00000c  d101              BNE      |L11.18|
;;;654    	{
;;;655    		_ucVol = 0;
00000e  2400              MOVS     r4,#0
000010  e002              B        |L11.24|
                  |L11.18|
;;;656    	}
;;;657    	else
;;;658    	{
;;;659    		_ucVol = 254 - _ucVol;
000012  f1c400fe          RSB      r0,r4,#0xfe
000016  b2c4              UXTB     r4,r0
                  |L11.24|
;;;660    	}
;;;661    
;;;662    	vs1053_WriteCmd(SCI_VOL, (_ucVol << 8) | _ucVol);
000018  ea442104          ORR      r1,r4,r4,LSL #8
00001c  200b              MOVS     r0,#0xb
00001e  f7fffffe          BL       vs1053_WriteCmd
;;;663    }
000022  bd10              POP      {r4,pc}
;;;664    
                          ENDP


                          AREA ||i.vs1053_SoftReset||, CODE, READONLY, ALIGN=1

                  vs1053_SoftReset PROC
;;;574    */
;;;575    void vs1053_SoftReset(void)
000000  b510              PUSH     {r4,lr}
;;;576    {
;;;577    	uint8_t retry;
;;;578    
;;;579    	/* 等待芯片内部操作完成 */
;;;580    	if (vs1053_WaitTimeOut())
000002  f7fffffe          BL       vs1053_WaitTimeOut
000006  b100              CBZ      r0,|L12.10|
                  |L12.8|
;;;581    	{
;;;582    		return;
;;;583    	}
;;;584    
;;;585    	vs1053_WriteByte(0X00);//启动传输
;;;586    	retry = 0;
;;;587    	while(vs1053_ReadReg(SCI_MODE) != 0x0804) // 软件复位,新模式
;;;588    	{
;;;589    		/* 等待至少1.35ms  */
;;;590    		vs1053_WriteCmd(SCI_MODE, 0x0804);// 软件复位,新模式
;;;591    
;;;592    		/* 等待芯片内部操作完成 */
;;;593    		if (vs1053_WaitTimeOut())
;;;594    		{
;;;595    			return;
;;;596    		}
;;;597    
;;;598    		if (retry++>5)
;;;599    		{
;;;600    			break;
;;;601    		}
;;;602    	}
;;;603    
;;;604    #if 0
;;;605    	vs1053_WriteCmd(SCI_CLOCKF,0x9800);
;;;606    	vs1053_WriteCmd(SCI_AUDATA,0xBB81); /* 采样率48k，立体声 */
;;;607    
;;;608    	vs1053_WriteCmd(SCI_BASS, 0x0000);	/* */
;;;609        vs1053_WriteCmd(SCI_VOL, 0x2020); 	/* 设置为最大音量,0是最大  */
;;;610    
;;;611    	ResetDecodeTime();	/* 复位解码时间	*/
;;;612    
;;;613        /* 向vs1053发送4个字节无效数据，用以启动SPI发送 */
;;;614        VS1053_DS_0();//选中数据传输
;;;615    	vs1053_WriteByte(0xFF);
;;;616    	vs1053_WriteByte(0xFF);
;;;617    	vs1053_WriteByte(0xFF);
;;;618    	vs1053_WriteByte(0xFF);
;;;619    	VS1053_DS_1();//取消数据传输
;;;620    #else
;;;621    	/* Set clock register, doubler etc. */
;;;622    	vs1053_WriteCmd(SCI_CLOCKF, 0xA000);
;;;623    
;;;624    	//vs1053_WriteCmd(SCI_BASS, 0x0000);	/* 低音高音增强控制， 0表示不启用 */
;;;625        //vs1053_WriteCmd(SCI_VOL, 0x2020); 	/* 设置为最大音量,0是最大  */
;;;626    
;;;627    	/* 等待芯片内部操作完成 */
;;;628    	if (vs1053_WaitTimeOut())
;;;629    	{
;;;630    		return;
;;;631    	}
;;;632    	;
;;;633    	LoadUserPatch();
;;;634    #endif
;;;635    }
000008  bd10              POP      {r4,pc}
                  |L12.10|
00000a  2000              MOVS     r0,#0                 ;585
00000c  f7fffffe          BL       vs1053_WriteByte
000010  2400              MOVS     r4,#0                 ;586
000012  e00e              B        |L12.50|
                  |L12.20|
000014  f6400104          MOV      r1,#0x804             ;590
000018  2000              MOVS     r0,#0                 ;590
00001a  f7fffffe          BL       vs1053_WriteCmd
00001e  f7fffffe          BL       vs1053_WaitTimeOut
000022  b100              CBZ      r0,|L12.38|
000024  e7f0              B        |L12.8|
                  |L12.38|
000026  4620              MOV      r0,r4                 ;598
000028  1c61              ADDS     r1,r4,#1              ;598
00002a  b2cc              UXTB     r4,r1                 ;598
00002c  2805              CMP      r0,#5                 ;598
00002e  dd00              BLE      |L12.50|
000030  e006              B        |L12.64|
                  |L12.50|
000032  2000              MOVS     r0,#0                 ;587
000034  f7fffffe          BL       vs1053_ReadReg
000038  f6400104          MOV      r1,#0x804             ;587
00003c  4288              CMP      r0,r1                 ;587
00003e  d1e9              BNE      |L12.20|
                  |L12.64|
000040  bf00              NOP                            ;600
000042  f44f4120          MOV      r1,#0xa000            ;622
000046  2003              MOVS     r0,#3                 ;622
000048  f7fffffe          BL       vs1053_WriteCmd
00004c  f7fffffe          BL       vs1053_WaitTimeOut
000050  b100              CBZ      r0,|L12.84|
000052  e7d9              B        |L12.8|
                  |L12.84|
000054  f7fffffe          BL       LoadUserPatch
000058  bf00              NOP      
00005a  e7d5              B        |L12.8|
;;;636    
                          ENDP


                          AREA ||i.vs1053_TestRam||, CODE, READONLY, ALIGN=2

                  vs1053_TestRam PROC
;;;457    */
;;;458    uint8_t vs1053_TestRam(void)
000000  b510              PUSH     {r4,lr}
;;;459    {
;;;460    	uint16_t usRegValue;
;;;461    
;;;462     	vs1053_WriteCmd(SCI_MODE, 0x0820);	/* 进入vs1053的测试模式 */
000002  f44f6102          MOV      r1,#0x820
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       vs1053_WriteCmd
;;;463    
;;;464    	/* 等待芯片内部操作完成 */
;;;465    	if (vs1053_WaitTimeOut())
00000c  f7fffffe          BL       vs1053_WaitTimeOut
000010  b108              CBZ      r0,|L13.22|
;;;466    	{
;;;467    		return 0;
000012  2000              MOVS     r0,#0
                  |L13.20|
;;;468    	}
;;;469    
;;;470     	VS1053_DS_0();
;;;471    	vs1053_WriteByte(0x4d);
;;;472    	vs1053_WriteByte(0xea);
;;;473    	vs1053_WriteByte(0x6d);
;;;474    	vs1053_WriteByte(0x54);
;;;475    	vs1053_WriteByte(0x00);
;;;476    	vs1053_WriteByte(0x00);
;;;477    	vs1053_WriteByte(0x00);
;;;478    	vs1053_WriteByte(0x00);
;;;479    	VS1053_DS_1();
;;;480    
;;;481    	/* 等待芯片内部操作完成 */
;;;482    	if (vs1053_WaitTimeOut())
;;;483    	{
;;;484    		return 0;
;;;485    	}
;;;486    
;;;487    	usRegValue = vs1053_ReadReg(SCI_HDAT0); /* 如果得到的值为0x807F，则表明OK */
;;;488    
;;;489    	if (usRegValue == 0x807F)
;;;490    	{
;;;491    		return 1;
;;;492    	}
;;;493    	else
;;;494    	{
;;;495    		return 0;
;;;496    	}
;;;497    }
000014  bd10              POP      {r4,pc}
                  |L13.22|
000016  2020              MOVS     r0,#0x20              ;470
000018  4916              LDR      r1,|L13.116|
00001a  8348              STRH     r0,[r1,#0x1a]         ;470
00001c  204d              MOVS     r0,#0x4d              ;471
00001e  f7fffffe          BL       vs1053_WriteByte
000022  20ea              MOVS     r0,#0xea              ;472
000024  f7fffffe          BL       vs1053_WriteByte
000028  206d              MOVS     r0,#0x6d              ;473
00002a  f7fffffe          BL       vs1053_WriteByte
00002e  2054              MOVS     r0,#0x54              ;474
000030  f7fffffe          BL       vs1053_WriteByte
000034  2000              MOVS     r0,#0                 ;475
000036  f7fffffe          BL       vs1053_WriteByte
00003a  2000              MOVS     r0,#0                 ;476
00003c  f7fffffe          BL       vs1053_WriteByte
000040  2000              MOVS     r0,#0                 ;477
000042  f7fffffe          BL       vs1053_WriteByte
000046  2000              MOVS     r0,#0                 ;478
000048  f7fffffe          BL       vs1053_WriteByte
00004c  2020              MOVS     r0,#0x20              ;479
00004e  4909              LDR      r1,|L13.116|
000050  8308              STRH     r0,[r1,#0x18]         ;479
000052  f7fffffe          BL       vs1053_WaitTimeOut
000056  b108              CBZ      r0,|L13.92|
000058  2000              MOVS     r0,#0                 ;484
00005a  e7db              B        |L13.20|
                  |L13.92|
00005c  2008              MOVS     r0,#8                 ;487
00005e  f7fffffe          BL       vs1053_ReadReg
000062  4604              MOV      r4,r0                 ;487
000064  f248007f          MOV      r0,#0x807f            ;489
000068  4284              CMP      r4,r0                 ;489
00006a  d101              BNE      |L13.112|
00006c  2001              MOVS     r0,#1                 ;491
00006e  e7d1              B        |L13.20|
                  |L13.112|
000070  2000              MOVS     r0,#0                 ;495
000072  e7cf              B        |L13.20|
;;;498    
                          ENDP

                  |L13.116|
                          DCD      0x40020000

                          AREA ||i.vs1053_TestSine||, CODE, READONLY, ALIGN=2

                  vs1053_TestSine PROC
;;;506    */
;;;507    void vs1053_TestSine(void)
000000  b510              PUSH     {r4,lr}
;;;508    {
;;;509    	/*
;;;510    		正弦测试通过有序的8字节初始化，0x53 0xEF 0x6E n 0 0 0 0
;;;511    		想要退出正弦测试模式的话，发送如下序列 0x45 0x78 0x69 0x74 0 0 0 0 .
;;;512    
;;;513    		这里的n被定义为正弦测试使用，定义
;;;514    		如下：
;;;515    		n bits
;;;516    		名称位 描述
;;;517    		FsIdx 7：5 采样率索引
;;;518    		S 4：0 正弦跳过速度
;;;519    		正弦输出频率可通过这个公式计算：F=Fs×(S/128).
;;;520    		例如：正弦测试值为126 时被激活，二进制为
;;;521    		0b01111110。则FsIdx=0b011=3,所以Fs=22050Hz。
;;;522    		S=0b11110=30, 所以最终的正弦输出频率为
;;;523    		F=22050Hz×30/128=5168Hz。
;;;524    
;;;525    
;;;526    		正弦输出频率可通过这个公式计算：F = Fs×(S/128).
;;;527    	*/
;;;528    
;;;529    	vs1053_WriteCmd(0x0b,0x2020);	  	/* 设置音量	*/
000002  f2420120          MOV      r1,#0x2020
000006  200b              MOVS     r0,#0xb
000008  f7fffffe          BL       vs1053_WriteCmd
;;;530     	vs1053_WriteCmd(SCI_MODE, 0x0820);	/* 进入vs1053的测试模式	*/
00000c  f44f6102          MOV      r1,#0x820
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       vs1053_WriteCmd
;;;531    
;;;532     	/* 等待芯片内部操作完成 */
;;;533    	if (vs1053_WaitTimeOut())
000016  f7fffffe          BL       vs1053_WaitTimeOut
00001a  b100              CBZ      r0,|L14.30|
                  |L14.28|
;;;534    	{
;;;535    		return;
;;;536    	}
;;;537    
;;;538     	/*
;;;539     		进入正弦测试状态
;;;540     		命令序列：0x53 0xef 0x6e n 0x00 0x00 0x00 0x00
;;;541     		其中n = 0x24, 设定vs1053所产生的正弦波的频率值
;;;542     	*/
;;;543        VS1053_DS_0();
;;;544    	vs1053_WriteByte(0x53);
;;;545    	vs1053_WriteByte(0xef);
;;;546    	vs1053_WriteByte(0x6e);
;;;547    	vs1053_WriteByte(0x24);	/* 0x24 or 0x44 */
;;;548    	vs1053_WriteByte(0x00);
;;;549    	vs1053_WriteByte(0x00);
;;;550    	vs1053_WriteByte(0x00);
;;;551    	vs1053_WriteByte(0x00);
;;;552    	VS1053_DS_1();
;;;553    
;;;554    	/* 退出正弦测试 */
;;;555        VS1053_DS_0();
;;;556    	vs1053_WriteByte(0x45);
;;;557    	vs1053_WriteByte(0x78);
;;;558    	vs1053_WriteByte(0x69);
;;;559    	vs1053_WriteByte(0x74);
;;;560    	vs1053_WriteByte(0x00);
;;;561    	vs1053_WriteByte(0x00);
;;;562    	vs1053_WriteByte(0x00);
;;;563    	vs1053_WriteByte(0x00);
;;;564    	VS1053_DS_1();
;;;565    }
00001c  bd10              POP      {r4,pc}
                  |L14.30|
00001e  2020              MOVS     r0,#0x20              ;543
000020  491d              LDR      r1,|L14.152|
000022  8348              STRH     r0,[r1,#0x1a]         ;543
000024  2053              MOVS     r0,#0x53              ;544
000026  f7fffffe          BL       vs1053_WriteByte
00002a  20ef              MOVS     r0,#0xef              ;545
00002c  f7fffffe          BL       vs1053_WriteByte
000030  206e              MOVS     r0,#0x6e              ;546
000032  f7fffffe          BL       vs1053_WriteByte
000036  2024              MOVS     r0,#0x24              ;547
000038  f7fffffe          BL       vs1053_WriteByte
00003c  2000              MOVS     r0,#0                 ;548
00003e  f7fffffe          BL       vs1053_WriteByte
000042  2000              MOVS     r0,#0                 ;549
000044  f7fffffe          BL       vs1053_WriteByte
000048  2000              MOVS     r0,#0                 ;550
00004a  f7fffffe          BL       vs1053_WriteByte
00004e  2000              MOVS     r0,#0                 ;551
000050  f7fffffe          BL       vs1053_WriteByte
000054  2020              MOVS     r0,#0x20              ;552
000056  4910              LDR      r1,|L14.152|
000058  8308              STRH     r0,[r1,#0x18]         ;552
00005a  8348              STRH     r0,[r1,#0x1a]         ;555
00005c  2045              MOVS     r0,#0x45              ;556
00005e  f7fffffe          BL       vs1053_WriteByte
000062  2078              MOVS     r0,#0x78              ;557
000064  f7fffffe          BL       vs1053_WriteByte
000068  2069              MOVS     r0,#0x69              ;558
00006a  f7fffffe          BL       vs1053_WriteByte
00006e  2074              MOVS     r0,#0x74              ;559
000070  f7fffffe          BL       vs1053_WriteByte
000074  2000              MOVS     r0,#0                 ;560
000076  f7fffffe          BL       vs1053_WriteByte
00007a  2000              MOVS     r0,#0                 ;561
00007c  f7fffffe          BL       vs1053_WriteByte
000080  2000              MOVS     r0,#0                 ;562
000082  f7fffffe          BL       vs1053_WriteByte
000086  2000              MOVS     r0,#0                 ;563
000088  f7fffffe          BL       vs1053_WriteByte
00008c  2020              MOVS     r0,#0x20              ;564
00008e  4902              LDR      r1,|L14.152|
000090  8308              STRH     r0,[r1,#0x18]         ;564
000092  bf00              NOP      
000094  e7c2              B        |L14.28|
;;;566    
                          ENDP

000096  0000              DCW      0x0000
                  |L14.152|
                          DCD      0x40020000

                          AREA ||i.vs1053_WaitTimeOut||, CODE, READONLY, ALIGN=2

                  vs1053_WaitTimeOut PROC
;;;392    */
;;;393    uint8_t vs1053_WaitTimeOut(void)
000000  2100              MOVS     r1,#0
;;;394    {
;;;395    	uint32_t i;
;;;396    
;;;397    	for (i = 0; i < 4000000; i++)
000002  e006              B        |L15.18|
                  |L15.4|
;;;398    	{
;;;399    		if (!VS1053_IS_BUSY())
000004  4808              LDR      r0,|L15.40|
000006  6800              LDR      r0,[r0,#0]
000008  f4007080          AND      r0,r0,#0x100
00000c  b100              CBZ      r0,|L15.16|
;;;400    		{
;;;401    			break;
00000e  e003              B        |L15.24|
                  |L15.16|
000010  1c49              ADDS     r1,r1,#1              ;397
                  |L15.18|
000012  4806              LDR      r0,|L15.44|
000014  4281              CMP      r1,r0                 ;397
000016  d3f5              BCC      |L15.4|
                  |L15.24|
000018  bf00              NOP      
;;;402    		}
;;;403    	}
;;;404    
;;;405    	if (i >= 4000000)
00001a  4804              LDR      r0,|L15.44|
00001c  4281              CMP      r1,r0
00001e  d301              BCC      |L15.36|
;;;406    	{
;;;407    		return 1;	/* 超时无应答，硬件异常 */
000020  2001              MOVS     r0,#1
                  |L15.34|
;;;408    	}
;;;409    
;;;410    	return 0;	/* 正常返回 */
;;;411    }
000022  4770              BX       lr
                  |L15.36|
000024  2000              MOVS     r0,#0                 ;410
000026  e7fc              B        |L15.34|
;;;412    
                          ENDP

                  |L15.40|
                          DCD      0x40020410
                  |L15.44|
                          DCD      0x003d0900

                          AREA ||i.vs1053_WriteByte||, CODE, READONLY, ALIGN=2

                  vs1053_WriteByte PROC
;;;225    */
;;;226    uint8_t vs1053_WriteByte(uint8_t _ucByte)
000000  b510              PUSH     {r4,lr}
;;;227    {
000002  4604              MOV      r4,r0
;;;228    	/* 等待发送区空 */
;;;229    	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
000004  bf00              NOP      
                  |L16.6|
000006  2102              MOVS     r1,#2
000008  480a              LDR      r0,|L16.52|
00000a  f7fffffe          BL       SPI_I2S_GetFlagStatus
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L16.6|
;;;230    
;;;231    	/* 发送1个字节 */
;;;232    	SPI_I2S_SendData(SPI1, _ucByte);
000012  4621              MOV      r1,r4
000014  4807              LDR      r0,|L16.52|
000016  f7fffffe          BL       SPI_I2S_SendData
;;;233    
;;;234    	/* 等待接收完1个字节 */
;;;235    	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
00001a  bf00              NOP      
                  |L16.28|
00001c  2101              MOVS     r1,#1
00001e  4805              LDR      r0,|L16.52|
000020  f7fffffe          BL       SPI_I2S_GetFlagStatus
000024  2800              CMP      r0,#0
000026  d0f9              BEQ      |L16.28|
;;;236    
;;;237    	/* 返回读到的数据 */
;;;238    	return SPI_I2S_ReceiveData(SPI1);
000028  4802              LDR      r0,|L16.52|
00002a  f7fffffe          BL       SPI_I2S_ReceiveData
00002e  b2c0              UXTB     r0,r0
;;;239    }
000030  bd10              POP      {r4,pc}
;;;240    
                          ENDP

000032  0000              DCW      0x0000
                  |L16.52|
                          DCD      0x40013000

                          AREA ||i.vs1053_WriteCmd||, CODE, READONLY, ALIGN=2

                  vs1053_WriteCmd PROC
;;;261    */
;;;262    void vs1053_WriteCmd(uint8_t _ucAddr, uint16_t _usData)
000000  b570              PUSH     {r4-r6,lr}
;;;263    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;264    	/* 等待芯片内部操作完成 */
;;;265    	if (vs1053_WaitTimeOut())
000006  f7fffffe          BL       vs1053_WaitTimeOut
00000a  b100              CBZ      r0,|L17.14|
                  |L17.12|
;;;266    	{
;;;267    		return;
;;;268    	}
;;;269    
;;;270    	VS1053_DS_1();
;;;271    	VS1053_CS_0();
;;;272    
;;;273    	vs1053_WriteByte(VS_WRITE_COMMAND);	/* 发送vs1053的写命令 */
;;;274    	vs1053_WriteByte(_ucAddr); 			/* 寄存器地址 */
;;;275    	vs1053_WriteByte(_usData >> 8); 	/* 发送高8位 */
;;;276    	vs1053_WriteByte(_usData);	 		/* 发送低8位 */
;;;277    	VS1053_CS_1();
;;;278    }
00000c  bd70              POP      {r4-r6,pc}
                  |L17.14|
00000e  2020              MOVS     r0,#0x20              ;270
000010  490b              LDR      r1,|L17.64|
000012  8308              STRH     r0,[r1,#0x18]         ;270
000014  2004              MOVS     r0,#4                 ;271
000016  490b              LDR      r1,|L17.68|
000018  8008              STRH     r0,[r1,#0]            ;271
00001a  2002              MOVS     r0,#2                 ;273
00001c  f7fffffe          BL       vs1053_WriteByte
000020  4628              MOV      r0,r5                 ;274
000022  f7fffffe          BL       vs1053_WriteByte
000026  1220              ASRS     r0,r4,#8              ;275
000028  f7fffffe          BL       vs1053_WriteByte
00002c  b2e0              UXTB     r0,r4                 ;276
00002e  f7fffffe          BL       vs1053_WriteByte
000032  2004              MOVS     r0,#4                 ;277
000034  4903              LDR      r1,|L17.68|
000036  1e89              SUBS     r1,r1,#2              ;277
000038  8008              STRH     r0,[r1,#0]            ;277
00003a  bf00              NOP      
00003c  e7e6              B        |L17.12|
;;;279    
                          ENDP

00003e  0000              DCW      0x0000
                  |L17.64|
                          DCD      0x40020000
                  |L17.68|
                          DCD      0x4002081a

                          AREA ||i.vs1053_WriteData||, CODE, READONLY, ALIGN=2

                  vs1053_WriteData PROC
;;;321    */
;;;322    void vs1053_WriteData(uint8_t _ucData)
000000  b510              PUSH     {r4,lr}
;;;323    {
000002  4604              MOV      r4,r0
;;;324    	VS1053_CS_1();
000004  2004              MOVS     r0,#4
000006  4906              LDR      r1,|L18.32|
000008  8008              STRH     r0,[r1,#0]
;;;325    	VS1053_DS_0();
00000a  2020              MOVS     r0,#0x20
00000c  4905              LDR      r1,|L18.36|
00000e  8348              STRH     r0,[r1,#0x1a]
;;;326    	vs1053_WriteByte(_ucData);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       vs1053_WriteByte
;;;327    	VS1053_DS_1();
000016  2020              MOVS     r0,#0x20
000018  4902              LDR      r1,|L18.36|
00001a  8308              STRH     r0,[r1,#0x18]
;;;328    }
00001c  bd10              POP      {r4,pc}
;;;329    
                          ENDP

00001e  0000              DCW      0x0000
                  |L18.32|
                          DCD      0x40020818
                  |L18.36|
                          DCD      0x40020000

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  plugin
000000  00070001          DCW      0x0007,0x0001
000004  83000006          DCW      0x8300,0x0006
000008  01f2b080          DCW      0x01f2,0xb080
00000c  00240007          DCW      0x0024,0x0007
000010  92573f00          DCW      0x9257,0x3f00
000014  00240030          DCW      0x0024,0x0030
000018  02973f00          DCW      0x0297,0x3f00
00001c  00240006          DCW      0x0024,0x0006
000020  00173f10          DCW      0x0017,0x3f10
000024  00243f00          DCW      0x0024,0x3f00
000028  00240000          DCW      0x0024,0x0000
00002c  f6d7f400          DCW      0xf6d7,0xf400
000030  55c00000          DCW      0x55c0,0x0000
000034  0817f400          DCW      0x0817,0xf400
000038  57c00000          DCW      0x57c0,0x0000
00003c  004d000a          DCW      0x004d,0x000a
000040  708f0000          DCW      0x708f,0x0000
000044  c44e280f          DCW      0xc44e,0x280f
000048  e1000006          DCW      0xe100,0x0006
00004c  20160000          DCW      0x2016,0x0000
000050  028d0014          DCW      0x028d,0x0014
000054  1b012800          DCW      0x1b01,0x2800
000058  c7950015          DCW      0xc795,0x0015
00005c  59c00000          DCW      0x59c0,0x0000
000060  fa0d0039          DCW      0xfa0d,0x0039
000064  324f0000          DCW      0x324f,0x0000
000068  d20e2920          DCW      0xd20e,0x2920
00006c  41c00000          DCW      0x41c0,0x0000
000070  0024000a          DCW      0x0024,0x000a
000074  708f0000          DCW      0x708f,0x0000
000078  c44e280a          DCW      0xc44e,0x280a
00007c  cac00000          DCW      0xcac0,0x0000
000080  028d6fc2          DCW      0x028d,0x6fc2
000084  0024000c          DCW      0x0024,0x000c
000088  09812800          DCW      0x0981,0x2800
00008c  cad50000          DCW      0xcad5,0x0000
000090  18c2290c          DCW      0x18c2,0x290c
000094  48403613          DCW      0x4840,0x3613
000098  0024290c          DCW      0x0024,0x290c
00009c  48404086          DCW      0x4840,0x4086
0000a0  184c6234          DCW      0x184c,0x6234
0000a4  00240000          DCW      0x0024,0x0000
0000a8  00242800          DCW      0x0024,0x2800
0000ac  cad50030          DCW      0xcad5,0x0030
0000b0  03173f00          DCW      0x0317,0x3f00
0000b4  0024280a          DCW      0x0024,0x280a
0000b8  71c0002c          DCW      0x71c0,0x002c
0000bc  9d403613          DCW      0x9d40,0x3613
0000c0  00243e10          DCW      0x0024,0x3e10
0000c4  b8033e14          DCW      0xb803,0x3e14
0000c8  38113e11          DCW      0x3811,0x3e11
0000cc  38053e00          DCW      0x3805,0x3e00
0000d0  38010007          DCW      0x3801,0x0007
0000d4  c3900006          DCW      0xc390,0x0006
0000d8  a0113010          DCW      0xa011,0x3010
0000dc  04443050          DCW      0x0444,0x3050
0000e0  44056458          DCW      0x4405,0x6458
0000e4  0302ff94          DCW      0x0302,0xff94
0000e8  40810003          DCW      0x4081,0x0003
0000ec  ffc548b6          DCW      0xffc5,0x48b6
0000f0  0024ff82          DCW      0x0024,0xff82
0000f4  002442b2          DCW      0x0024,0x42b2
0000f8  0042b458          DCW      0x0042,0xb458
0000fc  00034cd6          DCW      0x0003,0x4cd6
000100  9801f248          DCW      0x9801,0xf248
000104  1bc0b58a          DCW      0x1bc0,0xb58a
000108  00246de6          DCW      0x0024,0x6de6
00010c  18040006          DCW      0x1804,0x0006
000110  00103810          DCW      0x0010,0x3810
000114  9bc53800          DCW      0x9bc5,0x3800
000118  c02436f4          DCW      0xc024,0x36f4
00011c  181136f0          DCW      0x1811,0x36f0
000120  9803283e          DCW      0x9803,0x283e
000124  2d800fff          DCW      0x2d80,0x0fff
000128  ffc3003e          DCW      0xffc3,0x003e
00012c  2d4f2800          DCW      0x2d4f,0x2800
000130  e3800000          DCW      0xe380,0x0000
000134  cb4e3413          DCW      0xcb4e,0x3413
000138  00242800          DCW      0x0024,0x2800
00013c  d405f400          DCW      0xd405,0xf400
000140  45102800          DCW      0x4510,0x2800
000144  d7c06894          DCW      0xd7c0,0x6894
000148  13cc3000          DCW      0x13cc,0x3000
00014c  184c6090          DCW      0x184c,0x6090
000150  93cc38b0          DCW      0x93cc,0x38b0
000154  38123004          DCW      0x3812,0x3004
000158  40240000          DCW      0x4024,0x0000
00015c  09103183          DCW      0x0910,0x3183
000160  00243100          DCW      0x0024,0x3100
000164  40246016          DCW      0x4024,0x6016
000168  0024000c          DCW      0x0024,0x000c
00016c  80122800          DCW      0x8012,0x2800
000170  d711b884          DCW      0xd711,0xb884
000174  104c6894          DCW      0x104c,0x6894
000178  30022939          DCW      0x3002,0x2939
00017c  b0c03e10          DCW      0xb0c0,0x3e10
000180  93cc4084          DCW      0x93cc,0x4084
000184  9bd24282          DCW      0x9bd2,0x4282
000188  00240000          DCW      0x0024,0x0000
00018c  00412800          DCW      0x0041,0x2800
000190  d9c56212          DCW      0xd9c5,0x6212
000194  00240000          DCW      0x0024,0x0000
000198  00402800          DCW      0x0040,0x2800
00019c  dec5000c          DCW      0xdec5,0x000c
0001a0  83902a00          DCW      0x8390,0x2a00
0001a4  e24034c3          DCW      0xe240,0x34c3
0001a8  00243444          DCW      0x0024,0x3444
0001ac  00243073          DCW      0x0024,0x3073
0001b0  00243053          DCW      0x0024,0x3053
0001b4  00243000          DCW      0x0024,0x3000
0001b8  00246092          DCW      0x0024,0x6092
0001bc  098c0000          DCW      0x098c,0x0000
0001c0  02412800          DCW      0x0241,0x2800
0001c4  e24532a0          DCW      0xe245,0x32a0
0001c8  00246012          DCW      0x0024,0x6012
0001cc  00240000          DCW      0x0024,0x0000
0001d0  00242800          DCW      0x0024,0x2800
0001d4  e2550000          DCW      0xe255,0x0000
0001d8  00243613          DCW      0x0024,0x3613
0001dc  00243001          DCW      0x0024,0x3001
0001e0  38442920          DCW      0x3844,0x2920
0001e4  05803009          DCW      0x0580,0x3009
0001e8  3852c090          DCW      0x3852,0xc090
0001ec  9bd22800          DCW      0x9bd2,0x2800
0001f0  e2403800          DCW      0xe240,0x3800
0001f4  1bc4000c          DCW      0x1bc4,0x000c
0001f8  4113b880          DCW      0x4113,0xb880
0001fc  23803304          DCW      0x2380,0x3304
000200  40243800          DCW      0x4024,0x3800
000204  05cccc92          DCW      0x05cc,0xcc92
000208  05cc3910          DCW      0x05cc,0x3910
00020c  00243910          DCW      0x0024,0x3910
000210  4024000c          DCW      0x4024,0x000c
000214  81103910          DCW      0x8110,0x3910
000218  002439f0          DCW      0x0024,0x39f0
00021c  40243810          DCW      0x4024,0x3810
000220  002438d0          DCW      0x0024,0x38d0
000224  40243810          DCW      0x4024,0x3810
000228  002438f0          DCW      0x0024,0x38f0
00022c  402434c3          DCW      0x4024,0x34c3
000230  00243444          DCW      0x0024,0x3444
000234  00243073          DCW      0x0024,0x3073
000238  00243063          DCW      0x0024,0x3063
00023c  00243000          DCW      0x0024,0x3000
000240  00244080          DCW      0x0024,0x4080
000244  00240000          DCW      0x0024,0x0000
000248  00242839          DCW      0x0024,0x2839
00024c  53d54284          DCW      0x53d5,0x4284
000250  00243613          DCW      0x0024,0x3613
000254  00242800          DCW      0x0024,0x2800
000258  e5856898          DCW      0xe585,0x6898
00025c  b8040000          DCW      0xb804,0x0000
000260  0084293b          DCW      0x0084,0x293b
000264  1cc03613          DCW      0x1cc0,0x3613
000268  0024000c          DCW      0x0024,0x000c
00026c  81173711          DCW      0x8117,0x3711
000270  002437d1          DCW      0x0024,0x37d1
000274  40244e8a          DCW      0x4024,0x4e8a
000278  00240000          DCW      0x0024,0x0000
00027c  00152800          DCW      0x0015,0x2800
000280  e845ce9a          DCW      0xe845,0xce9a
000284  00243f11          DCW      0x0024,0x3f11
000288  00243f01          DCW      0x0024,0x3f01
00028c  4024000c          DCW      0x4024,0x000c
000290  8197408a          DCW      0x8197,0x408a
000294  9bc43f15          DCW      0x9bc4,0x3f15
000298  40242800          DCW      0x4024,0x2800
00029c  ea854284          DCW      0xea85,0x4284
0002a0  3c156590          DCW      0x3c15,0x6590
0002a4  00240000          DCW      0x0024,0x0000
0002a8  00242839          DCW      0x0024,0x2839
0002ac  53d54284          DCW      0x53d5,0x4284
0002b0  00240000          DCW      0x0024,0x0000
0002b4  00242800          DCW      0x0024,0x2800
0002b8  d2d8458a          DCW      0xd2d8,0x458a
0002bc  00242a39          DCW      0x0024,0x2a39
0002c0  53c03009          DCW      0x53c0,0x3009
0002c4  38513e14          DCW      0x3851,0x3e14
0002c8  f8123e12          DCW      0xf812,0x3e12
0002cc  b8170006          DCW      0xb817,0x0006
0002d0  a0573e11          DCW      0xa057,0x3e11
0002d4  9fd30023          DCW      0x9fd3,0x0023
0002d8  ffd23e01          DCW      0xffd2,0x3e01
0002dc  00240006          DCW      0x0024,0x0006
0002e0  00113111          DCW      0x0011,0x3111
0002e4  00246498          DCW      0x0024,0x6498
0002e8  07c6868c          DCW      0x07c6,0x868c
0002ec  24443901          DCW      0x2444,0x3901
0002f0  8e060030          DCW      0x8e06,0x0030
0002f4  05513911          DCW      0x0551,0x3911
0002f8  8e063961          DCW      0x8e06,0x3961
0002fc  9c44f400          DCW      0x9c44,0xf400
000300  44c6d46c          DCW      0x44c6,0xd46c
000304  1bc436f1          DCW      0x1bc4,0x36f1
000308  bc132800          DCW      0xbc13,0x2800
00030c  f61536f2          DCW      0xf615,0x36f2
000310  9817002b          DCW      0x9817,0x002b
000314  ffd23383          DCW      0xffd2,0x3383
000318  188c3e01          DCW      0x188c,0x3e01
00031c  8c060006          DCW      0x8c06,0x0006
000320  a097468c          DCW      0xa097,0x468c
000324  bc17f400          DCW      0xbc17,0xf400
000328  41972800          DCW      0x4197,0x2800
00032c  f3043713          DCW      0xf304,0x3713
000330  00242800          DCW      0x0024,0x2800
000334  f34537e3          DCW      0xf345,0x37e3
000338  00243009          DCW      0x0024,0x3009
00033c  2c173383          DCW      0x2c17,0x3383
000340  00243009          DCW      0x0024,0x3009
000344  0c06468c          DCW      0x0c06,0x468c
000348  41970006          DCW      0x4197,0x0006
00034c  a0522800          DCW      0xa052,0x2800
000350  f5443713          DCW      0xf544,0x3713
000354  28132800          DCW      0x2813,0x2800
000358  f58537e3          DCW      0xf585,0x37e3
00035c  00243009          DCW      0x0024,0x3009
000360  2c1736f1          DCW      0x2c17,0x36f1
000364  802436f2          DCW      0x8024,0x36f2
000368  981736f4          DCW      0x9817,0x36f4
00036c  d8122100          DCW      0xd812,0x2100
000370  00003904          DCW      0x0000,0x3904
000374  5bd12a00          DCW      0x5bd1,0x2a00
000378  eb8e3e11          DCW      0xeb8e,0x3e11
00037c  78040030          DCW      0x7804,0x0030
000380  02573701          DCW      0x0257,0x3701
000384  00240013          DCW      0x0024,0x0013
000388  4d05d45b          DCW      0x4d05,0xd45b
00038c  e0e10007          DCW      0xe0e1,0x0007
000390  c7952800          DCW      0xc795,0x2800
000394  fd950fff          DCW      0xfd95,0x0fff
000398  ff453511          DCW      0xff45,0x3511
00039c  184c4488          DCW      0x184c,0x4488
0003a0  b8080006          DCW      0xb808,0x0006
0003a4  8a972800          DCW      0x8a97,0x2800
0003a8  fd453009          DCW      0xfd45,0x3009
0003ac  1c403511          DCW      0x1c40,0x3511
0003b0  1fc10000          DCW      0x1fc1,0x0000
0003b4  0020ac52          DCW      0x0020,0xac52
0003b8  14056ce2          DCW      0x1405,0x6ce2
0003bc  00240000          DCW      0x0024,0x0000
0003c0  00242800          DCW      0x0024,0x2800
0003c4  fd4168c2          DCW      0xfd41,0x68c2
0003c8  0024291a          DCW      0x0024,0x291a
0003cc  8a403e10          DCW      0x8a40,0x3e10
0003d0  00242921          DCW      0x0024,0x2921
0003d4  ca803e00          DCW      0xca80,0x3e00
0003d8  402436f3          DCW      0x4024,0x36f3
0003dc  00243009          DCW      0x0024,0x3009
0003e0  1bc836f0          DCW      0x1bc8,0x36f0
0003e4  18012808          DCW      0x1801,0x2808
0003e8  93003601          DCW      0x9300,0x3601
0003ec  58040007          DCW      0x5804,0x0007
0003f0  0001802e          DCW      0x0001,0x802e
0003f4  00060002          DCW      0x0006,0x0002
0003f8  2800f700          DCW      0x2800,0xf700
0003fc  00070001          DCW      0x0007,0x0001
000400  80500006          DCW      0x8050,0x0006
000404  00283e12          DCW      0x0028,0x3e12
000408  38002911          DCW      0x3800,0x2911
00040c  f1403e10          DCW      0xf140,0x3e10
000410  8024f400          DCW      0x8024,0xf400
000414  45953593          DCW      0x4595,0x3593
000418  002435f3          DCW      0x0024,0x35f3
00041c  00243500          DCW      0x0024,0x3500
000420  00240021          DCW      0x0024,0x0021
000424  6d82d024          DCW      0x6d82,0xd024
000428  44c00006          DCW      0x44c0,0x0006
00042c  a4022800          DCW      0xa402,0x2800
000430  1815d024          DCW      0x1815,0xd024
000434  00240000          DCW      0x0024,0x0000
000438  00002800          DCW      0x0000,0x2800
00043c  1815000b          DCW      0x1815,0x000b
000440  6d573009          DCW      0x6d57,0x3009
000444  3c0036f0          DCW      0x3c00,0x36f0
000448  802436f2          DCW      0x8024,0x36f2
00044c  18002000          DCW      0x1800,0x2000
000450  00000000          DCW      0x0000,0x0000
000454  00240007          DCW      0x0024,0x0007
000458  00018030          DCW      0x0001,0x8030
00045c  00060002          DCW      0x0006,0x0002
000460  28001400          DCW      0x2800,0x1400
000464  00070001          DCW      0x0007,0x0001
000468  80640006          DCW      0x8064,0x0006
00046c  001c3e12          DCW      0x001c,0x3e12
000470  b8173e14          DCW      0xb817,0x3e14
000474  f8123e01          DCW      0xf812,0x3e01
000478  b8110007          DCW      0xb811,0x0007
00047c  97170020          DCW      0x9717,0x0020
000480  ffd20030          DCW      0xffd2,0x0030
000484  11d13111          DCW      0x11d1,0x3111
000488  80243704          DCW      0x8024,0x3704
00048c  c0243b81          DCW      0xc024,0x3b81
000490  80243101          DCW      0x8024,0x3101
000494  80243b81          DCW      0x8024,0x3b81
000498  80243f04          DCW      0x8024,0x3f04
00049c  c0242808          DCW      0xc024,0x2808
0004a0  480036f1          DCW      0x4800,0x36f1
0004a4  98110007          DCW      0x9811,0x0007
0004a8  00018028          DCW      0x0001,0x8028
0004ac  00060002          DCW      0x0006,0x0002
0004b0  2a00190e          DCW      0x2a00,0x190e
0004b4  000a0001          DCW      0x000a,0x0001
0004b8  0300              DCW      0x0300

                          AREA ||.data||, DATA, ALIGN=0

                  vs1053ram
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  fa                DCB      0xfa

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_vs1053b.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_vs1053b_c_dece0a4d____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_bsp_vs1053b_c_dece0a4d____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_vs1053b_c_dece0a4d____REVSH|
#line 144
|__asm___13_bsp_vs1053b_c_dece0a4d____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
