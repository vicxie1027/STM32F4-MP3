; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_uart_fifo.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_uart_fifo.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc -I..\..\Libraries\STM32_USB_HOST_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbh_mass_storage -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_HS -DUSE_EMBEDDED_PHY --omf_browse=.\flash\obj\bsp_uart_fifo.crf ..\..\User\bsp_stm32f4xx\src\bsp_uart_fifo.c]
                          THUMB

                          AREA ||i.ComToUart||, CODE, READONLY, ALIGN=2

                  ComToUart PROC
;;;90     */
;;;91     UART_T *ComToUart(COM_PORT_E _ucPort)
000000  4601              MOV      r1,r0
;;;92     {
;;;93     	if (_ucPort == COM1)
000002  b909              CBNZ     r1,|L1.8|
;;;94     	{
;;;95     		#if UART1_FIFO_EN == 1
;;;96     			return &g_tUart1;
000004  480b              LDR      r0,|L1.52|
                  |L1.6|
;;;97     		#else
;;;98     			return 0;
;;;99     		#endif
;;;100    	}
;;;101    	else if (_ucPort == COM2)
;;;102    	{
;;;103    		#if UART2_FIFO_EN == 1
;;;104    			return &g_tUart2;
;;;105    		#else
;;;106    			return;
;;;107    		#endif
;;;108    	}
;;;109    	else if (_ucPort == COM3)
;;;110    	{
;;;111    		#if UART3_FIFO_EN == 1
;;;112    			return &g_tUart3;
;;;113    		#else
;;;114    			return 0;
;;;115    		#endif
;;;116    	}
;;;117    	else if (_ucPort == COM4)
;;;118    	{
;;;119    		#if UART4_FIFO_EN == 1
;;;120    			return &g_tUart4;
;;;121    		#else
;;;122    			return 0;
;;;123    		#endif
;;;124    	}
;;;125    	else if (_ucPort == COM5)
;;;126    	{
;;;127    		#if UART5_FIFO_EN == 1
;;;128    			return &g_tUart5;
;;;129    		#else
;;;130    			return 0;
;;;131    		#endif
;;;132    	}
;;;133    	else if (_ucPort == COM6)
;;;134    	{
;;;135    		#if UART6_FIFO_EN == 1
;;;136    			return &g_tUart6;
;;;137    		#else
;;;138    			return 0;
;;;139    		#endif
;;;140    	}
;;;141    	else
;;;142    	{
;;;143    		/* 不做任何处理 */
;;;144    		return 0;
;;;145    	}
;;;146    }
000006  4770              BX       lr
                  |L1.8|
000008  2901              CMP      r1,#1                 ;101
00000a  d101              BNE      |L1.16|
00000c  480a              LDR      r0,|L1.56|
00000e  e7fa              B        |L1.6|
                  |L1.16|
000010  2902              CMP      r1,#2                 ;109
000012  d101              BNE      |L1.24|
000014  4809              LDR      r0,|L1.60|
000016  e7f6              B        |L1.6|
                  |L1.24|
000018  2903              CMP      r1,#3                 ;117
00001a  d101              BNE      |L1.32|
00001c  2000              MOVS     r0,#0                 ;122
00001e  e7f2              B        |L1.6|
                  |L1.32|
000020  2904              CMP      r1,#4                 ;125
000022  d101              BNE      |L1.40|
000024  2000              MOVS     r0,#0                 ;130
000026  e7ee              B        |L1.6|
                  |L1.40|
000028  2905              CMP      r1,#5                 ;133
00002a  d101              BNE      |L1.48|
00002c  4804              LDR      r0,|L1.64|
00002e  e7ea              B        |L1.6|
                  |L1.48|
000030  2000              MOVS     r0,#0                 ;144
000032  e7e8              B        |L1.6|
;;;147    
                          ENDP

                  |L1.52|
                          DCD      g_tUart1
                  |L1.56|
                          DCD      g_tUart2
                  |L1.60|
                          DCD      g_tUart3
                  |L1.64|
                          DCD      g_tUart6

                          AREA ||i.ConfigUartNVIC||, CODE, READONLY, ALIGN=1

                  ConfigUartNVIC PROC
;;;814    */
;;;815    static void ConfigUartNVIC(void)
000000  b508              PUSH     {r3,lr}
;;;816    {
;;;817    	NVIC_InitTypeDef NVIC_InitStructure;
;;;818    
;;;819    	/* Configure the NVIC Preemption Priority Bits */
;;;820    	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
000002  f44f60e0          MOV      r0,#0x700
000006  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;821    
;;;822    #if UART1_FIFO_EN == 1
;;;823    	/* 使能串口1中断 */
;;;824    	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
00000a  2025              MOVS     r0,#0x25
00000c  f88d0000          STRB     r0,[sp,#0]
;;;825    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
000010  2000              MOVS     r0,#0
000012  f88d0002          STRB     r0,[sp,#2]
;;;826    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000016  2001              MOVS     r0,#1
000018  f88d0003          STRB     r0,[sp,#3]
;;;827    	NVIC_Init(&NVIC_InitStructure);
00001c  4668              MOV      r0,sp
00001e  f7fffffe          BL       NVIC_Init
;;;828    #endif
;;;829    
;;;830    #if UART2_FIFO_EN == 1
;;;831    	/* 使能串口2中断 */
;;;832    	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
000022  2026              MOVS     r0,#0x26
000024  f88d0000          STRB     r0,[sp,#0]
;;;833    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
000028  2001              MOVS     r0,#1
00002a  f88d0002          STRB     r0,[sp,#2]
;;;834    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
00002e  f88d0003          STRB     r0,[sp,#3]
;;;835    	NVIC_Init(&NVIC_InitStructure);
000032  4668              MOV      r0,sp
000034  f7fffffe          BL       NVIC_Init
;;;836    #endif
;;;837    
;;;838    #if UART3_FIFO_EN == 1
;;;839    	/* 使能串口3中断t */
;;;840    	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
000038  2027              MOVS     r0,#0x27
00003a  f88d0000          STRB     r0,[sp,#0]
;;;841    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
00003e  2002              MOVS     r0,#2
000040  f88d0002          STRB     r0,[sp,#2]
;;;842    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000044  2001              MOVS     r0,#1
000046  f88d0003          STRB     r0,[sp,#3]
;;;843    	NVIC_Init(&NVIC_InitStructure);
00004a  4668              MOV      r0,sp
00004c  f7fffffe          BL       NVIC_Init
;;;844    #endif
;;;845    
;;;846    #if UART4_FIFO_EN == 1
;;;847    	/* 使能串口4中断t */
;;;848    	NVIC_InitStructure.NVIC_IRQChannel = UART4_IRQn;
;;;849    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
;;;850    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;851    	NVIC_Init(&NVIC_InitStructure);
;;;852    #endif
;;;853    
;;;854    #if UART5_FIFO_EN == 1
;;;855    	/* 使能串口5中断t */
;;;856    	NVIC_InitStructure.NVIC_IRQChannel = UART5_IRQn;
;;;857    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 4;
;;;858    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;859    	NVIC_Init(&NVIC_InitStructure);
;;;860    #endif
;;;861    
;;;862    #if UART6_FIFO_EN == 1
;;;863    	/* 使能串口6中断t */
;;;864    	NVIC_InitStructure.NVIC_IRQChannel = USART6_IRQn;
000050  2047              MOVS     r0,#0x47
000052  f88d0000          STRB     r0,[sp,#0]
;;;865    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 5;
000056  2005              MOVS     r0,#5
000058  f88d0002          STRB     r0,[sp,#2]
;;;866    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
00005c  2001              MOVS     r0,#1
00005e  f88d0003          STRB     r0,[sp,#3]
;;;867    	NVIC_Init(&NVIC_InitStructure);
000062  4668              MOV      r0,sp
000064  f7fffffe          BL       NVIC_Init
;;;868    #endif
;;;869    }
000068  bd08              POP      {r3,pc}
;;;870    
                          ENDP


                          AREA ||i.InitHardUart||, CODE, READONLY, ALIGN=2

                  InitHardUart PROC
;;;409    */
;;;410    static void InitHardUart(void)
000000  b500              PUSH     {lr}
;;;411    {
000002  b087              SUB      sp,sp,#0x1c
;;;412    	GPIO_InitTypeDef GPIO_InitStructure;
;;;413    	USART_InitTypeDef USART_InitStructure;
;;;414    
;;;415    #if UART1_FIFO_EN == 1		/* 串口1 TX = PA9   RX = PA10 或 TX = PB6   RX = PB7*/
;;;416    
;;;417    	/* 第1步： 配置GPIO */
;;;418    	#if 1	/* TX = PA9   RX = PA10 */
;;;419    		/* 打开 GPIO 时钟 */
;;;420    		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
000004  2101              MOVS     r1,#1
000006  4608              MOV      r0,r1
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;421    
;;;422    		/* 打开 UART 时钟 */
;;;423    		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  2010              MOVS     r0,#0x10
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;424    
;;;425    		/* 将 PA9 映射为 USART1_TX */
;;;426    		GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1);
000014  2207              MOVS     r2,#7
000016  2109              MOVS     r1,#9
000018  48ab              LDR      r0,|L3.712|
00001a  f7fffffe          BL       GPIO_PinAFConfig
;;;427    
;;;428    		/* 将 PA10 映射为 USART1_RX */
;;;429    		GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);
00001e  2207              MOVS     r2,#7
000020  210a              MOVS     r1,#0xa
000022  48a9              LDR      r0,|L3.712|
000024  f7fffffe          BL       GPIO_PinAFConfig
;;;430    
;;;431    		/* 配置 USART Tx 为复用功能 */
;;;432    		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	/* 输出类型为推挽 */
000028  2000              MOVS     r0,#0
00002a  f88d001a          STRB     r0,[sp,#0x1a]
;;;433    		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	/* 内部上拉电阻使能 */
00002e  2001              MOVS     r0,#1
000030  f88d001b          STRB     r0,[sp,#0x1b]
;;;434    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;	/* 复用模式 */
000034  2002              MOVS     r0,#2
000036  f88d0018          STRB     r0,[sp,#0x18]
;;;435    
;;;436    		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
00003a  0200              LSLS     r0,r0,#8
00003c  9005              STR      r0,[sp,#0x14]
;;;437    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00003e  2002              MOVS     r0,#2
000040  f88d0019          STRB     r0,[sp,#0x19]
;;;438    		GPIO_Init(GPIOA, &GPIO_InitStructure);
000044  a905              ADD      r1,sp,#0x14
000046  48a0              LDR      r0,|L3.712|
000048  f7fffffe          BL       GPIO_Init
;;;439    
;;;440    		/* 配置 USART Rx 为复用功能 */
;;;441    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00004c  2002              MOVS     r0,#2
00004e  f88d0018          STRB     r0,[sp,#0x18]
;;;442    		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
000052  0240              LSLS     r0,r0,#9
000054  9005              STR      r0,[sp,#0x14]
;;;443    		GPIO_Init(GPIOA, &GPIO_InitStructure);
000056  a905              ADD      r1,sp,#0x14
000058  489b              LDR      r0,|L3.712|
00005a  f7fffffe          BL       GPIO_Init
;;;444    	#else	/* TX = PB6   RX = PB7  */
;;;445    		/* 打开 GPIO 时钟 */
;;;446    		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
;;;447    
;;;448    		/* 打开 UART 时钟 */
;;;449    		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
;;;450    
;;;451    		/* 将 PB6 映射为 USART1_TX */
;;;452    		GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1);
;;;453    
;;;454    		/* 将 PB7 映射为 USART1_RX */
;;;455    		GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);
;;;456    
;;;457    		/* 配置 USART Tx 为复用功能 */
;;;458    		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	/* 输出类型为推挽 */
;;;459    		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	/* 内部上拉电阻使能 */
;;;460    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;	/* 复用模式 */
;;;461    
;;;462    		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
;;;463    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;464    		GPIO_Init(GPIOB, &GPIO_InitStructure);
;;;465    
;;;466    		/* 配置 USART Rx 为复用功能 */
;;;467    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;468    		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
;;;469    		GPIO_Init(GPIOB, &GPIO_InitStructure);
;;;470    	#endif
;;;471    
;;;472    	/* 第2步： 配置串口硬件参数 */
;;;473    	USART_InitStructure.USART_BaudRate = UART1_BAUD;	/* 波特率 */
00005e  f44f30e1          MOV      r0,#0x1c200
000062  9001              STR      r0,[sp,#4]
;;;474    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000064  2000              MOVS     r0,#0
000066  f8ad0008          STRH     r0,[sp,#8]
;;;475    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00006a  f8ad000a          STRH     r0,[sp,#0xa]
;;;476    	USART_InitStructure.USART_Parity = USART_Parity_No ;
00006e  f8ad000c          STRH     r0,[sp,#0xc]
;;;477    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000072  f8ad0010          STRH     r0,[sp,#0x10]
;;;478    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000076  200c              MOVS     r0,#0xc
000078  f8ad000e          STRH     r0,[sp,#0xe]
;;;479    	USART_Init(USART1, &USART_InitStructure);
00007c  a901              ADD      r1,sp,#4
00007e  4893              LDR      r0,|L3.716|
000080  f7fffffe          BL       USART_Init
;;;480    
;;;481    	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
000084  2201              MOVS     r2,#1
000086  f2405125          MOV      r1,#0x525
00008a  4890              LDR      r0,|L3.716|
00008c  f7fffffe          BL       USART_ITConfig
;;;482    	/*
;;;483    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;484    		注意: 不要在此处打开发送中断
;;;485    		发送中断使能在SendUart()函数打开
;;;486    	*/
;;;487    	USART_Cmd(USART1, ENABLE);		/* 使能串口 */
000090  2101              MOVS     r1,#1
000092  488e              LDR      r0,|L3.716|
000094  f7fffffe          BL       USART_Cmd
;;;488    
;;;489    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;490    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;491    	USART_ClearFlag(USART1, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
000098  2140              MOVS     r1,#0x40
00009a  488c              LDR      r0,|L3.716|
00009c  f7fffffe          BL       USART_ClearFlag
;;;492    #endif
;;;493    
;;;494    #if UART2_FIFO_EN == 1		/* 串口2 TX = PD5   RX = PD6 或  TX = PA2， RX = PA3  */
;;;495    	/* 第1步： 配置GPIO */
;;;496    	#if 0	/* 串口2 TX = PD5   RX = PD6 */
;;;497    		/* 打开 GPIO 时钟 */
;;;498    		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
;;;499    
;;;500    		/* 打开 UART 时钟 */
;;;501    		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
;;;502    
;;;503    		/* 将 PD5 映射为 USART2_TX */
;;;504    		GPIO_PinAFConfig(GPIOD, GPIO_PinSource5, GPIO_AF_USART2);
;;;505    
;;;506    		/* 将 PD6 映射为 USART2_RX */
;;;507    		GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_USART2);
;;;508    
;;;509    		/* 配置 USART Tx 为复用功能 */
;;;510    		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	/* 输出类型为推挽 */
;;;511    		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	/* 内部上拉电阻使能 */
;;;512    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;	/* 复用模式 */
;;;513    
;;;514    		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
;;;515    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;516    		GPIO_Init(GPIOD, &GPIO_InitStructure);
;;;517    
;;;518    		/* 配置 USART Rx 为复用功能 */
;;;519    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;520    		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
;;;521    		GPIO_Init(GPIOD, &GPIO_InitStructure);
;;;522    
;;;523    	#else	/* 串口2   TX = PA2， RX = PA3 */
;;;524    		/* 打开 GPIO 时钟 */
;;;525    		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
0000a0  2101              MOVS     r1,#1
0000a2  4608              MOV      r0,r1
0000a4  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;526    
;;;527    		/* 打开 UART 时钟 */
;;;528    		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
0000a8  2101              MOVS     r1,#1
0000aa  0448              LSLS     r0,r1,#17
0000ac  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;529    
;;;530    		/* 将 PA2 映射为 USART2_TX. 在STM32-V5板中，PA2 管脚用于以太网 */
;;;531    		//GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
;;;532    
;;;533    		/* 将 PA3 映射为 USART2_RX */
;;;534    		GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
0000b0  2207              MOVS     r2,#7
0000b2  2103              MOVS     r1,#3
0000b4  4884              LDR      r0,|L3.712|
0000b6  f7fffffe          BL       GPIO_PinAFConfig
;;;535    
;;;536    		/* 配置 USART Tx 为复用功能 */
;;;537    		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	/* 输出类型为推挽 */
0000ba  2000              MOVS     r0,#0
0000bc  f88d001a          STRB     r0,[sp,#0x1a]
;;;538    		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	/* 内部上拉电阻使能 */
0000c0  2001              MOVS     r0,#1
0000c2  f88d001b          STRB     r0,[sp,#0x1b]
;;;539    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;	/* 复用模式 */
0000c6  2002              MOVS     r0,#2
0000c8  f88d0018          STRB     r0,[sp,#0x18]
;;;540    
;;;541    		//GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
;;;542    		//GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;543    		//GPIO_Init(GPIOA, &GPIO_InitStructure);
;;;544    
;;;545    		/* 配置 USART Rx 为复用功能 */
;;;546    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
0000cc  f88d0018          STRB     r0,[sp,#0x18]
;;;547    		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
0000d0  2008              MOVS     r0,#8
0000d2  9005              STR      r0,[sp,#0x14]
;;;548    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
0000d4  2002              MOVS     r0,#2
0000d6  f88d0019          STRB     r0,[sp,#0x19]
;;;549    		GPIO_Init(GPIOA, &GPIO_InitStructure);
0000da  a905              ADD      r1,sp,#0x14
0000dc  487a              LDR      r0,|L3.712|
0000de  f7fffffe          BL       GPIO_Init
;;;550    	#endif
;;;551    
;;;552    	/* 第2步： 配置串口硬件参数 */
;;;553    	USART_InitStructure.USART_BaudRate = UART2_BAUD;	/* 波特率 */
0000e2  f44f5016          MOV      r0,#0x2580
0000e6  9001              STR      r0,[sp,#4]
;;;554    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
0000e8  2000              MOVS     r0,#0
0000ea  f8ad0008          STRH     r0,[sp,#8]
;;;555    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
0000ee  f8ad000a          STRH     r0,[sp,#0xa]
;;;556    	USART_InitStructure.USART_Parity = USART_Parity_No ;
0000f2  f8ad000c          STRH     r0,[sp,#0xc]
;;;557    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
0000f6  f8ad0010          STRH     r0,[sp,#0x10]
;;;558    	USART_InitStructure.USART_Mode = USART_Mode_Rx;		/* 仅选择接收模式 */
0000fa  2004              MOVS     r0,#4
0000fc  f8ad000e          STRH     r0,[sp,#0xe]
;;;559    	USART_Init(USART2, &USART_InitStructure);
000100  a901              ADD      r1,sp,#4
000102  4873              LDR      r0,|L3.720|
000104  f7fffffe          BL       USART_Init
;;;560    
;;;561    	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
000108  2201              MOVS     r2,#1
00010a  f2405125          MOV      r1,#0x525
00010e  4870              LDR      r0,|L3.720|
000110  f7fffffe          BL       USART_ITConfig
;;;562    	/*
;;;563    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;564    		注意: 不要在此处打开发送中断
;;;565    		发送中断使能在SendUart()函数打开
;;;566    	*/
;;;567    	USART_Cmd(USART2, ENABLE);		/* 使能串口 */
000114  2101              MOVS     r1,#1
000116  486e              LDR      r0,|L3.720|
000118  f7fffffe          BL       USART_Cmd
;;;568    
;;;569    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;570    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;571    	USART_ClearFlag(USART2, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
00011c  2140              MOVS     r1,#0x40
00011e  486c              LDR      r0,|L3.720|
000120  f7fffffe          BL       USART_ClearFlag
;;;572    #endif
;;;573    
;;;574    #if UART3_FIFO_EN == 1			/* 串口3 TX = PB10   RX = PB11 */
;;;575    
;;;576    	/* 配置 PB2为推挽输出，用于切换 RS485芯片的收发状态 */
;;;577    	{
;;;578    		RCC_AHB1PeriphClockCmd(RCC_RS485_TXEN, ENABLE);
000124  2101              MOVS     r1,#1
000126  2002              MOVS     r0,#2
000128  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;579    
;;;580    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;		/* 设为输出口 */
00012c  2001              MOVS     r0,#1
00012e  f88d0018          STRB     r0,[sp,#0x18]
;;;581    		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;		/* 设为推挽模式 */
000132  2000              MOVS     r0,#0
000134  f88d001a          STRB     r0,[sp,#0x1a]
;;;582    		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;	/* 上下拉电阻不使能 */
000138  f88d001b          STRB     r0,[sp,#0x1b]
;;;583    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;	/* IO口最大速度 */
00013c  2003              MOVS     r0,#3
00013e  f88d0019          STRB     r0,[sp,#0x19]
;;;584    
;;;585    		GPIO_InitStructure.GPIO_Pin = PIN_RS485_TXEN;
000142  2004              MOVS     r0,#4
000144  9005              STR      r0,[sp,#0x14]
;;;586    		GPIO_Init(PORT_RS485_TXEN, &GPIO_InitStructure);
000146  a905              ADD      r1,sp,#0x14
000148  4862              LDR      r0,|L3.724|
00014a  f7fffffe          BL       GPIO_Init
;;;587    	}
;;;588    
;;;589    	/* 打开 GPIO 时钟 */
;;;590    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
00014e  2101              MOVS     r1,#1
000150  2002              MOVS     r0,#2
000152  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;591    
;;;592    	/* 打开 UART 时钟 */
;;;593    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
000156  2101              MOVS     r1,#1
000158  0488              LSLS     r0,r1,#18
00015a  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;594    
;;;595    	/* 将 PB10 映射为 USART3_TX */
;;;596    	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_USART3);
00015e  2207              MOVS     r2,#7
000160  210a              MOVS     r1,#0xa
000162  485c              LDR      r0,|L3.724|
000164  f7fffffe          BL       GPIO_PinAFConfig
;;;597    
;;;598    	/* 将 PB11 映射为 USART3_RX */
;;;599    	GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_USART3);
000168  2207              MOVS     r2,#7
00016a  210b              MOVS     r1,#0xb
00016c  4859              LDR      r0,|L3.724|
00016e  f7fffffe          BL       GPIO_PinAFConfig
;;;600    
;;;601    	/* 配置 USART Tx 为复用功能 */
;;;602    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	/* 输出类型为推挽 */
000172  2000              MOVS     r0,#0
000174  f88d001a          STRB     r0,[sp,#0x1a]
;;;603    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	/* 内部上拉电阻使能 */
000178  2001              MOVS     r0,#1
00017a  f88d001b          STRB     r0,[sp,#0x1b]
;;;604    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;	/* 复用模式 */
00017e  2002              MOVS     r0,#2
000180  f88d0018          STRB     r0,[sp,#0x18]
;;;605    
;;;606    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
000184  0240              LSLS     r0,r0,#9
000186  9005              STR      r0,[sp,#0x14]
;;;607    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000188  2002              MOVS     r0,#2
00018a  f88d0019          STRB     r0,[sp,#0x19]
;;;608    	GPIO_Init(GPIOB, &GPIO_InitStructure);
00018e  a905              ADD      r1,sp,#0x14
000190  4850              LDR      r0,|L3.724|
000192  f7fffffe          BL       GPIO_Init
;;;609    
;;;610    	/* 配置 USART Rx 为复用功能 */
;;;611    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000196  2002              MOVS     r0,#2
000198  f88d0018          STRB     r0,[sp,#0x18]
;;;612    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
00019c  0280              LSLS     r0,r0,#10
00019e  9005              STR      r0,[sp,#0x14]
;;;613    	GPIO_Init(GPIOB, &GPIO_InitStructure);
0001a0  a905              ADD      r1,sp,#0x14
0001a2  484c              LDR      r0,|L3.724|
0001a4  f7fffffe          BL       GPIO_Init
;;;614    
;;;615    	/* 第2步： 配置串口硬件参数 */
;;;616    	USART_InitStructure.USART_BaudRate = UART3_BAUD;	/* 波特率 */
0001a8  f44f5016          MOV      r0,#0x2580
0001ac  9001              STR      r0,[sp,#4]
;;;617    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
0001ae  2000              MOVS     r0,#0
0001b0  f8ad0008          STRH     r0,[sp,#8]
;;;618    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
0001b4  f8ad000a          STRH     r0,[sp,#0xa]
;;;619    	USART_InitStructure.USART_Parity = USART_Parity_No ;
0001b8  f8ad000c          STRH     r0,[sp,#0xc]
;;;620    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
0001bc  f8ad0010          STRH     r0,[sp,#0x10]
;;;621    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
0001c0  200c              MOVS     r0,#0xc
0001c2  f8ad000e          STRH     r0,[sp,#0xe]
;;;622    	USART_Init(USART3, &USART_InitStructure);
0001c6  a901              ADD      r1,sp,#4
0001c8  4843              LDR      r0,|L3.728|
0001ca  f7fffffe          BL       USART_Init
;;;623    
;;;624    	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
0001ce  2201              MOVS     r2,#1
0001d0  f2405125          MOV      r1,#0x525
0001d4  4840              LDR      r0,|L3.728|
0001d6  f7fffffe          BL       USART_ITConfig
;;;625    	/*
;;;626    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;627    		注意: 不要在此处打开发送中断
;;;628    		发送中断使能在SendUart()函数打开
;;;629    	*/
;;;630    	USART_Cmd(USART3, ENABLE);		/* 使能串口 */
0001da  2101              MOVS     r1,#1
0001dc  483e              LDR      r0,|L3.728|
0001de  f7fffffe          BL       USART_Cmd
;;;631    
;;;632    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;633    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;634    	USART_ClearFlag(USART3, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
0001e2  2140              MOVS     r1,#0x40
0001e4  483c              LDR      r0,|L3.728|
0001e6  f7fffffe          BL       USART_ClearFlag
;;;635    #endif
;;;636    
;;;637    #if UART4_FIFO_EN == 1			/* 串口4 TX = PC10   RX = PC11 */
;;;638    	/* 第1步： 配置GPIO */
;;;639    
;;;640    	/* 打开 GPIO 时钟 */
;;;641    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
;;;642    
;;;643    	/* 打开 UART 时钟 */
;;;644    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
;;;645    
;;;646    	/* 将 PC10 映射为 UART4_TX */
;;;647    	GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_USART1);
;;;648    
;;;649    	/* 将 PC11 映射为 UART4_RX */
;;;650    	GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_USART1);
;;;651    
;;;652    	/* 配置 USART Tx 为复用功能 */
;;;653    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	/* 输出类型为推挽 */
;;;654    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	/* 内部上拉电阻使能 */
;;;655    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;	/* 复用模式 */
;;;656    
;;;657    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
;;;658    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;659    	GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;660    
;;;661    	/* 配置 USART Rx 为复用功能 */
;;;662    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;663    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
;;;664    	GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;665    
;;;666    	/* 第2步： 配置串口硬件参数 */
;;;667    	USART_InitStructure.USART_BaudRate = UART1_BAUD;	/* 波特率 */
;;;668    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
;;;669    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;670    	USART_InitStructure.USART_Parity = USART_Parity_No ;
;;;671    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;672    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
;;;673    	USART_Init(UART4, &USART_InitStructure);
;;;674    
;;;675    	USART_ITConfig(UART4, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
;;;676    	/*
;;;677    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;678    		注意: 不要在此处打开发送中断
;;;679    		发送中断使能在SendUart()函数打开
;;;680    	*/
;;;681    	USART_Cmd(UART4, ENABLE);		/* 使能串口 */
;;;682    
;;;683    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;684    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;685    	USART_ClearFlag(UART4, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
;;;686    #endif
;;;687    
;;;688    #if UART5_FIFO_EN == 1			/* 串口5 TX = PC12   RX = PD2 */
;;;689    	/* 第1步： 配置GPIO */
;;;690    
;;;691    	/* 打开 GPIO 时钟 */
;;;692    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC |RCC_AHB1Periph_GPIOD, ENABLE);
;;;693    
;;;694    	/* 打开 UART 时钟 */
;;;695    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
;;;696    
;;;697    	/* 将 PC12 映射为 UART5_TX */
;;;698    	GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_UART5);
;;;699    
;;;700    	/* 将 PD2 映射为 UART5_RX */
;;;701    	GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_UART5);
;;;702    
;;;703    	/* 配置 UART Tx 为复用功能 */
;;;704    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	/* 输出类型为推挽 */
;;;705    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	/* 内部上拉电阻使能 */
;;;706    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;	/* 复用模式 */
;;;707    
;;;708    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
;;;709    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;710    	GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;711    
;;;712    	/* 配置 UART Rx 为复用功能 */
;;;713    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;714    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
;;;715    	GPIO_Init(GPIOD, &GPIO_InitStructure);
;;;716    
;;;717    	/* 第2步： 配置串口硬件参数 */
;;;718    	USART_InitStructure.USART_BaudRate = UART5_BAUD;	/* 波特率 */
;;;719    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
;;;720    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;721    	USART_InitStructure.USART_Parity = USART_Parity_No ;
;;;722    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;723    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
;;;724    	USART_Init(UART5, &USART_InitStructure);
;;;725    
;;;726    	USART_ITConfig(UART5, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
;;;727    	/*
;;;728    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;729    		注意: 不要在此处打开发送中断
;;;730    		发送中断使能在SendUart()函数打开
;;;731    	*/
;;;732    	USART_Cmd(UART5, ENABLE);		/* 使能串口 */
;;;733    
;;;734    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;735    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;736    	USART_ClearFlag(UART5, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
;;;737    #endif
;;;738    
;;;739    #if UART6_FIFO_EN == 1			/* PG14/USART6_TX , PC7/USART6_RX,PG8/USART6_RTS, PG15/USART6_CTS */
;;;740    	/* 第1步： 配置GPIO */
;;;741    
;;;742    	/* 打开 GPIO 时钟 */
;;;743    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC |RCC_AHB1Periph_GPIOG, ENABLE);
0001ea  2101              MOVS     r1,#1
0001ec  2044              MOVS     r0,#0x44
0001ee  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;744    
;;;745    	/* 打开 UART 时钟 */
;;;746    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
0001f2  2101              MOVS     r1,#1
0001f4  2020              MOVS     r0,#0x20
0001f6  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;747    
;;;748    	/* 将 PG14 映射为 USART6_TX */
;;;749    	GPIO_PinAFConfig(GPIOG, GPIO_PinSource14, GPIO_AF_USART6);
0001fa  2208              MOVS     r2,#8
0001fc  210e              MOVS     r1,#0xe
0001fe  4837              LDR      r0,|L3.732|
000200  f7fffffe          BL       GPIO_PinAFConfig
;;;750    
;;;751    	/* 将 PC7 映射为 USART6_RX */
;;;752    	GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_USART6);
000204  2208              MOVS     r2,#8
000206  2107              MOVS     r1,#7
000208  4835              LDR      r0,|L3.736|
00020a  f7fffffe          BL       GPIO_PinAFConfig
;;;753    
;;;754    	/* 将 PG8 映射为 USART6_RTS */
;;;755    	GPIO_PinAFConfig(GPIOG, GPIO_PinSource8, GPIO_AF_USART6);
00020e  2208              MOVS     r2,#8
000210  4611              MOV      r1,r2
000212  4832              LDR      r0,|L3.732|
000214  f7fffffe          BL       GPIO_PinAFConfig
;;;756    
;;;757    	/* 将 PG15 映射为 USART6_CTS */
;;;758    	GPIO_PinAFConfig(GPIOG, GPIO_PinSource15, GPIO_AF_USART6);
000218  2208              MOVS     r2,#8
00021a  210f              MOVS     r1,#0xf
00021c  482f              LDR      r0,|L3.732|
00021e  f7fffffe          BL       GPIO_PinAFConfig
;;;759    
;;;760    	/* 配置 PG14/USART6_TX 为复用功能 */
;;;761    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	/* 输出类型为推挽 */
000222  2000              MOVS     r0,#0
000224  f88d001a          STRB     r0,[sp,#0x1a]
;;;762    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	/* 内部上拉电阻使能 */
000228  2001              MOVS     r0,#1
00022a  f88d001b          STRB     r0,[sp,#0x1b]
;;;763    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;	/* 复用模式 */
00022e  2002              MOVS     r0,#2
000230  f88d0018          STRB     r0,[sp,#0x18]
;;;764    
;;;765    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
000234  0340              LSLS     r0,r0,#13
000236  9005              STR      r0,[sp,#0x14]
;;;766    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000238  2002              MOVS     r0,#2
00023a  f88d0019          STRB     r0,[sp,#0x19]
;;;767    	GPIO_Init(GPIOG, &GPIO_InitStructure);
00023e  a905              ADD      r1,sp,#0x14
000240  4826              LDR      r0,|L3.732|
000242  f7fffffe          BL       GPIO_Init
;;;768    
;;;769    	/* 配置 PC7/USART6_RX 为复用功能 */
;;;770    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000246  2002              MOVS     r0,#2
000248  f88d0018          STRB     r0,[sp,#0x18]
;;;771    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
00024c  2080              MOVS     r0,#0x80
00024e  9005              STR      r0,[sp,#0x14]
;;;772    	GPIO_Init(GPIOC, &GPIO_InitStructure);
000250  a905              ADD      r1,sp,#0x14
000252  4823              LDR      r0,|L3.736|
000254  f7fffffe          BL       GPIO_Init
;;;773    
;;;774    	/* 配置 PG8/USART6_RTS 为复用功能 */
;;;775    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000258  2002              MOVS     r0,#2
00025a  f88d0018          STRB     r0,[sp,#0x18]
;;;776    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
00025e  01c0              LSLS     r0,r0,#7
000260  9005              STR      r0,[sp,#0x14]
;;;777    	GPIO_Init(GPIOG, &GPIO_InitStructure);
000262  a905              ADD      r1,sp,#0x14
000264  481d              LDR      r0,|L3.732|
000266  f7fffffe          BL       GPIO_Init
;;;778    
;;;779    	/* 配置 PG15/USART6_CTS 为复用功能 */
;;;780    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00026a  2002              MOVS     r0,#2
00026c  f88d0018          STRB     r0,[sp,#0x18]
;;;781    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
000270  0380              LSLS     r0,r0,#14
000272  9005              STR      r0,[sp,#0x14]
;;;782    	GPIO_Init(GPIOG, &GPIO_InitStructure);
000274  a905              ADD      r1,sp,#0x14
000276  4819              LDR      r0,|L3.732|
000278  f7fffffe          BL       GPIO_Init
;;;783    
;;;784    	/* 第2步： 配置串口硬件参数 */
;;;785    	USART_InitStructure.USART_BaudRate = UART6_BAUD;	/* 波特率 */
00027c  f44f30e1          MOV      r0,#0x1c200
000280  9001              STR      r0,[sp,#4]
;;;786    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000282  2000              MOVS     r0,#0
000284  f8ad0008          STRH     r0,[sp,#8]
;;;787    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
000288  f8ad000a          STRH     r0,[sp,#0xa]
;;;788    	USART_InitStructure.USART_Parity = USART_Parity_No ;
00028c  f8ad000c          STRH     r0,[sp,#0xc]
;;;789    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_RTS_CTS;	/* 选择硬件流控 */
000290  f44f7040          MOV      r0,#0x300
000294  f8ad0010          STRH     r0,[sp,#0x10]
;;;790    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000298  200c              MOVS     r0,#0xc
00029a  f8ad000e          STRH     r0,[sp,#0xe]
;;;791    	USART_Init(USART6, &USART_InitStructure);
00029e  a901              ADD      r1,sp,#4
0002a0  4810              LDR      r0,|L3.740|
0002a2  f7fffffe          BL       USART_Init
;;;792    
;;;793    	USART_ITConfig(USART6, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
0002a6  2201              MOVS     r2,#1
0002a8  f2405125          MOV      r1,#0x525
0002ac  480d              LDR      r0,|L3.740|
0002ae  f7fffffe          BL       USART_ITConfig
;;;794    	/*
;;;795    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;796    		注意: 不要在此处打开发送中断
;;;797    		发送中断使能在SendUart()函数打开
;;;798    	*/
;;;799    	USART_Cmd(USART6, ENABLE);		/* 使能串口 */
0002b2  2101              MOVS     r1,#1
0002b4  480b              LDR      r0,|L3.740|
0002b6  f7fffffe          BL       USART_Cmd
;;;800    
;;;801    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;802    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;803    	USART_ClearFlag(USART6, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
0002ba  2140              MOVS     r1,#0x40
0002bc  4809              LDR      r0,|L3.740|
0002be  f7fffffe          BL       USART_ClearFlag
;;;804    #endif
;;;805    }
0002c2  b007              ADD      sp,sp,#0x1c
0002c4  bd00              POP      {pc}
;;;806    
                          ENDP

0002c6  0000              DCW      0x0000
                  |L3.712|
                          DCD      0x40020000
                  |L3.716|
                          DCD      0x40011000
                  |L3.720|
                          DCD      0x40004400
                  |L3.724|
                          DCD      0x40020400
                  |L3.728|
                          DCD      0x40004800
                  |L3.732|
                          DCD      0x40021800
                  |L3.736|
                          DCD      0x40020800
                  |L3.740|
                          DCD      0x40011400

                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;1078   #if UART1_FIFO_EN == 1
;;;1079   void USART1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1080   {
;;;1081   	UartIRQ(&g_tUart1);
000002  4802              LDR      r0,|L4.12|
000004  f7fffffe          BL       UartIRQ
;;;1082   }
000008  bd10              POP      {r4,pc}
;;;1083   #endif
                          ENDP

00000a  0000              DCW      0x0000
                  |L4.12|
                          DCD      g_tUart1

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;1085   #if UART2_FIFO_EN == 1
;;;1086   void USART2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1087   {
;;;1088   	UartIRQ(&g_tUart2);
000002  4802              LDR      r0,|L5.12|
000004  f7fffffe          BL       UartIRQ
;;;1089   }
000008  bd10              POP      {r4,pc}
;;;1090   #endif
                          ENDP

00000a  0000              DCW      0x0000
                  |L5.12|
                          DCD      g_tUart2

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;1092   #if UART3_FIFO_EN == 1
;;;1093   void USART3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1094   {
;;;1095   	UartIRQ(&g_tUart3);
000002  4802              LDR      r0,|L6.12|
000004  f7fffffe          BL       UartIRQ
;;;1096   }
000008  bd10              POP      {r4,pc}
;;;1097   #endif
                          ENDP

00000a  0000              DCW      0x0000
                  |L6.12|
                          DCD      g_tUart3

                          AREA ||i.USART3_SendBefor||, CODE, READONLY, ALIGN=2

                  USART3_SendBefor PROC
;;;268    */
;;;269    void USART3_SendBefor(void)
000000  2004              MOVS     r0,#4
;;;270    {
;;;271    	RS485_TX_EN();	/* 切换RS485收发芯片为发送模式 */
000002  4901              LDR      r1,|L7.8|
000004  8008              STRH     r0,[r1,#0]
;;;272    }
000006  4770              BX       lr
;;;273    
                          ENDP

                  |L7.8|
                          DCD      0x40020418

                          AREA ||i.USART3_SendOver||, CODE, READONLY, ALIGN=2

                  USART3_SendOver PROC
;;;282    */
;;;283    void USART3_SendOver(void)
000000  2004              MOVS     r0,#4
;;;284    {
;;;285    	RS485_RX_EN();	/* 切换RS485收发芯片为接收模式 */
000002  4901              LDR      r1,|L8.8|
000004  8008              STRH     r0,[r1,#0]
;;;286    }
000006  4770              BX       lr
;;;287    
                          ENDP

                  |L8.8|
                          DCD      0x4002041a

                          AREA ||i.USART6_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART6_IRQHandler PROC
;;;1113   #if UART6_FIFO_EN == 1
;;;1114   void USART6_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1115   {
;;;1116   	UartIRQ(&g_tUart6);
000002  4802              LDR      r0,|L9.12|
000004  f7fffffe          BL       UartIRQ
;;;1117   }
000008  bd10              POP      {r4,pc}
;;;1118   #endif
                          ENDP

00000a  0000              DCW      0x0000
                  |L9.12|
                          DCD      g_tUart6

                          AREA ||i.UartGetChar||, CODE, READONLY, ALIGN=1

                  UartGetChar PROC
;;;949    */
;;;950    static uint8_t UartGetChar(UART_T *_pUart, uint8_t *_pByte)
000000  b570              PUSH     {r4-r6,lr}
;;;951    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;952    	uint16_t usCount;
;;;953    
;;;954    	/* usRxWrite 变量在中断函数中被改写，主程序读取该变量时，必须进行临界区保护 */
;;;955    	DISABLE_INT();
000006  2001              MOVS     r0,#1
000008  f7fffffe          BL       __set_PRIMASK
;;;956    	usCount = _pUart->usRxCount;
00000c  8b66              LDRH     r6,[r4,#0x1a]
;;;957    	ENABLE_INT();
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       __set_PRIMASK
;;;958    
;;;959    	/* 如果读和写索引相同，则返回0 */
;;;960    	//if (_pUart->usRxRead == usRxWrite)
;;;961    	if (usCount == 0)	/* 已经没有数据 */
000014  b90e              CBNZ     r6,|L10.26|
;;;962    	{
;;;963    		return 0;
000016  2000              MOVS     r0,#0
                  |L10.24|
;;;964    	}
;;;965    	else
;;;966    	{
;;;967    		*_pByte = _pUart->pRxBuf[_pUart->usRxRead];		/* 从串口接收FIFO取1个数据 */
;;;968    
;;;969    		/* 改写FIFO读索引 */
;;;970    		DISABLE_INT();
;;;971    		if (++_pUart->usRxRead >= _pUart->usRxBufSize)
;;;972    		{
;;;973    			_pUart->usRxRead = 0;
;;;974    		}
;;;975    		_pUart->usRxCount--;
;;;976    		ENABLE_INT();
;;;977    		return 1;
;;;978    	}
;;;979    }
000018  bd70              POP      {r4-r6,pc}
                  |L10.26|
00001a  8b21              LDRH     r1,[r4,#0x18]         ;967
00001c  68a0              LDR      r0,[r4,#8]            ;967
00001e  5c40              LDRB     r0,[r0,r1]            ;967
000020  7028              STRB     r0,[r5,#0]            ;967
000022  2001              MOVS     r0,#1                 ;970
000024  f7fffffe          BL       __set_PRIMASK
000028  8b20              LDRH     r0,[r4,#0x18]         ;971
00002a  1c40              ADDS     r0,r0,#1              ;971
00002c  b280              UXTH     r0,r0                 ;971
00002e  8320              STRH     r0,[r4,#0x18]         ;971
000030  89e1              LDRH     r1,[r4,#0xe]          ;971
000032  4288              CMP      r0,r1                 ;971
000034  db01              BLT      |L10.58|
000036  2000              MOVS     r0,#0                 ;973
000038  8320              STRH     r0,[r4,#0x18]         ;973
                  |L10.58|
00003a  8b60              LDRH     r0,[r4,#0x1a]         ;975
00003c  1e40              SUBS     r0,r0,#1              ;975
00003e  8360              STRH     r0,[r4,#0x1a]         ;975
000040  2000              MOVS     r0,#0                 ;976
000042  f7fffffe          BL       __set_PRIMASK
000046  2001              MOVS     r0,#1                 ;977
000048  e7e6              B        |L10.24|
;;;980    
                          ENDP


                          AREA ||i.UartIRQ||, CODE, READONLY, ALIGN=1

                  UartIRQ PROC
;;;988    */
;;;989    static void UartIRQ(UART_T *_pUart)
000000  b510              PUSH     {r4,lr}
;;;990    {
000002  4604              MOV      r4,r0
;;;991    	/* 处理接收中断  */
;;;992    	if (USART_GetITStatus(_pUart->uart, USART_IT_RXNE) != RESET)
000004  f2405125          MOV      r1,#0x525
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       USART_GetITStatus
00000e  b1e0              CBZ      r0,|L11.74|
;;;993    	{
;;;994    		/* 从串口接收数据寄存器读取数据存放到接收FIFO */
;;;995    		_pUart->pRxBuf[_pUart->usRxWrite] = USART_ReceiveData(_pUart->uart);
000010  6820              LDR      r0,[r4,#0]
000012  f7fffffe          BL       USART_ReceiveData
000016  8ae2              LDRH     r2,[r4,#0x16]
000018  68a1              LDR      r1,[r4,#8]
00001a  5488              STRB     r0,[r1,r2]
;;;996    		if (++_pUart->usRxWrite >= _pUart->usRxBufSize)
00001c  8ae0              LDRH     r0,[r4,#0x16]
00001e  1c40              ADDS     r0,r0,#1
000020  b280              UXTH     r0,r0
000022  82e0              STRH     r0,[r4,#0x16]
000024  89e1              LDRH     r1,[r4,#0xe]
000026  4288              CMP      r0,r1
000028  db01              BLT      |L11.46|
;;;997    		{
;;;998    			_pUart->usRxWrite = 0;
00002a  2000              MOVS     r0,#0
00002c  82e0              STRH     r0,[r4,#0x16]
                  |L11.46|
;;;999    		}
;;;1000   		if (_pUart->usRxCount < _pUart->usRxBufSize)
00002e  8b60              LDRH     r0,[r4,#0x1a]
000030  89e1              LDRH     r1,[r4,#0xe]
000032  4288              CMP      r0,r1
000034  da02              BGE      |L11.60|
;;;1001   		{
;;;1002   			_pUart->usRxCount++;
000036  8b60              LDRH     r0,[r4,#0x1a]
000038  1c40              ADDS     r0,r0,#1
00003a  8360              STRH     r0,[r4,#0x1a]
                  |L11.60|
;;;1003   		}
;;;1004   
;;;1005   		/* 回调函数,通知应用程序收到新数据,一般是发送1个消息或者设置一个标记 */
;;;1006   		//if (_pUart->usRxWrite == _pUart->usRxRead)
;;;1007   		if (_pUart->usRxCount == 1)
00003c  8b60              LDRH     r0,[r4,#0x1a]
00003e  2801              CMP      r0,#1
000040  d103              BNE      |L11.74|
;;;1008   		{
;;;1009   			if (_pUart->ReciveNew)
000042  6a60              LDR      r0,[r4,#0x24]
000044  b108              CBZ      r0,|L11.74|
;;;1010   			{
;;;1011   				_pUart->ReciveNew();
000046  6a60              LDR      r0,[r4,#0x24]
000048  4780              BLX      r0
                  |L11.74|
;;;1012   			}
;;;1013   		}		
;;;1014   	}
;;;1015   
;;;1016   	/* 处理发送缓冲区空中断 */
;;;1017   	if (USART_GetITStatus(_pUart->uart, USART_IT_TXE) != RESET)
00004a  f2407127          MOV      r1,#0x727
00004e  6820              LDR      r0,[r4,#0]
000050  f7fffffe          BL       USART_GetITStatus
000054  b308              CBZ      r0,|L11.154|
;;;1018   	{
;;;1019   		//if (_pUart->usTxRead == _pUart->usTxWrite)
;;;1020   		if (_pUart->usTxCount == 0)
000056  8aa0              LDRH     r0,[r4,#0x14]
000058  b960              CBNZ     r0,|L11.116|
;;;1021   		{
;;;1022   			/* 发送缓冲区的数据已取完时， 禁止发送缓冲区空中断 （注意：此时最后1个数据还未真正发送完毕）*/
;;;1023   			USART_ITConfig(_pUart->uart, USART_IT_TXE, DISABLE);
00005a  2200              MOVS     r2,#0
00005c  f2407127          MOV      r1,#0x727
000060  6820              LDR      r0,[r4,#0]
000062  f7fffffe          BL       USART_ITConfig
;;;1024   
;;;1025   			/* 使能数据发送完毕中断 */
;;;1026   			USART_ITConfig(_pUart->uart, USART_IT_TC, ENABLE);
000066  2201              MOVS     r2,#1
000068  f2406126          MOV      r1,#0x626
00006c  6820              LDR      r0,[r4,#0]
00006e  f7fffffe          BL       USART_ITConfig
000072  e037              B        |L11.228|
                  |L11.116|
;;;1027   		}
;;;1028   		else
;;;1029   		{
;;;1030   			/* 从发送FIFO取1个字节写入串口发送数据寄存器 */
;;;1031   			USART_SendData(_pUart->uart, _pUart->pTxBuf[_pUart->usTxRead]);
000074  8a63              LDRH     r3,[r4,#0x12]
000076  6862              LDR      r2,[r4,#4]
000078  5cd1              LDRB     r1,[r2,r3]
00007a  6820              LDR      r0,[r4,#0]
00007c  f7fffffe          BL       USART_SendData
;;;1032   			if (++_pUart->usTxRead >= _pUart->usTxBufSize)
000080  8a60              LDRH     r0,[r4,#0x12]
000082  1c40              ADDS     r0,r0,#1
000084  b280              UXTH     r0,r0
000086  8260              STRH     r0,[r4,#0x12]
000088  89a1              LDRH     r1,[r4,#0xc]
00008a  4288              CMP      r0,r1
00008c  db01              BLT      |L11.146|
;;;1033   			{
;;;1034   				_pUart->usTxRead = 0;
00008e  2000              MOVS     r0,#0
000090  8260              STRH     r0,[r4,#0x12]
                  |L11.146|
;;;1035   			}
;;;1036   			_pUart->usTxCount--;
000092  8aa0              LDRH     r0,[r4,#0x14]
000094  1e40              SUBS     r0,r0,#1
000096  82a0              STRH     r0,[r4,#0x14]
000098  e024              B        |L11.228|
                  |L11.154|
;;;1037   		}
;;;1038   
;;;1039   	}
;;;1040   	/* 数据bit位全部发送完毕的中断 */
;;;1041   	else if (USART_GetITStatus(_pUart->uart, USART_IT_TC) != RESET)
00009a  f2406126          MOV      r1,#0x626
00009e  6820              LDR      r0,[r4,#0]
0000a0  f7fffffe          BL       USART_GetITStatus
0000a4  b1f0              CBZ      r0,|L11.228|
;;;1042   	{
;;;1043   		//if (_pUart->usTxRead == _pUart->usTxWrite)
;;;1044   		if (_pUart->usTxCount == 0)
0000a6  8aa0              LDRH     r0,[r4,#0x14]
0000a8  b950              CBNZ     r0,|L11.192|
;;;1045   		{
;;;1046   			/* 如果发送FIFO的数据全部发送完毕，禁止数据发送完毕中断 */
;;;1047   			USART_ITConfig(_pUart->uart, USART_IT_TC, DISABLE);
0000aa  2200              MOVS     r2,#0
0000ac  f2406126          MOV      r1,#0x626
0000b0  6820              LDR      r0,[r4,#0]
0000b2  f7fffffe          BL       USART_ITConfig
;;;1048   
;;;1049   			/* 回调函数, 一般用来处理RS485通信，将RS485芯片设置为接收模式，避免抢占总线 */
;;;1050   			if (_pUart->SendOver)
0000b6  6a20              LDR      r0,[r4,#0x20]
0000b8  b1a0              CBZ      r0,|L11.228|
;;;1051   			{
;;;1052   				_pUart->SendOver();
0000ba  6a20              LDR      r0,[r4,#0x20]
0000bc  4780              BLX      r0
0000be  e011              B        |L11.228|
                  |L11.192|
;;;1053   			}
;;;1054   		}
;;;1055   		else
;;;1056   		{
;;;1057   			/* 正常情况下，不会进入此分支 */
;;;1058   			
;;;1059   			/* 如果发送FIFO的数据还未完毕，则从发送FIFO取1个数据写入发送数据寄存器 */
;;;1060   			USART_SendData(_pUart->uart, _pUart->pTxBuf[_pUart->usTxRead]);
0000c0  8a63              LDRH     r3,[r4,#0x12]
0000c2  6862              LDR      r2,[r4,#4]
0000c4  5cd1              LDRB     r1,[r2,r3]
0000c6  6820              LDR      r0,[r4,#0]
0000c8  f7fffffe          BL       USART_SendData
;;;1061   			if (++_pUart->usTxRead >= _pUart->usTxBufSize)
0000cc  8a60              LDRH     r0,[r4,#0x12]
0000ce  1c40              ADDS     r0,r0,#1
0000d0  b280              UXTH     r0,r0
0000d2  8260              STRH     r0,[r4,#0x12]
0000d4  89a1              LDRH     r1,[r4,#0xc]
0000d6  4288              CMP      r0,r1
0000d8  db01              BLT      |L11.222|
;;;1062   			{
;;;1063   				_pUart->usTxRead = 0;
0000da  2000              MOVS     r0,#0
0000dc  8260              STRH     r0,[r4,#0x12]
                  |L11.222|
;;;1064   			}
;;;1065   			_pUart->usTxCount--;
0000de  8aa0              LDRH     r0,[r4,#0x14]
0000e0  1e40              SUBS     r0,r0,#1
0000e2  82a0              STRH     r0,[r4,#0x14]
                  |L11.228|
;;;1066   		}
;;;1067   	}
;;;1068   }
0000e4  bd10              POP      {r4,pc}
;;;1069   
                          ENDP


                          AREA ||i.UartSend||, CODE, READONLY, ALIGN=1

                  UartSend PROC
;;;878    */
;;;879    static void UartSend(UART_T *_pUart, uint8_t *_ucaBuf, uint16_t _usLen)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;880    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;881    	uint16_t i;
;;;882    
;;;883    	for (i = 0; i < _usLen; i++)
00000a  2500              MOVS     r5,#0
00000c  e027              B        |L12.94|
                  |L12.14|
;;;884    	{
;;;885    		/* 如果发送缓冲区已经满了，则等待缓冲区空 */		
;;;886    	#if 0
;;;887    		/* 
;;;888    			在调试GPRS例程时，下面的代码出现死机，while 死循环
;;;889    			原因： 发送第1个字节时 _pUart->usTxWrite = 1；_pUart->usTxRead = 0;
;;;890    			将导致while(1) 无法退出
;;;891    		*/
;;;892    		while (1)
;;;893    		{
;;;894    			uint16_t usRead;
;;;895    
;;;896    			DISABLE_INT();
;;;897    			usRead = _pUart->usTxRead;
;;;898    			ENABLE_INT();
;;;899    
;;;900    			if (++usRead >= _pUart->usTxBufSize)
;;;901    			{
;;;902    				usRead = 0;
;;;903    			}
;;;904    
;;;905    			if (usRead != _pUart->usTxWrite)
;;;906    			{
;;;907    				break;
;;;908    			}
;;;909    		}
;;;910    	#else
;;;911    		while (1)
00000e  e00c              B        |L12.42|
                  |L12.16|
;;;912    		{
;;;913    			uint16_t usCount;
;;;914    
;;;915    			DISABLE_INT();
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       __set_PRIMASK
;;;916    			usCount = _pUart->usTxCount;
000016  f8b48014          LDRH     r8,[r4,#0x14]
;;;917    			ENABLE_INT();
00001a  2000              MOVS     r0,#0
00001c  f7fffffe          BL       __set_PRIMASK
;;;918    
;;;919    			if (usCount < _pUart->usTxBufSize)
000020  89a0              LDRH     r0,[r4,#0xc]
000022  4540              CMP      r0,r8
000024  dd00              BLE      |L12.40|
;;;920    			{
;;;921    				break;
000026  e001              B        |L12.44|
                  |L12.40|
;;;922    			}
;;;923    		}			
000028  bf00              NOP      
                  |L12.42|
00002a  e7f1              B        |L12.16|
                  |L12.44|
00002c  bf00              NOP                            ;921
;;;924    	#endif
;;;925    
;;;926    		/* 将新数据填入发送缓冲区 */
;;;927    		_pUart->pTxBuf[_pUart->usTxWrite] = _ucaBuf[i];
00002e  5d70              LDRB     r0,[r6,r5]
000030  8a22              LDRH     r2,[r4,#0x10]
000032  6861              LDR      r1,[r4,#4]
000034  5488              STRB     r0,[r1,r2]
;;;928    
;;;929    		DISABLE_INT();
000036  2001              MOVS     r0,#1
000038  f7fffffe          BL       __set_PRIMASK
;;;930    		if (++_pUart->usTxWrite >= _pUart->usTxBufSize)
00003c  8a20              LDRH     r0,[r4,#0x10]
00003e  1c40              ADDS     r0,r0,#1
000040  b280              UXTH     r0,r0
000042  8220              STRH     r0,[r4,#0x10]
000044  89a1              LDRH     r1,[r4,#0xc]
000046  4288              CMP      r0,r1
000048  db01              BLT      |L12.78|
;;;931    		{
;;;932    			_pUart->usTxWrite = 0;
00004a  2000              MOVS     r0,#0
00004c  8220              STRH     r0,[r4,#0x10]
                  |L12.78|
;;;933    		}
;;;934    		_pUart->usTxCount++;
00004e  8aa0              LDRH     r0,[r4,#0x14]
000050  1c40              ADDS     r0,r0,#1
000052  82a0              STRH     r0,[r4,#0x14]
;;;935    		ENABLE_INT();
000054  2000              MOVS     r0,#0
000056  f7fffffe          BL       __set_PRIMASK
00005a  1c68              ADDS     r0,r5,#1              ;883
00005c  b285              UXTH     r5,r0                 ;883
                  |L12.94|
00005e  42bd              CMP      r5,r7                 ;883
000060  dbd5              BLT      |L12.14|
;;;936    	}
;;;937    
;;;938    	USART_ITConfig(_pUart->uart, USART_IT_TXE, ENABLE);
000062  2201              MOVS     r2,#1
000064  f2407127          MOV      r1,#0x727
000068  6820              LDR      r0,[r4,#0]
00006a  f7fffffe          BL       USART_ITConfig
;;;939    }
00006e  e8bd81f0          POP      {r4-r8,pc}
;;;940    
                          ENDP


                          AREA ||i.UartVarInit||, CODE, READONLY, ALIGN=2

                  UartVarInit PROC
;;;295    */
;;;296    static void UartVarInit(void)
000000  482b              LDR      r0,|L13.176|
;;;297    {
;;;298    #if UART1_FIFO_EN == 1
;;;299    	g_tUart1.uart = USART1;						/* STM32 串口设备 */
000002  492c              LDR      r1,|L13.180|
000004  6008              STR      r0,[r1,#0]  ; g_tUart1
;;;300    	g_tUart1.pTxBuf = g_TxBuf1;					/* 发送缓冲区指针 */
000006  482c              LDR      r0,|L13.184|
000008  6048              STR      r0,[r1,#4]  ; g_tUart1
;;;301    	g_tUart1.pRxBuf = g_RxBuf1;					/* 接收缓冲区指针 */
00000a  482c              LDR      r0,|L13.188|
00000c  6088              STR      r0,[r1,#8]  ; g_tUart1
;;;302    	g_tUart1.usTxBufSize = UART1_TX_BUF_SIZE;	/* 发送缓冲区大小 */
00000e  f44f6080          MOV      r0,#0x400
000012  8188              STRH     r0,[r1,#0xc]
;;;303    	g_tUart1.usRxBufSize = UART1_RX_BUF_SIZE;	/* 接收缓冲区大小 */
000014  81c8              STRH     r0,[r1,#0xe]
;;;304    	g_tUart1.usTxWrite = 0;						/* 发送FIFO写索引 */
000016  2000              MOVS     r0,#0
000018  8208              STRH     r0,[r1,#0x10]
;;;305    	g_tUart1.usTxRead = 0;						/* 发送FIFO读索引 */
00001a  8248              STRH     r0,[r1,#0x12]
;;;306    	g_tUart1.usRxWrite = 0;						/* 接收FIFO写索引 */
00001c  82c8              STRH     r0,[r1,#0x16]
;;;307    	g_tUart1.usRxRead = 0;						/* 接收FIFO读索引 */
00001e  8308              STRH     r0,[r1,#0x18]
;;;308    	g_tUart1.usRxCount = 0;						/* 接收到的新数据个数 */
000020  8348              STRH     r0,[r1,#0x1a]
;;;309    	g_tUart1.usTxCount = 0;						/* 待发送的数据个数 */
000022  8288              STRH     r0,[r1,#0x14]
;;;310    	g_tUart1.SendBefor = 0;						/* 发送数据前的回调函数 */
000024  61c8              STR      r0,[r1,#0x1c]  ; g_tUart1
;;;311    	g_tUart1.SendOver = 0;						/* 发送完毕后的回调函数 */
000026  6208              STR      r0,[r1,#0x20]  ; g_tUart1
;;;312    	g_tUart1.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
000028  6248              STR      r0,[r1,#0x24]  ; g_tUart1
;;;313    #endif
;;;314    
;;;315    #if UART2_FIFO_EN == 1
;;;316    	g_tUart2.uart = USART2;						/* STM32 串口设备 */
00002a  4825              LDR      r0,|L13.192|
00002c  4925              LDR      r1,|L13.196|
00002e  6008              STR      r0,[r1,#0]  ; g_tUart2
;;;317    	g_tUart2.pTxBuf = g_TxBuf2;					/* 发送缓冲区指针 */
000030  4825              LDR      r0,|L13.200|
000032  6048              STR      r0,[r1,#4]  ; g_tUart2
;;;318    	g_tUart2.pRxBuf = g_RxBuf2;					/* 接收缓冲区指针 */
000034  4825              LDR      r0,|L13.204|
000036  6088              STR      r0,[r1,#8]  ; g_tUart2
;;;319    	g_tUart2.usTxBufSize = UART2_TX_BUF_SIZE;	/* 发送缓冲区大小 */
000038  2001              MOVS     r0,#1
00003a  8188              STRH     r0,[r1,#0xc]
;;;320    	g_tUart2.usRxBufSize = UART2_RX_BUF_SIZE;	/* 接收缓冲区大小 */
00003c  02c0              LSLS     r0,r0,#11
00003e  81c8              STRH     r0,[r1,#0xe]
;;;321    	g_tUart2.usTxWrite = 0;						/* 发送FIFO写索引 */
000040  2000              MOVS     r0,#0
000042  8208              STRH     r0,[r1,#0x10]
;;;322    	g_tUart2.usTxRead = 0;						/* 发送FIFO读索引 */
000044  8248              STRH     r0,[r1,#0x12]
;;;323    	g_tUart2.usRxWrite = 0;						/* 接收FIFO写索引 */
000046  82c8              STRH     r0,[r1,#0x16]
;;;324    	g_tUart2.usRxRead = 0;						/* 接收FIFO读索引 */
000048  8308              STRH     r0,[r1,#0x18]
;;;325    	g_tUart2.usRxCount = 0;						/* 接收到的新数据个数 */
00004a  8348              STRH     r0,[r1,#0x1a]
;;;326    	g_tUart2.usTxCount = 0;						/* 待发送的数据个数 */	
00004c  8288              STRH     r0,[r1,#0x14]
;;;327    	g_tUart2.SendBefor = 0;						/* 发送数据前的回调函数 */
00004e  61c8              STR      r0,[r1,#0x1c]  ; g_tUart2
;;;328    	g_tUart2.SendOver = 0;						/* 发送完毕后的回调函数 */
000050  6208              STR      r0,[r1,#0x20]  ; g_tUart2
;;;329    	g_tUart2.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
000052  6248              STR      r0,[r1,#0x24]  ; g_tUart2
;;;330    #endif
;;;331    
;;;332    #if UART3_FIFO_EN == 1
;;;333    	g_tUart3.uart = USART3;						/* STM32 串口设备 */
000054  481e              LDR      r0,|L13.208|
000056  491f              LDR      r1,|L13.212|
000058  6008              STR      r0,[r1,#0]  ; g_tUart3
;;;334    	g_tUart3.pTxBuf = g_TxBuf3;					/* 发送缓冲区指针 */
00005a  481f              LDR      r0,|L13.216|
00005c  6048              STR      r0,[r1,#4]  ; g_tUart3
;;;335    	g_tUart3.pRxBuf = g_RxBuf3;					/* 接收缓冲区指针 */
00005e  481f              LDR      r0,|L13.220|
000060  6088              STR      r0,[r1,#8]  ; g_tUart3
;;;336    	g_tUart3.usTxBufSize = UART3_TX_BUF_SIZE;	/* 发送缓冲区大小 */
000062  f44f6080          MOV      r0,#0x400
000066  8188              STRH     r0,[r1,#0xc]
;;;337    	g_tUart3.usRxBufSize = UART3_RX_BUF_SIZE;	/* 接收缓冲区大小 */
000068  81c8              STRH     r0,[r1,#0xe]
;;;338    	g_tUart3.usTxWrite = 0;						/* 发送FIFO写索引 */
00006a  2000              MOVS     r0,#0
00006c  8208              STRH     r0,[r1,#0x10]
;;;339    	g_tUart3.usTxRead = 0;						/* 发送FIFO读索引 */
00006e  8248              STRH     r0,[r1,#0x12]
;;;340    	g_tUart3.usRxWrite = 0;						/* 接收FIFO写索引 */
000070  82c8              STRH     r0,[r1,#0x16]
;;;341    	g_tUart3.usRxRead = 0;						/* 接收FIFO读索引 */
000072  8308              STRH     r0,[r1,#0x18]
;;;342    	g_tUart3.usRxCount = 0;						/* 接收到的新数据个数 */
000074  8348              STRH     r0,[r1,#0x1a]
;;;343    	g_tUart3.usTxCount = 0;						/* 待发送的数据个数 */	
000076  8288              STRH     r0,[r1,#0x14]
;;;344    	g_tUart3.SendBefor = USART3_SendBefor;		/* 发送数据前的回调函数 */
000078  4819              LDR      r0,|L13.224|
00007a  61c8              STR      r0,[r1,#0x1c]  ; g_tUart3
;;;345    	g_tUart3.SendOver = USART3_SendOver;		/* 发送完毕后的回调函数 */
00007c  4819              LDR      r0,|L13.228|
00007e  6208              STR      r0,[r1,#0x20]  ; g_tUart3
;;;346    	g_tUart3.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
000080  2000              MOVS     r0,#0
000082  6248              STR      r0,[r1,#0x24]  ; g_tUart3
;;;347    #endif
;;;348    
;;;349    #if UART4_FIFO_EN == 1
;;;350    	g_tUart4.uart = UART4;						/* STM32 串口设备 */
;;;351    	g_tUart4.pTxBuf = g_TxBuf4;					/* 发送缓冲区指针 */
;;;352    	g_tUart4.pRxBuf = g_RxBuf4;					/* 接收缓冲区指针 */
;;;353    	g_tUart4.usTxBufSize = UART4_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;354    	g_tUart4.usRxBufSize = UART4_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;355    	g_tUart4.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;356    	g_tUart4.usTxRead = 0;						/* 发送FIFO读索引 */
;;;357    	g_tUart4.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;358    	g_tUart4.usRxRead = 0;						/* 接收FIFO读索引 */
;;;359    	g_tUart4.usRxCount = 0;						/* 接收到的新数据个数 */
;;;360    	g_tUart4.usTxCount = 0;						/* 待发送的数据个数 */	
;;;361    	g_tUart4.SendBefor = 0;						/* 发送数据前的回调函数 */
;;;362    	g_tUart4.SendOver = 0;						/* 发送完毕后的回调函数 */
;;;363    	g_tUart4.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
;;;364    #endif
;;;365    
;;;366    #if UART5_FIFO_EN == 1
;;;367    	g_tUart5.uart = UART5;						/* STM32 串口设备 */
;;;368    	g_tUart5.pTxBuf = g_TxBuf5;					/* 发送缓冲区指针 */
;;;369    	g_tUart5.pRxBuf = g_RxBuf5;					/* 接收缓冲区指针 */
;;;370    	g_tUart5.usTxBufSize = UART5_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;371    	g_tUart5.usRxBufSize = UART5_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;372    	g_tUart5.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;373    	g_tUart5.usTxRead = 0;						/* 发送FIFO读索引 */
;;;374    	g_tUart5.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;375    	g_tUart5.usRxRead = 0;						/* 接收FIFO读索引 */
;;;376    	g_tUart5.usRxCount = 0;						/* 接收到的新数据个数 */
;;;377    	g_tUart5.usTxCount = 0;						/* 待发送的数据个数 */	
;;;378    	g_tUart5.SendBefor = 0;						/* 发送数据前的回调函数 */
;;;379    	g_tUart5.SendOver = 0;						/* 发送完毕后的回调函数 */
;;;380    	g_tUart5.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
;;;381    #endif
;;;382    
;;;383    
;;;384    #if UART6_FIFO_EN == 1
;;;385    	g_tUart6.uart = USART6;						/* STM32 串口设备 */
000084  4818              LDR      r0,|L13.232|
000086  4919              LDR      r1,|L13.236|
000088  6008              STR      r0,[r1,#0]  ; g_tUart6
;;;386    	g_tUart6.pTxBuf = g_TxBuf6;					/* 发送缓冲区指针 */
00008a  4819              LDR      r0,|L13.240|
00008c  6048              STR      r0,[r1,#4]  ; g_tUart6
;;;387    	g_tUart6.pRxBuf = g_RxBuf6;					/* 接收缓冲区指针 */
00008e  4819              LDR      r0,|L13.244|
000090  6088              STR      r0,[r1,#8]  ; g_tUart6
;;;388    	g_tUart6.usTxBufSize = UART6_TX_BUF_SIZE;	/* 发送缓冲区大小 */
000092  f44f6080          MOV      r0,#0x400
000096  8188              STRH     r0,[r1,#0xc]
;;;389    	g_tUart6.usRxBufSize = UART6_RX_BUF_SIZE;	/* 接收缓冲区大小 */
000098  81c8              STRH     r0,[r1,#0xe]
;;;390    	g_tUart6.usTxWrite = 0;						/* 发送FIFO写索引 */
00009a  2000              MOVS     r0,#0
00009c  8208              STRH     r0,[r1,#0x10]
;;;391    	g_tUart6.usTxRead = 0;						/* 发送FIFO读索引 */
00009e  8248              STRH     r0,[r1,#0x12]
;;;392    	g_tUart6.usRxWrite = 0;						/* 接收FIFO写索引 */
0000a0  82c8              STRH     r0,[r1,#0x16]
;;;393    	g_tUart6.usRxRead = 0;						/* 接收FIFO读索引 */
0000a2  8308              STRH     r0,[r1,#0x18]
;;;394    	g_tUart6.usRxCount = 0;						/* 接收到的新数据个数 */
0000a4  8348              STRH     r0,[r1,#0x1a]
;;;395    	g_tUart6.usTxCount = 0;						/* 待发送的数据个数 */	
0000a6  8288              STRH     r0,[r1,#0x14]
;;;396    	g_tUart6.SendBefor = 0;						/* 发送数据前的回调函数 */
0000a8  61c8              STR      r0,[r1,#0x1c]  ; g_tUart6
;;;397    	g_tUart6.SendOver = 0;						/* 发送完毕后的回调函数 */
0000aa  6208              STR      r0,[r1,#0x20]  ; g_tUart6
;;;398    	g_tUart6.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
0000ac  6248              STR      r0,[r1,#0x24]  ; g_tUart6
;;;399    #endif
;;;400    }
0000ae  4770              BX       lr
;;;401    
                          ENDP

                  |L13.176|
                          DCD      0x40011000
                  |L13.180|
                          DCD      g_tUart1
                  |L13.184|
                          DCD      g_TxBuf1
                  |L13.188|
                          DCD      g_RxBuf1
                  |L13.192|
                          DCD      0x40004400
                  |L13.196|
                          DCD      g_tUart2
                  |L13.200|
                          DCD      g_TxBuf2
                  |L13.204|
                          DCD      g_RxBuf2
                  |L13.208|
                          DCD      0x40004800
                  |L13.212|
                          DCD      g_tUart3
                  |L13.216|
                          DCD      g_TxBuf3
                  |L13.220|
                          DCD      g_RxBuf3
                  |L13.224|
                          DCD      USART3_SendBefor
                  |L13.228|
                          DCD      USART3_SendOver
                  |L13.232|
                          DCD      0x40011400
                  |L13.236|
                          DCD      g_tUart6
                  |L13.240|
                          DCD      g_TxBuf6
                  |L13.244|
                          DCD      g_RxBuf6

                          AREA ||i.__set_PRIMASK||, CODE, READONLY, ALIGN=1

                  __set_PRIMASK PROC
;;;193     */
;;;194    __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
000000  f3808810          MSR      PRIMASK,r0
;;;195    {
;;;196      register uint32_t __regPriMask         __ASM("primask");
;;;197      __regPriMask = (priMask);
;;;198    }
000004  4770              BX       lr
;;;199    
                          ENDP


                          AREA ||i.bsp_InitUart||, CODE, READONLY, ALIGN=1

                  bsp_InitUart PROC
;;;73     */
;;;74     void bsp_InitUart(void)
000000  b510              PUSH     {r4,lr}
;;;75     {
;;;76     	UartVarInit();		/* 必须先初始化全局变量,再配置硬件 */
000002  f7fffffe          BL       UartVarInit
;;;77     
;;;78     	InitHardUart();		/* 配置串口的硬件参数(波特率等) */
000006  f7fffffe          BL       InitHardUart
;;;79     
;;;80     	ConfigUartNVIC();	/* 配置串口中断 */
00000a  f7fffffe          BL       ConfigUartNVIC
;;;81     }
00000e  bd10              POP      {r4,pc}
;;;82     
                          ENDP


                          AREA ||i.comClearRxFifo||, CODE, READONLY, ALIGN=1

                  comClearRxFifo PROC
;;;242    */
;;;243    void comClearRxFifo(COM_PORT_E _ucPort)
000000  b500              PUSH     {lr}
;;;244    {
000002  4603              MOV      r3,r0
;;;245    	UART_T *pUart;
;;;246    
;;;247    	pUart = ComToUart(_ucPort);
000004  4618              MOV      r0,r3
000006  f7fffffe          BL       ComToUart
00000a  4602              MOV      r2,r0
;;;248    	if (pUart == 0)
00000c  b902              CBNZ     r2,|L16.16|
                  |L16.14|
;;;249    	{
;;;250    		return;
;;;251    	}
;;;252    
;;;253    	pUart->usRxWrite = 0;
;;;254    	pUart->usRxRead = 0;
;;;255    	pUart->usRxCount = 0;
;;;256    }
00000e  bd00              POP      {pc}
                  |L16.16|
000010  2000              MOVS     r0,#0                 ;253
000012  82d0              STRH     r0,[r2,#0x16]         ;253
000014  8310              STRH     r0,[r2,#0x18]         ;254
000016  8350              STRH     r0,[r2,#0x1a]         ;255
000018  bf00              NOP      
00001a  e7f8              B        |L16.14|
;;;257    
                          ENDP


                          AREA ||i.comClearTxFifo||, CODE, READONLY, ALIGN=1

                  comClearTxFifo PROC
;;;219    */
;;;220    void comClearTxFifo(COM_PORT_E _ucPort)
000000  b500              PUSH     {lr}
;;;221    {
000002  4603              MOV      r3,r0
;;;222    	UART_T *pUart;
;;;223    
;;;224    	pUart = ComToUart(_ucPort);
000004  4618              MOV      r0,r3
000006  f7fffffe          BL       ComToUart
00000a  4602              MOV      r2,r0
;;;225    	if (pUart == 0)
00000c  b902              CBNZ     r2,|L17.16|
                  |L17.14|
;;;226    	{
;;;227    		return;
;;;228    	}
;;;229    
;;;230    	pUart->usTxWrite = 0;
;;;231    	pUart->usTxRead = 0;
;;;232    	pUart->usTxCount = 0;
;;;233    }
00000e  bd00              POP      {pc}
                  |L17.16|
000010  2000              MOVS     r0,#0                 ;230
000012  8210              STRH     r0,[r2,#0x10]         ;230
000014  8250              STRH     r0,[r2,#0x12]         ;231
000016  8290              STRH     r0,[r2,#0x14]         ;232
000018  bf00              NOP      
00001a  e7f8              B        |L17.14|
;;;234    
                          ENDP


                          AREA ||i.comGetChar||, CODE, READONLY, ALIGN=1

                  comGetChar PROC
;;;198    */
;;;199    uint8_t comGetChar(COM_PORT_E _ucPort, uint8_t *_pByte)
000000  b570              PUSH     {r4-r6,lr}
;;;200    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;201    	UART_T *pUart;
;;;202    
;;;203    	pUart = ComToUart(_ucPort);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       ComToUart
00000c  4604              MOV      r4,r0
;;;204    	if (pUart == 0)
00000e  b90c              CBNZ     r4,|L18.20|
;;;205    	{
;;;206    		return 0;
000010  2000              MOVS     r0,#0
                  |L18.18|
;;;207    	}
;;;208    
;;;209    	return UartGetChar(pUart, _pByte);
;;;210    }
000012  bd70              POP      {r4-r6,pc}
                  |L18.20|
000014  4631              MOV      r1,r6                 ;209
000016  4620              MOV      r0,r4                 ;209
000018  f7fffffe          BL       UartGetChar
00001c  e7f9              B        |L18.18|
;;;211    
                          ENDP


                          AREA ||i.comSendBuf||, CODE, READONLY, ALIGN=1

                  comSendBuf PROC
;;;157    */
;;;158    void comSendBuf(COM_PORT_E _ucPort, uint8_t *_ucaBuf, uint16_t _usLen)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;159    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;160    	UART_T *pUart;
;;;161    
;;;162    	pUart = ComToUart(_ucPort);
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       ComToUart
000010  4604              MOV      r4,r0
;;;163    	if (pUart == 0)
000012  b90c              CBNZ     r4,|L19.24|
                  |L19.20|
;;;164    	{
;;;165    		return;
;;;166    	}
;;;167    
;;;168    	if (pUart->SendBefor != 0)
;;;169    	{
;;;170    		pUart->SendBefor();		/* 如果是RS485通信，可以在这个函数中将RS485设置为发送模式 */
;;;171    	}
;;;172    
;;;173    	UartSend(pUart, _ucaBuf, _usLen);
;;;174    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L19.24|
000018  69e0              LDR      r0,[r4,#0x1c]         ;168
00001a  b108              CBZ      r0,|L19.32|
00001c  69e0              LDR      r0,[r4,#0x1c]         ;170
00001e  4780              BLX      r0                    ;170
                  |L19.32|
000020  463a              MOV      r2,r7                 ;173
000022  4631              MOV      r1,r6                 ;173
000024  4620              MOV      r0,r4                 ;173
000026  f7fffffe          BL       UartSend
00002a  bf00              NOP      
00002c  e7f2              B        |L19.20|
;;;175    
                          ENDP


                          AREA ||i.comSendChar||, CODE, READONLY, ALIGN=1

                  comSendChar PROC
;;;184    */
;;;185    void comSendChar(COM_PORT_E _ucPort, uint8_t _ucByte)
000000  b513              PUSH     {r0,r1,r4,lr}
;;;186    {
000002  4604              MOV      r4,r0
;;;187    	comSendBuf(_ucPort, &_ucByte, 1);
000004  2201              MOVS     r2,#1
000006  a901              ADD      r1,sp,#4
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       comSendBuf
;;;188    }
00000e  bd1c              POP      {r2-r4,pc}
;;;189    
                          ENDP


                          AREA ||i.fgetc||, CODE, READONLY, ALIGN=1

                  fgetc PROC
;;;1153   */
;;;1154   int fgetc(FILE *f)
000000  b538              PUSH     {r3-r5,lr}
;;;1155   {
000002  4604              MOV      r4,r0
;;;1156   
;;;1157   #if 1	/* 从串口接收FIFO中取1个数据, 只有取到数据才返回 */
;;;1158   	uint8_t ucData;
;;;1159   
;;;1160   	while(comGetChar(COM1, &ucData) == 0);
000004  bf00              NOP      
                  |L21.6|
000006  4669              MOV      r1,sp
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       comGetChar
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L21.6|
;;;1161   
;;;1162   	return ucData;
000012  f89d0000          LDRB     r0,[sp,#0]
;;;1163   #else
;;;1164   	/* 等待串口1输入数据 */
;;;1165   	while (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET);
;;;1166   
;;;1167   	return (int)USART_ReceiveData(USART1);
;;;1168   #endif
;;;1169   }
000016  bd38              POP      {r3-r5,pc}
;;;1170   
                          ENDP


                          AREA ||i.fputc||, CODE, READONLY, ALIGN=1

                  fputc PROC
;;;1127   */
;;;1128   int fputc(int ch, FILE *f)
000000  b570              PUSH     {r4-r6,lr}
;;;1129   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1130   #if 1	/* 将需要printf的字符通过串口中断FIFO发送出去，printf函数会立即返回 */
;;;1131   	comSendChar(COM1, ch);
000006  b2e1              UXTB     r1,r4
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       comSendChar
;;;1132   
;;;1133   	return ch;
00000e  4620              MOV      r0,r4
;;;1134   #else	/* 采用阻塞方式发送每个字符,等待数据发送完毕 */
;;;1135   	/* 写一个字节到USART1 */
;;;1136   	USART_SendData(USART1, (uint8_t) ch);
;;;1137   
;;;1138   	/* 等待发送结束 */
;;;1139   	while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
;;;1140   	{}
;;;1141   
;;;1142   	return ch;
;;;1143   #endif
;;;1144   }
000010  bd70              POP      {r4-r6,pc}
;;;1145   
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_tUart1
                          %        40
                  g_TxBuf1
                          %        1024
                  g_RxBuf1
                          %        1024
                  g_tUart2
                          %        40
                  g_RxBuf2
                          %        2048
                  g_tUart3
                          %        40
                  g_TxBuf3
                          %        1024
                  g_RxBuf3
                          %        1024
                  g_tUart6
                          %        40
                  g_TxBuf6
                          %        1024
                  g_RxBuf6
                          %        1024

                          AREA ||.data||, DATA, ALIGN=0

                  g_TxBuf2
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_uart_fifo.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_uart_fifo_c_b28b0d00____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_bsp_uart_fifo_c_b28b0d00____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_uart_fifo_c_b28b0d00____REVSH|
#line 144
|__asm___15_bsp_uart_fifo_c_b28b0d00____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
