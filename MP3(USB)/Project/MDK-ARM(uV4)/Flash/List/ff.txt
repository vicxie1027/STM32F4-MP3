; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\ff.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\ff.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc -I..\..\Libraries\STM32_USB_HOST_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbh_mass_storage -I..\..\User\bsp_stm32f4xx\inc -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_HS -DUSE_EMBEDDED_PHY --omf_browse=.\flash\obj\ff.crf ..\..\User\FatFS\src\ff.c]
                          THUMB

                          AREA ||i.check_fs||, CODE, READONLY, ALIGN=2

                  check_fs PROC
;;;2040   static
;;;2041   BYTE check_fs (	/* 0:FAT-VBR, 1:Any BR but not FAT, 2:Not a BR, 3:Disk error */
000000  b570              PUSH     {r4-r6,lr}
;;;2042   	FATFS *fs,	/* File system object */
;;;2043   	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
;;;2044   )
;;;2045   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2046   	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
000006  7860              LDRB     r0,[r4,#1]
000008  2301              MOVS     r3,#1
00000a  462a              MOV      r2,r5
00000c  f1040134          ADD      r1,r4,#0x34
000010  f7fffffe          BL       disk_read
000014  b108              CBZ      r0,|L1.26|
;;;2047   		return 3;
000016  2003              MOVS     r0,#3
                  |L1.24|
;;;2048   	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
;;;2049   		return 2;
;;;2050   
;;;2051   	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
;;;2052   		return 0;
;;;2053   	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
;;;2054   		return 0;
;;;2055   
;;;2056   	return 1;
;;;2057   }
000018  bd70              POP      {r4-r6,pc}
                  |L1.26|
00001a  f8941232          LDRB     r1,[r4,#0x232]        ;2048
00001e  f8940233          LDRB     r0,[r4,#0x233]        ;2048
000022  ea412000          ORR      r0,r1,r0,LSL #8       ;2048
000026  f64a2155          MOV      r1,#0xaa55            ;2048
00002a  4288              CMP      r0,r1                 ;2048
00002c  d001              BEQ      |L1.50|
00002e  2002              MOVS     r0,#2                 ;2049
000030  e7f2              B        |L1.24|
                  |L1.50|
000032  f894006d          LDRB     r0,[r4,#0x6d]         ;2051
000036  0601              LSLS     r1,r0,#24             ;2051
000038  f894006c          LDRB     r0,[r4,#0x6c]         ;2051
00003c  ea414100          ORR      r1,r1,r0,LSL #16      ;2051
000040  f894006b          LDRB     r0,[r4,#0x6b]         ;2051
000044  ea412000          ORR      r0,r1,r0,LSL #8       ;2051
000048  f894106a          LDRB     r1,[r4,#0x6a]         ;2051
00004c  4308              ORRS     r0,r0,r1              ;2051
00004e  f020407f          BIC      r0,r0,#0xff000000     ;2051
000052  490e              LDR      r1,|L1.140|
000054  4288              CMP      r0,r1                 ;2051
000056  d101              BNE      |L1.92|
000058  2000              MOVS     r0,#0                 ;2052
00005a  e7dd              B        |L1.24|
                  |L1.92|
00005c  f8940089          LDRB     r0,[r4,#0x89]         ;2053
000060  0601              LSLS     r1,r0,#24             ;2053
000062  f8940088          LDRB     r0,[r4,#0x88]         ;2053
000066  ea414100          ORR      r1,r1,r0,LSL #16      ;2053
00006a  f8940087          LDRB     r0,[r4,#0x87]         ;2053
00006e  ea412000          ORR      r0,r1,r0,LSL #8       ;2053
000072  f8941086          LDRB     r1,[r4,#0x86]         ;2053
000076  4308              ORRS     r0,r0,r1              ;2053
000078  f020407f          BIC      r0,r0,#0xff000000     ;2053
00007c  4903              LDR      r1,|L1.140|
00007e  4288              CMP      r0,r1                 ;2053
000080  d101              BNE      |L1.134|
000082  2000              MOVS     r0,#0                 ;2054
000084  e7c8              B        |L1.24|
                  |L1.134|
000086  2001              MOVS     r0,#1                 ;2056
000088  e7c6              B        |L1.24|
;;;2058   
                          ENDP

00008a  0000              DCW      0x0000
                  |L1.140|
                          DCD      0x00544146

                          AREA ||i.chk_chr||, CODE, READONLY, ALIGN=1

                  chk_chr PROC
;;;574    static
;;;575    int chk_chr (const char* str, int chr) {
000000  4602              MOV      r2,r0
;;;576    	while (*str && *str != chr) str++;
000002  e000              B        |L2.6|
                  |L2.4|
000004  1c52              ADDS     r2,r2,#1
                  |L2.6|
000006  7810              LDRB     r0,[r2,#0]
000008  b110              CBZ      r0,|L2.16|
00000a  7810              LDRB     r0,[r2,#0]
00000c  4288              CMP      r0,r1
00000e  d1f9              BNE      |L2.4|
                  |L2.16|
;;;577    	return *str;
000010  7810              LDRB     r0,[r2,#0]
;;;578    }
000012  4770              BX       lr
;;;579    
                          ENDP


                          AREA ||i.chk_lock||, CODE, READONLY, ALIGN=2

                  chk_lock PROC
;;;619    static
;;;620    FRESULT chk_lock (	/* Check if the file can be accessed */
000000  b530              PUSH     {r4,r5,lr}
;;;621    	DIR* dj,		/* Directory object pointing the file to be checked */
;;;622    	int acc			/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
;;;623    )
;;;624    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;625    	UINT i, be;
;;;626    
;;;627    	/* Search file semaphore table */
;;;628    	for (i = be = 0; i < _FS_LOCK; i++) {
000006  2000              MOVS     r0,#0
000008  4604              MOV      r4,r0
00000a  4601              MOV      r1,r0
00000c  e021              B        |L3.82|
                  |L3.14|
;;;629    		if (Files[i].fs) {	/* Existing entry */
00000e  eb010041          ADD      r0,r1,r1,LSL #1
000012  4d1d              LDR      r5,|L3.136|
000014  f8550020          LDR      r0,[r5,r0,LSL #2]
000018  b1c8              CBZ      r0,|L3.78|
;;;630    			if (Files[i].fs == dj->fs &&	 	/* Check if the file matched with an open file */
00001a  eb010041          ADD      r0,r1,r1,LSL #1
00001e  f8550020          LDR      r0,[r5,r0,LSL #2]
000022  6815              LDR      r5,[r2,#0]
000024  42a8              CMP      r0,r5
000026  d113              BNE      |L3.80|
;;;631    				Files[i].clu == dj->sclust &&
000028  eb010041          ADD      r0,r1,r1,LSL #1
00002c  4d16              LDR      r5,|L3.136|
00002e  eb050080          ADD      r0,r5,r0,LSL #2
000032  6840              LDR      r0,[r0,#4]
000034  6895              LDR      r5,[r2,#8]
000036  42a8              CMP      r0,r5
000038  d10a              BNE      |L3.80|
;;;632    				Files[i].idx == dj->index) break;
00003a  eb010041          ADD      r0,r1,r1,LSL #1
00003e  4d12              LDR      r5,|L3.136|
000040  eb050080          ADD      r0,r5,r0,LSL #2
000044  8900              LDRH     r0,[r0,#8]
000046  88d5              LDRH     r5,[r2,#6]
000048  42a8              CMP      r0,r5
00004a  d101              BNE      |L3.80|
00004c  e003              B        |L3.86|
                  |L3.78|
;;;633    		} else {			/* Blank entry */
;;;634    			be++;
00004e  1c64              ADDS     r4,r4,#1
                  |L3.80|
000050  1c49              ADDS     r1,r1,#1              ;628
                  |L3.82|
000052  2903              CMP      r1,#3                 ;628
000054  d3db              BCC      |L3.14|
                  |L3.86|
000056  bf00              NOP                            ;632
;;;635    		}
;;;636    	}
;;;637    	if (i == _FS_LOCK)	/* The file is not opened */
000058  2903              CMP      r1,#3
00005a  d106              BNE      |L3.106|
;;;638    		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new file? */
00005c  b90c              CBNZ     r4,|L3.98|
00005e  2b02              CMP      r3,#2
000060  d101              BNE      |L3.102|
                  |L3.98|
000062  2000              MOVS     r0,#0
                  |L3.100|
;;;639    
;;;640    	/* The file has been opened. Reject any open against writing file and all write mode open */
;;;641    	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
;;;642    }
000064  bd30              POP      {r4,r5,pc}
                  |L3.102|
000066  2012              MOVS     r0,#0x12              ;638
000068  e7fc              B        |L3.100|
                  |L3.106|
00006a  b943              CBNZ     r3,|L3.126|
00006c  eb010041          ADD      r0,r1,r1,LSL #1       ;641
000070  4d05              LDR      r5,|L3.136|
000072  eb050080          ADD      r0,r5,r0,LSL #2       ;641
000076  8940              LDRH     r0,[r0,#0xa]          ;641
000078  f5b07f80          CMP      r0,#0x100             ;641
00007c  d101              BNE      |L3.130|
                  |L3.126|
00007e  2010              MOVS     r0,#0x10              ;641
000080  e7f0              B        |L3.100|
                  |L3.130|
000082  2000              MOVS     r0,#0                 ;641
000084  e7ee              B        |L3.100|
;;;643    
                          ENDP

000086  0000              DCW      0x0000
                  |L3.136|
                          DCD      Files

                          AREA ||i.chk_mounted||, CODE, READONLY, ALIGN=2

                  chk_mounted PROC
;;;2066   static
;;;2067   FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;2068   	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
;;;2069   	FATFS **rfs,		/* Pointer to pointer to the found file system object */
;;;2070   	BYTE wmode			/* !=0: Check write protection for write access */
;;;2071   )
;;;2072   {
000004  b088              SUB      sp,sp,#0x20
;;;2073   	BYTE fmt, b, pi, *tbl;
;;;2074   	UINT vol;
;;;2075   	DSTATUS stat;
;;;2076   	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
;;;2077   	WORD nrsv;
;;;2078   	const TCHAR *p = *path;
000006  9808              LDR      r0,[sp,#0x20]
000008  6800              LDR      r0,[r0,#0]
00000a  9001              STR      r0,[sp,#4]
;;;2079   	FATFS *fs;
;;;2080   
;;;2081   
;;;2082   	/* Get logical drive number from the path name */
;;;2083   	vol = p[0] - '0';					/* Is there a drive number? */
00000c  9801              LDR      r0,[sp,#4]
00000e  7800              LDRB     r0,[r0,#0]
000010  3830              SUBS     r0,r0,#0x30
000012  9007              STR      r0,[sp,#0x1c]
;;;2084   	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
000014  9807              LDR      r0,[sp,#0x1c]
000016  2809              CMP      r0,#9
000018  d80a              BHI      |L4.48|
00001a  9801              LDR      r0,[sp,#4]
00001c  7840              LDRB     r0,[r0,#1]
00001e  283a              CMP      r0,#0x3a
000020  d106              BNE      |L4.48|
;;;2085   		p += 2; *path = p;				/* Return pointer to the path name */
000022  9801              LDR      r0,[sp,#4]
000024  1c80              ADDS     r0,r0,#2
000026  9001              STR      r0,[sp,#4]
000028  9908              LDR      r1,[sp,#0x20]
00002a  9801              LDR      r0,[sp,#4]
00002c  6008              STR      r0,[r1,#0]
00002e  e001              B        |L4.52|
                  |L4.48|
;;;2086   	} else {							/* No drive number, use default drive */
;;;2087   #if _FS_RPATH
;;;2088   		vol = CurrVol;					/* Use current drive */
;;;2089   #else
;;;2090   		vol = 0;						/* Use drive 0 */
000030  2000              MOVS     r0,#0
000032  9007              STR      r0,[sp,#0x1c]
                  |L4.52|
;;;2091   #endif
;;;2092   	}
;;;2093   
;;;2094   	/* Check if the file system object is valid or not */
;;;2095   	*rfs = 0;
000034  2100              MOVS     r1,#0
000036  9809              LDR      r0,[sp,#0x24]
000038  6001              STR      r1,[r0,#0]
;;;2096   	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
00003a  9807              LDR      r0,[sp,#0x1c]
00003c  2802              CMP      r0,#2
00003e  d303              BCC      |L4.72|
;;;2097   		return FR_INVALID_DRIVE;
000040  200b              MOVS     r0,#0xb
                  |L4.66|
;;;2098   	fs = FatFs[vol];					/* Get corresponding file system object */
;;;2099   	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
;;;2100   
;;;2101   	ENTER_FF(fs);						/* Lock volume */
;;;2102   
;;;2103   	*rfs = fs;							/* Return pointer to the corresponding file system object */
;;;2104   	if (fs->fs_type) {					/* If the volume has been mounted */
;;;2105   		stat = disk_status(fs->drv);
;;;2106   		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
;;;2107   			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
;;;2108   				return FR_WRITE_PROTECTED;
;;;2109   			return FR_OK;				/* The file system object is valid */
;;;2110   		}
;;;2111   	}
;;;2112   
;;;2113   	/* The file system object is not valid. */
;;;2114   	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */
;;;2115   
;;;2116   	fs->fs_type = 0;					/* Clear the file system object */
;;;2117   	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
;;;2118   	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
;;;2119   	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
;;;2120   		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
;;;2121   	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
;;;2122   		return FR_WRITE_PROTECTED;
;;;2123   #if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
;;;2124   	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
;;;2125   		return FR_DISK_ERR;
;;;2126   #endif
;;;2127   	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
;;;2128   	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
;;;2129   	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
;;;2130   	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
;;;2131   		/* Check the partition listed in the partition table */
;;;2132   		pi = LD2PT(vol);
;;;2133   		if (pi) pi--;
;;;2134   		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
;;;2135   		if (tbl[4]) {						/* Is the partition existing? */
;;;2136   			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
;;;2137   			fmt = check_fs(fs, bsect);		/* Check the partition */
;;;2138   		}
;;;2139   	}
;;;2140   	if (fmt == 3) return FR_DISK_ERR;
;;;2141   	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
;;;2142   
;;;2143   	/* An FAT volume is found. Following code initializes the file system object */
;;;2144   
;;;2145   	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
;;;2146   		return FR_NO_FILESYSTEM;
;;;2147   
;;;2148   	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
;;;2149   	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
;;;2150   	fs->fsize = fasize;
;;;2151   
;;;2152   	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
;;;2153   	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
;;;2154   	fasize *= b;										/* Number of sectors for FAT area */
;;;2155   
;;;2156   	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
;;;2157   	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
;;;2158   
;;;2159   	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
;;;2160   	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
;;;2161   
;;;2162   	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
;;;2163   	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
;;;2164   
;;;2165   	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
;;;2166   	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
;;;2167   
;;;2168   	/* Determine the FAT sub type */
;;;2169   	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
;;;2170   	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
;;;2171   	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
;;;2172   	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
;;;2173   	fmt = FS_FAT12;
;;;2174   	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
;;;2175   	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
;;;2176   
;;;2177   	/* Boundaries and Limits */
;;;2178   	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
;;;2179   	fs->volbase = bsect;								/* Volume start sector */
;;;2180   	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
;;;2181   	fs->database = bsect + sysect;						/* Data start sector */
;;;2182   	if (fmt == FS_FAT32) {
;;;2183   		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
;;;2184   		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
;;;2185   		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
;;;2186   	} else {
;;;2187   		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
;;;2188   		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
;;;2189   		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
;;;2190   			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
;;;2191   	}
;;;2192   	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
;;;2193   		return FR_NO_FILESYSTEM;
;;;2194   
;;;2195   #if !_FS_READONLY
;;;2196   	/* Initialize cluster allocation information */
;;;2197   	fs->free_clust = 0xFFFFFFFF;
;;;2198   	fs->last_clust = 0;
;;;2199   
;;;2200   	/* Get fsinfo if available */
;;;2201   	if (fmt == FS_FAT32) {
;;;2202   	 	fs->fsi_flag = 0;
;;;2203   		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
;;;2204   		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
;;;2205   			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
;;;2206   			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
;;;2207   			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
;;;2208   				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
;;;2209   				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
;;;2210   		}
;;;2211   	}
;;;2212   #endif
;;;2213   	fs->fs_type = fmt;		/* FAT sub-type */
;;;2214   	fs->id = ++Fsid;		/* File system mount ID */
;;;2215   	fs->winsect = 0;		/* Invalidate sector cache */
;;;2216   	fs->wflag = 0;
;;;2217   #if _FS_RPATH
;;;2218   	fs->cdir = 0;			/* Current directory (root dir) */
;;;2219   #endif
;;;2220   #if _FS_LOCK				/* Clear file lock semaphores */
;;;2221   	clear_lock(fs);
;;;2222   #endif
;;;2223   
;;;2224   	return FR_OK;
;;;2225   }
000042  b00b              ADD      sp,sp,#0x2c
000044  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.72|
000048  49d2              LDR      r1,|L4.916|
00004a  9807              LDR      r0,[sp,#0x1c]         ;2098
00004c  f8514020          LDR      r4,[r1,r0,LSL #2]     ;2098
000050  b90c              CBNZ     r4,|L4.86|
000052  200c              MOVS     r0,#0xc               ;2099
000054  e7f5              B        |L4.66|
                  |L4.86|
000056  9809              LDR      r0,[sp,#0x24]         ;2103
000058  6004              STR      r4,[r0,#0]            ;2103
00005a  7820              LDRB     r0,[r4,#0]            ;2104
00005c  b178              CBZ      r0,|L4.126|
00005e  7860              LDRB     r0,[r4,#1]            ;2105
000060  f7fffffe          BL       disk_status
000064  4680              MOV      r8,r0                 ;2105
000066  f0080001          AND      r0,r8,#1              ;2106
00006a  b940              CBNZ     r0,|L4.126|
00006c  980a              LDR      r0,[sp,#0x28]         ;2107
00006e  b120              CBZ      r0,|L4.122|
000070  f0080004          AND      r0,r8,#4              ;2107
000074  b108              CBZ      r0,|L4.122|
000076  200a              MOVS     r0,#0xa               ;2108
000078  e7e3              B        |L4.66|
                  |L4.122|
00007a  2000              MOVS     r0,#0                 ;2109
00007c  e7e1              B        |L4.66|
                  |L4.126|
00007e  2000              MOVS     r0,#0                 ;2116
000080  7020              STRB     r0,[r4,#0]            ;2116
000082  9807              LDR      r0,[sp,#0x1c]         ;2117
000084  7060              STRB     r0,[r4,#1]            ;2117
000086  7860              LDRB     r0,[r4,#1]            ;2118
000088  f7fffffe          BL       disk_initialize
00008c  4680              MOV      r8,r0                 ;2118
00008e  f0080001          AND      r0,r8,#1              ;2119
000092  b108              CBZ      r0,|L4.152|
000094  2003              MOVS     r0,#3                 ;2120
000096  e7d4              B        |L4.66|
                  |L4.152|
000098  980a              LDR      r0,[sp,#0x28]         ;2121
00009a  b120              CBZ      r0,|L4.166|
00009c  f0080004          AND      r0,r8,#4              ;2121
0000a0  b108              CBZ      r0,|L4.166|
0000a2  200a              MOVS     r0,#0xa               ;2122
0000a4  e7cd              B        |L4.66|
                  |L4.166|
0000a6  f04f0900          MOV      r9,#0                 ;2128
0000aa  4649              MOV      r1,r9                 ;2128
0000ac  4620              MOV      r0,r4                 ;2128
0000ae  f7fffffe          BL       check_fs
0000b2  4605              MOV      r5,r0                 ;2128
0000b4  bf00              NOP                            ;2129
0000b6  2d01              CMP      r5,#1                 ;2130
0000b8  d121              BNE      |L4.254|
0000ba  f04f0b00          MOV      r11,#0                ;2132
0000be  f1bb0f00          CMP      r11,#0                ;2133
0000c2  d003              BEQ      |L4.204|
0000c4  f1ab0001          SUB      r0,r11,#1             ;2133
0000c8  f0000bff          AND      r11,r0,#0xff          ;2133
                  |L4.204|
0000cc  f44f70df          MOV      r0,#0x1be             ;2134
0000d0  eb00110b          ADD      r1,r0,r11,LSL #4      ;2134
0000d4  f1040034          ADD      r0,r4,#0x34           ;2134
0000d8  180f              ADDS     r7,r1,r0              ;2134
0000da  7938              LDRB     r0,[r7,#4]            ;2135
0000dc  b178              CBZ      r0,|L4.254|
0000de  7af8              LDRB     r0,[r7,#0xb]          ;2136
0000e0  0601              LSLS     r1,r0,#24             ;2136
0000e2  7ab8              LDRB     r0,[r7,#0xa]          ;2136
0000e4  ea414100          ORR      r1,r1,r0,LSL #16      ;2136
0000e8  7a78              LDRB     r0,[r7,#9]            ;2136
0000ea  ea412000          ORR      r0,r1,r0,LSL #8       ;2136
0000ee  7a39              LDRB     r1,[r7,#8]            ;2136
0000f0  ea400901          ORR      r9,r0,r1              ;2136
0000f4  4649              MOV      r1,r9                 ;2137
0000f6  4620              MOV      r0,r4                 ;2137
0000f8  f7fffffe          BL       check_fs
0000fc  4605              MOV      r5,r0                 ;2137
                  |L4.254|
0000fe  2d03              CMP      r5,#3                 ;2140
000100  d101              BNE      |L4.262|
000102  2001              MOVS     r0,#1                 ;2140
000104  e79d              B        |L4.66|
                  |L4.262|
000106  b10d              CBZ      r5,|L4.268|
000108  200d              MOVS     r0,#0xd               ;2141
00010a  e79a              B        |L4.66|
                  |L4.268|
00010c  203f              MOVS     r0,#0x3f              ;2145
00010e  5d01              LDRB     r1,[r0,r4]            ;2145
000110  f8940040          LDRB     r0,[r4,#0x40]         ;2145
000114  ea412000          ORR      r0,r1,r0,LSL #8       ;2145
000118  f5b07f00          CMP      r0,#0x200             ;2145
00011c  d001              BEQ      |L4.290|
00011e  200d              MOVS     r0,#0xd               ;2146
000120  e78f              B        |L4.66|
                  |L4.290|
000122  204a              MOVS     r0,#0x4a              ;2148
000124  5d01              LDRB     r1,[r0,r4]            ;2148
000126  f894004b          LDRB     r0,[r4,#0x4b]         ;2148
00012a  ea412a00          ORR      r10,r1,r0,LSL #8      ;2148
00012e  f1ba0f00          CMP      r10,#0                ;2149
000132  d10e              BNE      |L4.338|
000134  f894005b          LDRB     r0,[r4,#0x5b]         ;2149
000138  0601              LSLS     r1,r0,#24             ;2149
00013a  f894005a          LDRB     r0,[r4,#0x5a]         ;2149
00013e  ea414100          ORR      r1,r1,r0,LSL #16      ;2149
000142  f8940059          LDRB     r0,[r4,#0x59]         ;2149
000146  ea412000          ORR      r0,r1,r0,LSL #8       ;2149
00014a  f8941058          LDRB     r1,[r4,#0x58]         ;2149
00014e  ea400a01          ORR      r10,r0,r1             ;2149
                  |L4.338|
000152  f8c4a01c          STR      r10,[r4,#0x1c]        ;2150
000156  2044              MOVS     r0,#0x44              ;2152
000158  5d06              LDRB     r6,[r0,r4]            ;2152
00015a  70e6              STRB     r6,[r4,#3]            ;2152
00015c  2e01              CMP      r6,#1                 ;2153
00015e  d003              BEQ      |L4.360|
000160  2e02              CMP      r6,#2                 ;2153
000162  d001              BEQ      |L4.360|
000164  200d              MOVS     r0,#0xd               ;2153
000166  e76c              B        |L4.66|
                  |L4.360|
000168  fb0afa06          MUL      r10,r10,r6            ;2154
00016c  2041              MOVS     r0,#0x41              ;2156
00016e  5d00              LDRB     r0,[r0,r4]            ;2156
000170  4606              MOV      r6,r0                 ;2156
000172  70a0              STRB     r0,[r4,#2]            ;2156
000174  b116              CBZ      r6,|L4.380|
000176  1e70              SUBS     r0,r6,#1              ;2157
000178  4030              ANDS     r0,r0,r6              ;2157
00017a  b108              CBZ      r0,|L4.384|
                  |L4.380|
00017c  200d              MOVS     r0,#0xd               ;2157
00017e  e760              B        |L4.66|
                  |L4.384|
000180  2045              MOVS     r0,#0x45              ;2159
000182  5d01              LDRB     r1,[r0,r4]            ;2159
000184  f8940046          LDRB     r0,[r4,#0x46]         ;2159
000188  ea412000          ORR      r0,r1,r0,LSL #8       ;2159
00018c  8120              STRH     r0,[r4,#8]            ;2159
00018e  7a20              LDRB     r0,[r4,#8]            ;2160
000190  f000000f          AND      r0,r0,#0xf            ;2160
000194  b108              CBZ      r0,|L4.410|
000196  200d              MOVS     r0,#0xd               ;2160
000198  e753              B        |L4.66|
                  |L4.410|
00019a  2047              MOVS     r0,#0x47              ;2162
00019c  5d01              LDRB     r1,[r0,r4]            ;2162
00019e  f8940048          LDRB     r0,[r4,#0x48]         ;2162
0001a2  ea412000          ORR      r0,r1,r0,LSL #8       ;2162
0001a6  9006              STR      r0,[sp,#0x18]         ;2162
0001a8  9806              LDR      r0,[sp,#0x18]         ;2163
0001aa  b970              CBNZ     r0,|L4.458|
0001ac  f8940057          LDRB     r0,[r4,#0x57]         ;2163
0001b0  0601              LSLS     r1,r0,#24             ;2163
0001b2  f8940056          LDRB     r0,[r4,#0x56]         ;2163
0001b6  ea414100          ORR      r1,r1,r0,LSL #16      ;2163
0001ba  f8940055          LDRB     r0,[r4,#0x55]         ;2163
0001be  ea412000          ORR      r0,r1,r0,LSL #8       ;2163
0001c2  f8941054          LDRB     r1,[r4,#0x54]         ;2163
0001c6  4308              ORRS     r0,r0,r1              ;2163
0001c8  9006              STR      r0,[sp,#0x18]         ;2163
                  |L4.458|
0001ca  2042              MOVS     r0,#0x42              ;2165
0001cc  5d01              LDRB     r1,[r0,r4]            ;2165
0001ce  f8940043          LDRB     r0,[r4,#0x43]         ;2165
0001d2  ea412000          ORR      r0,r1,r0,LSL #8       ;2165
0001d6  9002              STR      r0,[sp,#8]            ;2165
0001d8  9802              LDR      r0,[sp,#8]            ;2166
0001da  b908              CBNZ     r0,|L4.480|
0001dc  200d              MOVS     r0,#0xd               ;2166
0001de  e730              B        |L4.66|
                  |L4.480|
0001e0  9802              LDR      r0,[sp,#8]            ;2169
0001e2  4450              ADD      r0,r0,r10             ;2169
0001e4  8921              LDRH     r1,[r4,#8]            ;2169
0001e6  eb001011          ADD      r0,r0,r1,LSR #4       ;2169
0001ea  9005              STR      r0,[sp,#0x14]         ;2169
0001ec  e9dd0105          LDRD     r0,r1,[sp,#0x14]      ;2170
0001f0  4281              CMP      r1,r0                 ;2170
0001f2  d201              BCS      |L4.504|
0001f4  200d              MOVS     r0,#0xd               ;2170
0001f6  e724              B        |L4.66|
                  |L4.504|
0001f8  e9dd1005          LDRD     r1,r0,[sp,#0x14]      ;2171
0001fc  1a40              SUBS     r0,r0,r1              ;2171
0001fe  78a1              LDRB     r1,[r4,#2]            ;2171
000200  fbb0f0f1          UDIV     r0,r0,r1              ;2171
000204  9004              STR      r0,[sp,#0x10]         ;2171
000206  9804              LDR      r0,[sp,#0x10]         ;2172
000208  b908              CBNZ     r0,|L4.526|
00020a  200d              MOVS     r0,#0xd               ;2172
00020c  e719              B        |L4.66|
                  |L4.526|
00020e  2501              MOVS     r5,#1                 ;2173
000210  f64071f6          MOV      r1,#0xff6             ;2174
000214  9804              LDR      r0,[sp,#0x10]         ;2174
000216  4288              CMP      r0,r1                 ;2174
000218  d300              BCC      |L4.540|
00021a  2502              MOVS     r5,#2                 ;2174
                  |L4.540|
00021c  f64f71f6          MOV      r1,#0xfff6            ;2175
000220  9804              LDR      r0,[sp,#0x10]         ;2175
000222  4288              CMP      r0,r1                 ;2175
000224  d300              BCC      |L4.552|
000226  2503              MOVS     r5,#3                 ;2175
                  |L4.552|
000228  9804              LDR      r0,[sp,#0x10]         ;2178
00022a  1c80              ADDS     r0,r0,#2              ;2178
00022c  61a0              STR      r0,[r4,#0x18]         ;2178
00022e  f8c49020          STR      r9,[r4,#0x20]         ;2179
000232  9802              LDR      r0,[sp,#8]            ;2180
000234  4448              ADD      r0,r0,r9              ;2180
000236  6260              STR      r0,[r4,#0x24]         ;2180
000238  9805              LDR      r0,[sp,#0x14]         ;2181
00023a  4448              ADD      r0,r0,r9              ;2181
00023c  62e0              STR      r0,[r4,#0x2c]         ;2181
00023e  2d03              CMP      r5,#3                 ;2182
000240  d116              BNE      |L4.624|
000242  8920              LDRH     r0,[r4,#8]            ;2183
000244  b108              CBZ      r0,|L4.586|
000246  200d              MOVS     r0,#0xd               ;2183
000248  e6fb              B        |L4.66|
                  |L4.586|
00024a  f8940063          LDRB     r0,[r4,#0x63]         ;2184
00024e  0601              LSLS     r1,r0,#24             ;2184
000250  f8940062          LDRB     r0,[r4,#0x62]         ;2184
000254  ea414100          ORR      r1,r1,r0,LSL #16      ;2184
000258  f8940061          LDRB     r0,[r4,#0x61]         ;2184
00025c  ea412000          ORR      r0,r1,r0,LSL #8       ;2184
000260  f8941060          LDRB     r1,[r4,#0x60]         ;2184
000264  4308              ORRS     r0,r0,r1              ;2184
000266  62a0              STR      r0,[r4,#0x28]         ;2184
000268  69a0              LDR      r0,[r4,#0x18]         ;2185
00026a  0080              LSLS     r0,r0,#2              ;2185
00026c  9003              STR      r0,[sp,#0xc]          ;2185
00026e  e014              B        |L4.666|
                  |L4.624|
000270  8920              LDRH     r0,[r4,#8]            ;2187
000272  b908              CBNZ     r0,|L4.632|
000274  200d              MOVS     r0,#0xd               ;2187
000276  e6e4              B        |L4.66|
                  |L4.632|
000278  6a60              LDR      r0,[r4,#0x24]         ;2188
00027a  4450              ADD      r0,r0,r10             ;2188
00027c  62a0              STR      r0,[r4,#0x28]         ;2188
00027e  2d02              CMP      r5,#2                 ;2189
000280  d102              BNE      |L4.648|
000282  69a0              LDR      r0,[r4,#0x18]         ;2190
000284  0040              LSLS     r0,r0,#1              ;2190
000286  e007              B        |L4.664|
                  |L4.648|
000288  7e20              LDRB     r0,[r4,#0x18]         ;2190
00028a  f0000001          AND      r0,r0,#1              ;2190
00028e  69a1              LDR      r1,[r4,#0x18]         ;2190
000290  eb010141          ADD      r1,r1,r1,LSL #1       ;2190
000294  eb000051          ADD      r0,r0,r1,LSR #1       ;2190
                  |L4.664|
000298  9003              STR      r0,[sp,#0xc]          ;2190
                  |L4.666|
00029a  69e1              LDR      r1,[r4,#0x1c]         ;2192
00029c  9803              LDR      r0,[sp,#0xc]          ;2192
00029e  f20010ff          ADD      r0,r0,#0x1ff          ;2192
0002a2  ebb12f50          CMP      r1,r0,LSR #9          ;2192
0002a6  d201              BCS      |L4.684|
0002a8  200d              MOVS     r0,#0xd               ;2193
0002aa  e6ca              B        |L4.66|
                  |L4.684|
0002ac  f04f30ff          MOV      r0,#0xffffffff        ;2197
0002b0  6120              STR      r0,[r4,#0x10]         ;2197
0002b2  2000              MOVS     r0,#0                 ;2198
0002b4  60e0              STR      r0,[r4,#0xc]          ;2198
0002b6  2d03              CMP      r5,#3                 ;2201
0002b8  d15c              BNE      |L4.884|
0002ba  7160              STRB     r0,[r4,#5]            ;2202
0002bc  f8941064          LDRB     r1,[r4,#0x64]         ;2203
0002c0  f8940065          LDRB     r0,[r4,#0x65]         ;2203
0002c4  ea412000          ORR      r0,r1,r0,LSL #8       ;2203
0002c8  4448              ADD      r0,r0,r9              ;2203
0002ca  6160              STR      r0,[r4,#0x14]         ;2203
0002cc  7860              LDRB     r0,[r4,#1]            ;2204
0002ce  2301              MOVS     r3,#1                 ;2204
0002d0  f1040134          ADD      r1,r4,#0x34           ;2204
0002d4  6962              LDR      r2,[r4,#0x14]         ;2204
0002d6  f7fffffe          BL       disk_read
0002da  bbe8              CBNZ     r0,|L4.856|
0002dc  f8941232          LDRB     r1,[r4,#0x232]        ;2205
0002e0  f8940233          LDRB     r0,[r4,#0x233]        ;2205
0002e4  ea412000          ORR      r0,r1,r0,LSL #8       ;2205
0002e8  f64a2155          MOV      r1,#0xaa55            ;2205
0002ec  4288              CMP      r0,r1                 ;2205
0002ee  d141              BNE      |L4.884|
0002f0  2037              MOVS     r0,#0x37              ;2206
0002f2  5d00              LDRB     r0,[r0,r4]            ;2206
0002f4  0601              LSLS     r1,r0,#24             ;2206
0002f6  2036              MOVS     r0,#0x36              ;2206
0002f8  5d00              LDRB     r0,[r0,r4]            ;2206
0002fa  ea414100          ORR      r1,r1,r0,LSL #16      ;2206
0002fe  2035              MOVS     r0,#0x35              ;2206
000300  5d00              LDRB     r0,[r0,r4]            ;2206
000302  ea412000          ORR      r0,r1,r0,LSL #8       ;2206
000306  f8941034          LDRB     r1,[r4,#0x34]         ;2206
00030a  4308              ORRS     r0,r0,r1              ;2206
00030c  4922              LDR      r1,|L4.920|
00030e  4288              CMP      r0,r1                 ;2206
000310  d130              BNE      |L4.884|
000312  f894021b          LDRB     r0,[r4,#0x21b]        ;2207
000316  0601              LSLS     r1,r0,#24             ;2207
000318  f894021a          LDRB     r0,[r4,#0x21a]        ;2207
00031c  ea414100          ORR      r1,r1,r0,LSL #16      ;2207
000320  f8940219          LDRB     r0,[r4,#0x219]        ;2207
000324  ea412000          ORR      r0,r1,r0,LSL #8       ;2207
000328  f8941218          LDRB     r1,[r4,#0x218]        ;2207
00032c  4308              ORRS     r0,r0,r1              ;2207
00032e  491b              LDR      r1,|L4.924|
000330  4288              CMP      r0,r1                 ;2207
000332  d11f              BNE      |L4.884|
000334  f8940223          LDRB     r0,[r4,#0x223]        ;2208
000338  0601              LSLS     r1,r0,#24             ;2208
00033a  f8940222          LDRB     r0,[r4,#0x222]        ;2208
00033e  ea414100          ORR      r1,r1,r0,LSL #16      ;2208
000342  f8940221          LDRB     r0,[r4,#0x221]        ;2208
000346  ea412000          ORR      r0,r1,r0,LSL #8       ;2208
00034a  f8941220          LDRB     r1,[r4,#0x220]        ;2208
00034e  4308              ORRS     r0,r0,r1              ;2208
000350  60e0              STR      r0,[r4,#0xc]          ;2208
000352  f894021f          LDRB     r0,[r4,#0x21f]        ;2209
000356  e000              B        |L4.858|
                  |L4.856|
000358  e00c              B        |L4.884|
                  |L4.858|
00035a  0601              LSLS     r1,r0,#24             ;2209
00035c  f894021e          LDRB     r0,[r4,#0x21e]        ;2209
000360  ea414100          ORR      r1,r1,r0,LSL #16      ;2209
000364  f894021d          LDRB     r0,[r4,#0x21d]        ;2209
000368  ea412000          ORR      r0,r1,r0,LSL #8       ;2209
00036c  f894121c          LDRB     r1,[r4,#0x21c]        ;2209
000370  4308              ORRS     r0,r0,r1              ;2209
000372  6120              STR      r0,[r4,#0x10]         ;2209
                  |L4.884|
000374  7025              STRB     r5,[r4,#0]            ;2213
000376  480a              LDR      r0,|L4.928|
000378  8800              LDRH     r0,[r0,#0]            ;2214  ; Fsid
00037a  1c40              ADDS     r0,r0,#1              ;2214
00037c  b280              UXTH     r0,r0                 ;2214
00037e  4908              LDR      r1,|L4.928|
000380  8008              STRH     r0,[r1,#0]            ;2214
000382  80e0              STRH     r0,[r4,#6]            ;2214
000384  2000              MOVS     r0,#0                 ;2215
000386  6320              STR      r0,[r4,#0x30]         ;2215
000388  7120              STRB     r0,[r4,#4]            ;2216
00038a  4620              MOV      r0,r4                 ;2221
00038c  f7fffffe          BL       clear_lock
000390  2000              MOVS     r0,#0                 ;2224
000392  e656              B        |L4.66|
;;;2226   
                          ENDP

                  |L4.916|
                          DCD      FatFs
                  |L4.920|
                          DCD      0x41615252
                  |L4.924|
                          DCD      0x61417272
                  |L4.928|
                          DCD      Fsid

                          AREA ||i.clear_lock||, CODE, READONLY, ALIGN=2

                  clear_lock PROC
;;;710    static
;;;711    void clear_lock (	/* Clear lock entries of the volume */
000000  b510              PUSH     {r4,lr}
;;;712    	FATFS *fs
;;;713    )
;;;714    {
000002  4601              MOV      r1,r0
;;;715    	UINT i;
;;;716    
;;;717    	for (i = 0; i < _FS_LOCK; i++) {
000004  2000              MOVS     r0,#0
000006  e00d              B        |L5.36|
                  |L5.8|
;;;718    		if (Files[i].fs == fs) Files[i].fs = 0;
000008  eb000240          ADD      r2,r0,r0,LSL #1
00000c  4b07              LDR      r3,|L5.44|
00000e  f8532022          LDR      r2,[r3,r2,LSL #2]
000012  428a              CMP      r2,r1
000014  d105              BNE      |L5.34|
000016  2200              MOVS     r2,#0
000018  eb000340          ADD      r3,r0,r0,LSL #1
00001c  4c03              LDR      r4,|L5.44|
00001e  f8442023          STR      r2,[r4,r3,LSL #2]
                  |L5.34|
000022  1c40              ADDS     r0,r0,#1              ;717
                  |L5.36|
000024  2803              CMP      r0,#3                 ;717
000026  d3ef              BCC      |L5.8|
;;;719    	}
;;;720    }
000028  bd10              POP      {r4,pc}
;;;721    #endif
                          ENDP

00002a  0000              DCW      0x0000
                  |L5.44|
                          DCD      Files

                          AREA ||i.clust2sect||, CODE, READONLY, ALIGN=1

                  clust2sect PROC
;;;823    
;;;824    DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
000000  4602              MOV      r2,r0
;;;825    	FATFS *fs,		/* File system object */
;;;826    	DWORD clst		/* Cluster# to be converted */
;;;827    )
;;;828    {
;;;829    	clst -= 2;
000002  1e89              SUBS     r1,r1,#2
;;;830    	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
000004  6990              LDR      r0,[r2,#0x18]
000006  1e80              SUBS     r0,r0,#2
000008  4288              CMP      r0,r1
00000a  d801              BHI      |L6.16|
00000c  2000              MOVS     r0,#0
                  |L6.14|
;;;831    	return clst * fs->csize + fs->database;
;;;832    }
00000e  4770              BX       lr
                  |L6.16|
000010  7893              LDRB     r3,[r2,#2]            ;831
000012  6ad0              LDR      r0,[r2,#0x2c]         ;831
000014  fb010003          MLA      r0,r1,r3,r0           ;831
000018  e7f9              B        |L6.14|
;;;833    
                          ENDP


                          AREA ||i.cmp_lfn||, CODE, READONLY, ALIGN=2

                  cmp_lfn PROC
;;;1276   static
;;;1277   int cmp_lfn (			/* 1:Matched, 0:Not matched */
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1278   	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
;;;1279   	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
;;;1280   )
;;;1281   {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;1282   	UINT i, s;
;;;1283   	WCHAR wc, uc;
;;;1284   
;;;1285   
;;;1286   	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
000008  7820              LDRB     r0,[r4,#0]
00000a  f0200040          BIC      r0,r0,#0x40
00000e  1e40              SUBS     r0,r0,#1
000010  eb000180          ADD      r1,r0,r0,LSL #2
000014  eb0106c0          ADD      r6,r1,r0,LSL #3
;;;1287   	s = 0; wc = 1;
000018  2700              MOVS     r7,#0
00001a  f04f0801          MOV      r8,#1
;;;1288   	do {
00001e  bf00              NOP      
                  |L7.32|
;;;1289   		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
000020  481a              LDR      r0,|L7.140|
000022  5dc0              LDRB     r0,[r0,r7]
000024  5c20              LDRB     r0,[r4,r0]
000026  4919              LDR      r1,|L7.140|
000028  5dc9              LDRB     r1,[r1,r7]
00002a  4421              ADD      r1,r1,r4
00002c  7849              LDRB     r1,[r1,#1]
00002e  ea402901          ORR      r9,r0,r1,LSL #8
;;;1290   		if (wc) {	/* Last char has not been processed */
000032  f1b80f00          CMP      r8,#0
000036  d010              BEQ      |L7.90|
;;;1291   			wc = ff_wtoupper(uc);		/* Convert it to upper case */
000038  4648              MOV      r0,r9
00003a  f7fffffe          BL       ff_wtoupper
00003e  4680              MOV      r8,r0
;;;1292   			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
000040  2eff              CMP      r6,#0xff
000042  d207              BCS      |L7.84|
000044  4631              MOV      r1,r6
000046  1c76              ADDS     r6,r6,#1
000048  f8350011          LDRH     r0,[r5,r1,LSL #1]
00004c  f7fffffe          BL       ff_wtoupper
000050  4540              CMP      r0,r8
000052  d008              BEQ      |L7.102|
                  |L7.84|
;;;1293   				return 0;				/* Not matched */
000054  2000              MOVS     r0,#0
                  |L7.86|
;;;1294   		} else {
;;;1295   			if (uc != 0xFFFF) return 0;	/* Check filler */
;;;1296   		}
;;;1297   	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
;;;1298   
;;;1299   	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
;;;1300   		return 0;
;;;1301   
;;;1302   	return 1;						/* The part of LFN matched */
;;;1303   }
000056  e8bd87f0          POP      {r4-r10,pc}
                  |L7.90|
00005a  f64f70ff          MOV      r0,#0xffff            ;1295
00005e  4581              CMP      r9,r0                 ;1295
000060  d001              BEQ      |L7.102|
000062  2000              MOVS     r0,#0                 ;1295
000064  e7f7              B        |L7.86|
                  |L7.102|
000066  1c78              ADDS     r0,r7,#1              ;1297
000068  4607              MOV      r7,r0                 ;1297
00006a  280d              CMP      r0,#0xd               ;1297
00006c  d3d8              BCC      |L7.32|
00006e  7820              LDRB     r0,[r4,#0]            ;1299
000070  f0000040          AND      r0,r0,#0x40           ;1299
000074  b138              CBZ      r0,|L7.134|
000076  f1b80f00          CMP      r8,#0                 ;1299
00007a  d004              BEQ      |L7.134|
00007c  f8350016          LDRH     r0,[r5,r6,LSL #1]     ;1299
000080  b108              CBZ      r0,|L7.134|
000082  2000              MOVS     r0,#0                 ;1300
000084  e7e7              B        |L7.86|
                  |L7.134|
000086  2001              MOVS     r0,#1                 ;1302
000088  e7e5              B        |L7.86|
;;;1304   
                          ENDP

00008a  0000              DCW      0x0000
                  |L7.140|
                          DCD      LfnOfs

                          AREA ||i.create_chain||, CODE, READONLY, ALIGN=1

                  create_chain PROC
;;;1000   static
;;;1001   DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1002   	FATFS *fs,			/* File system object */
;;;1003   	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
;;;1004   )
;;;1005   {
000004  4604              MOV      r4,r0
000006  4689              MOV      r9,r1
;;;1006   	DWORD cs, ncl, scl;
;;;1007   	FRESULT res;
;;;1008   
;;;1009   
;;;1010   	if (clst == 0) {		/* Create a new chain */
000008  f1b90f00          CMP      r9,#0
00000c  d106              BNE      |L8.28|
;;;1011   		scl = fs->last_clust;			/* Get suggested start point */
00000e  68e7              LDR      r7,[r4,#0xc]
;;;1012   		if (!scl || scl >= fs->n_fatent) scl = 1;
000010  b117              CBZ      r7,|L8.24|
000012  69a0              LDR      r0,[r4,#0x18]
000014  42b8              CMP      r0,r7
000016  d811              BHI      |L8.60|
                  |L8.24|
000018  2701              MOVS     r7,#1
00001a  e00f              B        |L8.60|
                  |L8.28|
;;;1013   	}
;;;1014   	else {					/* Stretch the current chain */
;;;1015   		cs = get_fat(fs, clst);			/* Check the cluster status */
00001c  4649              MOV      r1,r9
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       get_fat
000024  4606              MOV      r6,r0
;;;1016   		if (cs < 2) return 1;			/* It is an invalid cluster */
000026  2e02              CMP      r6,#2
000028  d202              BCS      |L8.48|
00002a  2001              MOVS     r0,#1
                  |L8.44|
;;;1017   		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
;;;1018   		scl = clst;
;;;1019   	}
;;;1020   
;;;1021   	ncl = scl;				/* Start cluster */
;;;1022   	for (;;) {
;;;1023   		ncl++;							/* Next cluster */
;;;1024   		if (ncl >= fs->n_fatent) {		/* Wrap around */
;;;1025   			ncl = 2;
;;;1026   			if (ncl > scl) return 0;	/* No free cluster */
;;;1027   		}
;;;1028   		cs = get_fat(fs, ncl);			/* Get the cluster status */
;;;1029   		if (cs == 0) break;				/* Found a free cluster */
;;;1030   		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
;;;1031   			return cs;
;;;1032   		if (ncl == scl) return 0;		/* No free cluster */
;;;1033   	}
;;;1034   
;;;1035   	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
;;;1036   	if (res == FR_OK && clst != 0) {
;;;1037   		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
;;;1038   	}
;;;1039   	if (res == FR_OK) {
;;;1040   		fs->last_clust = ncl;			/* Update FSINFO */
;;;1041   		if (fs->free_clust != 0xFFFFFFFF) {
;;;1042   			fs->free_clust--;
;;;1043   			fs->fsi_flag = 1;
;;;1044   		}
;;;1045   	} else {
;;;1046   		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
;;;1047   	}
;;;1048   
;;;1049   	return ncl;		/* Return new cluster number or error code */
;;;1050   }
00002c  e8bd87f0          POP      {r4-r10,pc}
                  |L8.48|
000030  69a0              LDR      r0,[r4,#0x18]         ;1017
000032  42b0              CMP      r0,r6                 ;1017
000034  d901              BLS      |L8.58|
000036  4630              MOV      r0,r6                 ;1017
000038  e7f8              B        |L8.44|
                  |L8.58|
00003a  464f              MOV      r7,r9                 ;1018
                  |L8.60|
00003c  463d              MOV      r5,r7                 ;1021
00003e  bf00              NOP                            ;1022
                  |L8.64|
000040  1c6d              ADDS     r5,r5,#1              ;1023
000042  69a0              LDR      r0,[r4,#0x18]         ;1024
000044  42a8              CMP      r0,r5                 ;1024
000046  d804              BHI      |L8.82|
000048  2502              MOVS     r5,#2                 ;1025
00004a  42bd              CMP      r5,r7                 ;1026
00004c  d901              BLS      |L8.82|
00004e  2000              MOVS     r0,#0                 ;1026
000050  e7ec              B        |L8.44|
                  |L8.82|
000052  4629              MOV      r1,r5                 ;1028
000054  4620              MOV      r0,r4                 ;1028
000056  f7fffffe          BL       get_fat
00005a  4606              MOV      r6,r0                 ;1028
00005c  b906              CBNZ     r6,|L8.96|
00005e  e009              B        |L8.116|
                  |L8.96|
000060  1c70              ADDS     r0,r6,#1              ;1030
000062  b108              CBZ      r0,|L8.104|
000064  2e01              CMP      r6,#1                 ;1030
000066  d101              BNE      |L8.108|
                  |L8.104|
000068  4630              MOV      r0,r6                 ;1031
00006a  e7df              B        |L8.44|
                  |L8.108|
00006c  42bd              CMP      r5,r7                 ;1032
00006e  d1e7              BNE      |L8.64|
000070  2000              MOVS     r0,#0                 ;1032
000072  e7db              B        |L8.44|
                  |L8.116|
000074  bf00              NOP                            ;1029
000076  f06f4270          MVN      r2,#0xf0000000        ;1035
00007a  4629              MOV      r1,r5                 ;1035
00007c  4620              MOV      r0,r4                 ;1035
00007e  f7fffffe          BL       put_fat
000082  4680              MOV      r8,r0                 ;1035
000084  f1b80f00          CMP      r8,#0                 ;1036
000088  d108              BNE      |L8.156|
00008a  f1b90f00          CMP      r9,#0                 ;1036
00008e  d005              BEQ      |L8.156|
000090  462a              MOV      r2,r5                 ;1037
000092  4649              MOV      r1,r9                 ;1037
000094  4620              MOV      r0,r4                 ;1037
000096  f7fffffe          BL       put_fat
00009a  4680              MOV      r8,r0                 ;1037
                  |L8.156|
00009c  f1b80f00          CMP      r8,#0                 ;1039
0000a0  d109              BNE      |L8.182|
0000a2  60e5              STR      r5,[r4,#0xc]          ;1040
0000a4  6920              LDR      r0,[r4,#0x10]         ;1041
0000a6  1c40              ADDS     r0,r0,#1              ;1041
0000a8  b168              CBZ      r0,|L8.198|
0000aa  6920              LDR      r0,[r4,#0x10]         ;1042
0000ac  1e40              SUBS     r0,r0,#1              ;1042
0000ae  6120              STR      r0,[r4,#0x10]         ;1042
0000b0  2001              MOVS     r0,#1                 ;1043
0000b2  7160              STRB     r0,[r4,#5]            ;1043
0000b4  e007              B        |L8.198|
                  |L8.182|
0000b6  f1b80f01          CMP      r8,#1                 ;1046
0000ba  d102              BNE      |L8.194|
0000bc  f04f30ff          MOV      r0,#0xffffffff        ;1046
0000c0  e000              B        |L8.196|
                  |L8.194|
0000c2  2001              MOVS     r0,#1                 ;1046
                  |L8.196|
0000c4  4605              MOV      r5,r0                 ;1046
                  |L8.198|
0000c6  4628              MOV      r0,r5                 ;1049
0000c8  e7b0              B        |L8.44|
;;;1051   #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.create_name||, CODE, READONLY, ALIGN=2

                  create_name PROC
;;;1686   static
;;;1687   FRESULT create_name (
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;1688   	DIR *dj,			/* Pointer to the directory object */
;;;1689   	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
;;;1690   )
;;;1691   {
000004  b083              SUB      sp,sp,#0xc
000006  4681              MOV      r9,r0
;;;1692   #if _USE_LFN	/* LFN configuration */
;;;1693   	BYTE b, cf;
;;;1694   	WCHAR w, *lfn;
;;;1695   	UINT i, ni, si, di;
;;;1696   	const TCHAR *p;
;;;1697   
;;;1698   	/* Create LFN in Unicode */
;;;1699   	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
000008  9804              LDR      r0,[sp,#0x10]
00000a  6800              LDR      r0,[r0,#0]
00000c  9001              STR      r0,[sp,#4]
00000e  e002              B        |L9.22|
                  |L9.16|
000010  9801              LDR      r0,[sp,#4]
000012  1c40              ADDS     r0,r0,#1
000014  9001              STR      r0,[sp,#4]
                  |L9.22|
000016  9801              LDR      r0,[sp,#4]
000018  7800              LDRB     r0,[r0,#0]
00001a  282f              CMP      r0,#0x2f
00001c  d0f8              BEQ      |L9.16|
00001e  9801              LDR      r0,[sp,#4]
000020  7800              LDRB     r0,[r0,#0]
000022  285c              CMP      r0,#0x5c
000024  d0f4              BEQ      |L9.16|
;;;1700   	lfn = dj->lfn;
000026  f8d9a01c          LDR      r10,[r9,#0x1c]
;;;1701   	si = di = 0;
00002a  2500              MOVS     r5,#0
00002c  462f              MOV      r7,r5
;;;1702   	for (;;) {
00002e  bf00              NOP      
                  |L9.48|
;;;1703   		w = p[si++];					/* Get a character */
000030  4638              MOV      r0,r7
000032  1c7f              ADDS     r7,r7,#1
000034  9901              LDR      r1,[sp,#4]
000036  5c0c              LDRB     r4,[r1,r0]
;;;1704   		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
000038  2c20              CMP      r4,#0x20
00003a  db03              BLT      |L9.68|
00003c  2c2f              CMP      r4,#0x2f
00003e  d001              BEQ      |L9.68|
000040  2c5c              CMP      r4,#0x5c
000042  d100              BNE      |L9.70|
                  |L9.68|
000044  e032              B        |L9.172|
                  |L9.70|
;;;1705   		if (di >= _MAX_LFN)				/* Reject too long name */
000046  2dff              CMP      r5,#0xff
000048  d303              BCC      |L9.82|
;;;1706   			return FR_INVALID_NAME;
00004a  2006              MOVS     r0,#6
                  |L9.76|
;;;1707   #if !_LFN_UNICODE
;;;1708   		w &= 0xFF;
;;;1709   		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
;;;1710   			b = (BYTE)p[si++];			/* Get 2nd byte */
;;;1711   			if (!IsDBCS2(b))
;;;1712   				return FR_INVALID_NAME;	/* Reject invalid sequence */
;;;1713   			w = (w << 8) + b;			/* Create a DBC */
;;;1714   		}
;;;1715   		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
;;;1716   		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
;;;1717   #endif
;;;1718   		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
;;;1719   			return FR_INVALID_NAME;
;;;1720   		lfn[di++] = w;					/* Store the Unicode char */
;;;1721   	}
;;;1722   	*path = &p[si];						/* Return pointer to the next segment */
;;;1723   	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
;;;1724   #if _FS_RPATH
;;;1725   	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
;;;1726   		(di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
;;;1727   		lfn[di] = 0;
;;;1728   		for (i = 0; i < 11; i++)
;;;1729   			dj->fn[i] = (i < di) ? '.' : ' ';
;;;1730   		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
;;;1731   		return FR_OK;
;;;1732   	}
;;;1733   #endif
;;;1734   	while (di) {						/* Strip trailing spaces and dots */
;;;1735   		w = lfn[di-1];
;;;1736   		if (w != ' ' && w != '.') break;
;;;1737   		di--;
;;;1738   	}
;;;1739   	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
;;;1740   
;;;1741   	lfn[di] = 0;						/* LFN is created */
;;;1742   
;;;1743   	/* Create SFN in directory form */
;;;1744   	mem_set(dj->fn, ' ', 11);
;;;1745   	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
;;;1746   	if (si) cf |= NS_LOSS | NS_LFN;
;;;1747   	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
;;;1748   
;;;1749   	b = i = 0; ni = 8;
;;;1750   	for (;;) {
;;;1751   		w = lfn[si++];					/* Get an LFN char */
;;;1752   		if (!w) break;					/* Break on end of the LFN */
;;;1753   		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
;;;1754   			cf |= NS_LOSS | NS_LFN; continue;
;;;1755   		}
;;;1756   
;;;1757   		if (i >= ni || si == di) {		/* Extension or end of SFN */
;;;1758   			if (ni == 11) {				/* Long extension */
;;;1759   				cf |= NS_LOSS | NS_LFN; break;
;;;1760   			}
;;;1761   			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
;;;1762   			if (si > di) break;			/* No extension */
;;;1763   			si = di; i = 8; ni = 11;	/* Enter extension section */
;;;1764   			b <<= 2; continue;
;;;1765   		}
;;;1766   
;;;1767   		if (w >= 0x80) {				/* Non ASCII char */
;;;1768   #ifdef _EXCVT
;;;1769   			w = ff_convert(w, 0);		/* Unicode -> OEM code */
;;;1770   			if (w) w = ExCvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
;;;1771   #else
;;;1772   			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
;;;1773   #endif
;;;1774   			cf |= NS_LFN;				/* Force create LFN entry */
;;;1775   		}
;;;1776   
;;;1777   		if (_DF1S && w >= 0x100) {		/* Double byte char (always false on SBCS cfg) */
;;;1778   			if (i >= ni - 1) {
;;;1779   				cf |= NS_LOSS | NS_LFN; i = ni; continue;
;;;1780   			}
;;;1781   			dj->fn[i++] = (BYTE)(w >> 8);
;;;1782   		} else {						/* Single byte char */
;;;1783   			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
;;;1784   				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
;;;1785   			} else {
;;;1786   				if (IsUpper(w)) {		/* ASCII large capital */
;;;1787   					b |= 2;
;;;1788   				} else {
;;;1789   					if (IsLower(w)) {	/* ASCII small capital */
;;;1790   						b |= 1; w -= 0x20;
;;;1791   					}
;;;1792   				}
;;;1793   			}
;;;1794   		}
;;;1795   		dj->fn[i++] = (BYTE)w;
;;;1796   	}
;;;1797   
;;;1798   	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
;;;1799   
;;;1800   	if (ni == 8) b <<= 2;
;;;1801   	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
;;;1802   		cf |= NS_LFN;
;;;1803   	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
;;;1804   		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
;;;1805   		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
;;;1806   	}
;;;1807   
;;;1808   	dj->fn[NS] = cf;	/* SFN is created */
;;;1809   
;;;1810   	return FR_OK;
;;;1811   
;;;1812   
;;;1813   #else	/* Non-LFN configuration */
;;;1814   	BYTE b, c, d, *sfn;
;;;1815   	UINT ni, si, i;
;;;1816   	const char *p;
;;;1817   
;;;1818   	/* Create file name in directory form */
;;;1819   	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
;;;1820   	sfn = dj->fn;
;;;1821   	mem_set(sfn, ' ', 11);
;;;1822   	si = i = b = 0; ni = 8;
;;;1823   #if _FS_RPATH
;;;1824   	if (p[si] == '.') { /* Is this a dot entry? */
;;;1825   		for (;;) {
;;;1826   			c = (BYTE)p[si++];
;;;1827   			if (c != '.' || si >= 3) break;
;;;1828   			sfn[i++] = c;
;;;1829   		}
;;;1830   		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
;;;1831   		*path = &p[si];									/* Return pointer to the next segment */
;;;1832   		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
;;;1833   		return FR_OK;
;;;1834   	}
;;;1835   #endif
;;;1836   	for (;;) {
;;;1837   		c = (BYTE)p[si++];
;;;1838   		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
;;;1839   		if (c == '.' || i >= ni) {
;;;1840   			if (ni != 8 || c != '.') return FR_INVALID_NAME;
;;;1841   			i = 8; ni = 11;
;;;1842   			b <<= 2; continue;
;;;1843   		}
;;;1844   		if (c >= 0x80) {				/* Extended char? */
;;;1845   			b |= 3;						/* Eliminate NT flag */
;;;1846   #ifdef _EXCVT
;;;1847   			c = ExCvt[c - 0x80];		/* To upper extended chars (SBCS cfg) */
;;;1848   #else
;;;1849   #if !_DF1S
;;;1850   			return FR_INVALID_NAME;		/* Reject extended chars (ASCII cfg) */
;;;1851   #endif
;;;1852   #endif
;;;1853   		}
;;;1854   		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
;;;1855   			d = (BYTE)p[si++];			/* Get 2nd byte */
;;;1856   			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
;;;1857   				return FR_INVALID_NAME;
;;;1858   			sfn[i++] = c;
;;;1859   			sfn[i++] = d;
;;;1860   		} else {						/* Single byte code */
;;;1861   			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
;;;1862   				return FR_INVALID_NAME;
;;;1863   			if (IsUpper(c)) {			/* ASCII large capital? */
;;;1864   				b |= 2;
;;;1865   			} else {
;;;1866   				if (IsLower(c)) {		/* ASCII small capital? */
;;;1867   					b |= 1; c -= 0x20;
;;;1868   				}
;;;1869   			}
;;;1870   			sfn[i++] = c;
;;;1871   		}
;;;1872   	}
;;;1873   	*path = &p[si];						/* Return pointer to the next segment */
;;;1874   	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
;;;1875   
;;;1876   	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
;;;1877   	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
;;;1878   
;;;1879   	if (ni == 8) b <<= 2;
;;;1880   	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
;;;1881   	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
;;;1882   
;;;1883   	sfn[NS] = c;		/* Store NT flag, File name is created */
;;;1884   
;;;1885   	return FR_OK;
;;;1886   #endif
;;;1887   }
00004c  b005              ADD      sp,sp,#0x14
00004e  e8bd8ff0          POP      {r4-r11,pc}
                  |L9.82|
000052  b2e4              UXTB     r4,r4                 ;1708
000054  2c81              CMP      r4,#0x81              ;1709
000056  db13              BLT      |L9.128|
000058  b2e0              UXTB     r0,r4                 ;1709
00005a  28fe              CMP      r0,#0xfe              ;1709
00005c  dc10              BGT      |L9.128|
00005e  4638              MOV      r0,r7                 ;1710
000060  1c7f              ADDS     r7,r7,#1              ;1710
000062  9901              LDR      r1,[sp,#4]            ;1710
000064  5c0e              LDRB     r6,[r1,r0]            ;1710
000066  2e40              CMP      r6,#0x40              ;1711
000068  db01              BLT      |L9.110|
00006a  2e7e              CMP      r6,#0x7e              ;1711
00006c  dd05              BLE      |L9.122|
                  |L9.110|
00006e  2e80              CMP      r6,#0x80              ;1711
000070  db01              BLT      |L9.118|
000072  2efe              CMP      r6,#0xfe              ;1711
000074  dd01              BLE      |L9.122|
                  |L9.118|
000076  2006              MOVS     r0,#6                 ;1712
000078  e7e8              B        |L9.76|
                  |L9.122|
00007a  eb062004          ADD      r0,r6,r4,LSL #8       ;1713
00007e  b284              UXTH     r4,r0                 ;1713
                  |L9.128|
000080  2101              MOVS     r1,#1                 ;1715
000082  4620              MOV      r0,r4                 ;1715
000084  f7fffffe          BL       ff_convert
000088  4604              MOV      r4,r0                 ;1715
00008a  b90c              CBNZ     r4,|L9.144|
00008c  2006              MOVS     r0,#6                 ;1716
00008e  e7dd              B        |L9.76|
                  |L9.144|
000090  2c80              CMP      r4,#0x80              ;1718
000092  da06              BGE      |L9.162|
000094  4621              MOV      r1,r4                 ;1718
000096  a071              ADR      r0,|L9.604|
000098  f7fffffe          BL       chk_chr
00009c  b108              CBZ      r0,|L9.162|
00009e  2006              MOVS     r0,#6                 ;1719
0000a0  e7d4              B        |L9.76|
                  |L9.162|
0000a2  4628              MOV      r0,r5                 ;1720
0000a4  1c6d              ADDS     r5,r5,#1              ;1720
0000a6  f82a4010          STRH     r4,[r10,r0,LSL #1]    ;1720
0000aa  e7c1              B        |L9.48|
                  |L9.172|
0000ac  bf00              NOP                            ;1704
0000ae  9801              LDR      r0,[sp,#4]            ;1722
0000b0  19c1              ADDS     r1,r0,r7              ;1722
0000b2  9804              LDR      r0,[sp,#0x10]         ;1722
0000b4  6001              STR      r1,[r0,#0]            ;1722
0000b6  2c20              CMP      r4,#0x20              ;1723
0000b8  da01              BGE      |L9.190|
0000ba  2004              MOVS     r0,#4                 ;1723
0000bc  e000              B        |L9.192|
                  |L9.190|
0000be  2000              MOVS     r0,#0                 ;1723
                  |L9.192|
0000c0  4680              MOV      r8,r0                 ;1723
0000c2  e008              B        |L9.214|
                  |L9.196|
0000c4  1e68              SUBS     r0,r5,#1              ;1735
0000c6  f83a4010          LDRH     r4,[r10,r0,LSL #1]    ;1735
0000ca  2c20              CMP      r4,#0x20              ;1736
0000cc  d002              BEQ      |L9.212|
0000ce  2c2e              CMP      r4,#0x2e              ;1736
0000d0  d000              BEQ      |L9.212|
0000d2  e002              B        |L9.218|
                  |L9.212|
0000d4  1e6d              SUBS     r5,r5,#1              ;1737
                  |L9.214|
0000d6  2d00              CMP      r5,#0                 ;1734
0000d8  d1f4              BNE      |L9.196|
                  |L9.218|
0000da  bf00              NOP                            ;1736
0000dc  b90d              CBNZ     r5,|L9.226|
0000de  2006              MOVS     r0,#6                 ;1739
0000e0  e7b4              B        |L9.76|
                  |L9.226|
0000e2  2000              MOVS     r0,#0                 ;1741
0000e4  f82a0015          STRH     r0,[r10,r5,LSL #1]    ;1741
0000e8  220b              MOVS     r2,#0xb               ;1744
0000ea  2120              MOVS     r1,#0x20              ;1744
0000ec  f8d90018          LDR      r0,[r9,#0x18]         ;1744
0000f0  f7fffffe          BL       mem_set
0000f4  2700              MOVS     r7,#0                 ;1745
0000f6  e000              B        |L9.250|
                  |L9.248|
0000f8  1c7f              ADDS     r7,r7,#1              ;1745
                  |L9.250|
0000fa  f83a0017          LDRH     r0,[r10,r7,LSL #1]    ;1745
0000fe  2820              CMP      r0,#0x20              ;1745
000100  d0fa              BEQ      |L9.248|
000102  f83a0017          LDRH     r0,[r10,r7,LSL #1]    ;1745
000106  282e              CMP      r0,#0x2e              ;1745
000108  d0f6              BEQ      |L9.248|
00010a  b10f              CBZ      r7,|L9.272|
00010c  f0480803          ORR      r8,r8,#3              ;1746
                  |L9.272|
000110  e000              B        |L9.276|
                  |L9.274|
000112  1e6d              SUBS     r5,r5,#1              ;1747
                  |L9.276|
000114  b125              CBZ      r5,|L9.288|
000116  1e68              SUBS     r0,r5,#1              ;1747
000118  f83a0010          LDRH     r0,[r10,r0,LSL #1]    ;1747
00011c  282e              CMP      r0,#0x2e              ;1747
00011e  d1f8              BNE      |L9.274|
                  |L9.288|
000120  2000              MOVS     r0,#0                 ;1749
000122  4606              MOV      r6,r0                 ;1749
000124  9002              STR      r0,[sp,#8]            ;1749
000126  f04f0b08          MOV      r11,#8                ;1749
00012a  bf00              NOP                            ;1750
                  |L9.300|
00012c  4638              MOV      r0,r7                 ;1751
00012e  1c7f              ADDS     r7,r7,#1              ;1751
000130  f83a4010          LDRH     r4,[r10,r0,LSL #1]    ;1751
000134  b904              CBNZ     r4,|L9.312|
000136  e063              B        |L9.512|
                  |L9.312|
000138  2c20              CMP      r4,#0x20              ;1753
00013a  d003              BEQ      |L9.324|
00013c  2c2e              CMP      r4,#0x2e              ;1753
00013e  d104              BNE      |L9.330|
000140  42af              CMP      r7,r5                 ;1753
000142  d002              BEQ      |L9.330|
                  |L9.324|
000144  f0480803          ORR      r8,r8,#3              ;1754
000148  e7f0              B        |L9.300|
                  |L9.330|
00014a  9802              LDR      r0,[sp,#8]            ;1757
00014c  4558              CMP      r0,r11                ;1757
00014e  d201              BCS      |L9.340|
000150  42af              CMP      r7,r5                 ;1757
000152  d114              BNE      |L9.382|
                  |L9.340|
000154  f1bb0f0b          CMP      r11,#0xb              ;1758
000158  d102              BNE      |L9.352|
00015a  f0480803          ORR      r8,r8,#3              ;1759
00015e  e04f              B        |L9.512|
                  |L9.352|
000160  42af              CMP      r7,r5                 ;1761
000162  d001              BEQ      |L9.360|
000164  f0480803          ORR      r8,r8,#3              ;1761
                  |L9.360|
000168  42af              CMP      r7,r5                 ;1762
00016a  d900              BLS      |L9.366|
00016c  e048              B        |L9.512|
                  |L9.366|
00016e  462f              MOV      r7,r5                 ;1763
000170  2008              MOVS     r0,#8                 ;1763
000172  9002              STR      r0,[sp,#8]            ;1763
000174  f04f0b0b          MOV      r11,#0xb              ;1763
000178  06b0              LSLS     r0,r6,#26             ;1764
00017a  0e06              LSRS     r6,r0,#24             ;1764
00017c  e7d6              B        |L9.300|
                  |L9.382|
00017e  2c80              CMP      r4,#0x80              ;1767
000180  db09              BLT      |L9.406|
000182  4620              MOV      r0,r4                 ;1772
000184  f7fffffe          BL       ff_wtoupper
000188  2100              MOVS     r1,#0                 ;1772
00018a  9000              STR      r0,[sp,#0]            ;1772
00018c  f7fffffe          BL       ff_convert
000190  4604              MOV      r4,r0                 ;1772
000192  f0480802          ORR      r8,r8,#2              ;1774
                  |L9.406|
000196  2cff              CMP      r4,#0xff              ;1777
000198  dd11              BLE      |L9.446|
00019a  f1ab0001          SUB      r0,r11,#1             ;1778
00019e  9902              LDR      r1,[sp,#8]            ;1778
0001a0  4288              CMP      r0,r1                 ;1778
0001a2  d804              BHI      |L9.430|
0001a4  f0480803          ORR      r8,r8,#3              ;1779
0001a8  f8cdb008          STR      r11,[sp,#8]           ;1779
0001ac  e7be              B        |L9.300|
                  |L9.430|
0001ae  1222              ASRS     r2,r4,#8              ;1781
0001b0  f8d93018          LDR      r3,[r9,#0x18]         ;1781
0001b4  9802              LDR      r0,[sp,#8]            ;1781
0001b6  1c41              ADDS     r1,r0,#1              ;1781
0001b8  9102              STR      r1,[sp,#8]            ;1781
0001ba  541a              STRB     r2,[r3,r0]            ;1781
0001bc  e019              B        |L9.498|
                  |L9.446|
0001be  b124              CBZ      r4,|L9.458|
0001c0  4621              MOV      r1,r4                 ;1783
0001c2  a029              ADR      r0,|L9.616|
0001c4  f7fffffe          BL       chk_chr
0001c8  b118              CBZ      r0,|L9.466|
                  |L9.458|
0001ca  245f              MOVS     r4,#0x5f              ;1784
0001cc  f0480803          ORR      r8,r8,#3              ;1784
0001d0  e00f              B        |L9.498|
                  |L9.466|
0001d2  2c41              CMP      r4,#0x41              ;1786
0001d4  db04              BLT      |L9.480|
0001d6  2c5a              CMP      r4,#0x5a              ;1786
0001d8  dc02              BGT      |L9.480|
0001da  f0460602          ORR      r6,r6,#2              ;1787
0001de  e008              B        |L9.498|
                  |L9.480|
0001e0  2c61              CMP      r4,#0x61              ;1789
0001e2  db06              BLT      |L9.498|
0001e4  2c7a              CMP      r4,#0x7a              ;1789
0001e6  dc04              BGT      |L9.498|
0001e8  f0460601          ORR      r6,r6,#1              ;1790
0001ec  f1a40020          SUB      r0,r4,#0x20           ;1790
0001f0  b284              UXTH     r4,r0                 ;1790
                  |L9.498|
0001f2  f8d93018          LDR      r3,[r9,#0x18]         ;1795
0001f6  9802              LDR      r0,[sp,#8]            ;1795
0001f8  1c41              ADDS     r1,r0,#1              ;1795
0001fa  9102              STR      r1,[sp,#8]            ;1795
0001fc  541c              STRB     r4,[r3,r0]            ;1795
0001fe  e795              B        |L9.300|
                  |L9.512|
000200  bf00              NOP                            ;1752
000202  f8d90018          LDR      r0,[r9,#0x18]         ;1798
000206  7800              LDRB     r0,[r0,#0]            ;1798
000208  28e5              CMP      r0,#0xe5              ;1798
00020a  d103              BNE      |L9.532|
00020c  2005              MOVS     r0,#5                 ;1798
00020e  f8d91018          LDR      r1,[r9,#0x18]         ;1798
000212  7008              STRB     r0,[r1,#0]            ;1798
                  |L9.532|
000214  f1bb0f08          CMP      r11,#8                ;1800
000218  d101              BNE      |L9.542|
00021a  06b0              LSLS     r0,r6,#26             ;1800
00021c  0e06              LSRS     r6,r0,#24             ;1800
                  |L9.542|
00021e  f006000c          AND      r0,r6,#0xc            ;1801
000222  280c              CMP      r0,#0xc               ;1801
000224  d003              BEQ      |L9.558|
000226  f0060003          AND      r0,r6,#3              ;1801
00022a  2803              CMP      r0,#3                 ;1801
00022c  d101              BNE      |L9.562|
                  |L9.558|
00022e  f0480802          ORR      r8,r8,#2              ;1802
                  |L9.562|
000232  f0080002          AND      r0,r8,#2              ;1803
000236  b958              CBNZ     r0,|L9.592|
000238  f0060003          AND      r0,r6,#3              ;1804
00023c  2801              CMP      r0,#1                 ;1804
00023e  d101              BNE      |L9.580|
000240  f0480810          ORR      r8,r8,#0x10           ;1804
                  |L9.580|
000244  f006000c          AND      r0,r6,#0xc            ;1805
000248  2804              CMP      r0,#4                 ;1805
00024a  d101              BNE      |L9.592|
00024c  f0480808          ORR      r8,r8,#8              ;1805
                  |L9.592|
000250  f8d90018          LDR      r0,[r9,#0x18]         ;1808
000254  f880800b          STRB     r8,[r0,#0xb]          ;1808
000258  2000              MOVS     r0,#0                 ;1810
00025a  e6f7              B        |L9.76|
;;;1888   
                          ENDP

                  |L9.604|
00025c  222a3a3c          DCB      """*:<>?|",127,0
000260  3e3f7c7f
000264  00      
000265  00                DCB      0
000266  00                DCB      0
000267  00                DCB      0
                  |L9.616|
000268  2b2c3b3d          DCB      "+,;=[]",0
00026c  5b5d00  
00026f  00                DCB      0

                          AREA ||i.dec_lock||, CODE, READONLY, ALIGN=2

                  dec_lock PROC
;;;687    static
;;;688    FRESULT dec_lock (	/* Decrement file open counter */
000000  b530              PUSH     {r4,r5,lr}
;;;689    	UINT i			/* Semaphore index */
;;;690    )
;;;691    {
000002  4602              MOV      r2,r0
;;;692    	WORD n;
;;;693    	FRESULT res;
;;;694    
;;;695    
;;;696    	if (--i < _FS_LOCK) {
000004  1e53              SUBS     r3,r2,#1
000006  461a              MOV      r2,r3
000008  2b03              CMP      r3,#3
00000a  d21b              BCS      |L10.68|
;;;697    		n = Files[i].ctr;
00000c  eb020342          ADD      r3,r2,r2,LSL #1
000010  4c0d              LDR      r4,|L10.72|
000012  eb040383          ADD      r3,r4,r3,LSL #2
000016  8959              LDRH     r1,[r3,#0xa]
;;;698    		if (n == 0x100) n = 0;
000018  f5b17f80          CMP      r1,#0x100
00001c  d100              BNE      |L10.32|
00001e  2100              MOVS     r1,#0
                  |L10.32|
;;;699    		if (n) n--;
000020  b109              CBZ      r1,|L10.38|
000022  1e4b              SUBS     r3,r1,#1
000024  b299              UXTH     r1,r3
                  |L10.38|
;;;700    		Files[i].ctr = n;
000026  eb020342          ADD      r3,r2,r2,LSL #1
00002a  4c07              LDR      r4,|L10.72|
00002c  eb040383          ADD      r3,r4,r3,LSL #2
000030  8159              STRH     r1,[r3,#0xa]
;;;701    		if (!n) Files[i].fs = 0;
000032  b929              CBNZ     r1,|L10.64|
000034  2300              MOVS     r3,#0
000036  eb020442          ADD      r4,r2,r2,LSL #1
00003a  4d03              LDR      r5,|L10.72|
00003c  f8453024          STR      r3,[r5,r4,LSL #2]
                  |L10.64|
;;;702    		res = FR_OK;
000040  2000              MOVS     r0,#0
000042  e000              B        |L10.70|
                  |L10.68|
;;;703    	} else {
;;;704    		res = FR_INT_ERR;
000044  2002              MOVS     r0,#2
                  |L10.70|
;;;705    	}
;;;706    	return res;
;;;707    }
000046  bd30              POP      {r4,r5,pc}
;;;708    
                          ENDP

                  |L10.72|
                          DCD      Files

                          AREA ||i.dir_alloc||, CODE, READONLY, ALIGN=1

                  dir_alloc PROC
;;;1204   static
;;;1205   FRESULT dir_alloc (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1206   	DIR* dj,	/* Pointer to the directory object */
;;;1207   	UINT nent	/* Number of contiguous entries to allocate (1-21) */
;;;1208   )
;;;1209   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;1210   	FRESULT res;
;;;1211   	UINT n;
;;;1212   
;;;1213   
;;;1214   	res = dir_sdi(dj, 0);
000008  2100              MOVS     r1,#0
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       dir_sdi
000010  4605              MOV      r5,r0
;;;1215   	if (res == FR_OK) {
000012  b9ed              CBNZ     r5,|L11.80|
;;;1216   		n = 0;
000014  2700              MOVS     r7,#0
;;;1217   		do {
000016  bf00              NOP      
                  |L11.24|
;;;1218   			res = move_window(dj->fs, dj->sect);
000018  6921              LDR      r1,[r4,#0x10]
00001a  6820              LDR      r0,[r4,#0]
00001c  f7fffffe          BL       move_window
000020  4605              MOV      r5,r0
;;;1219   			if (res != FR_OK) break;
000022  b105              CBZ      r5,|L11.38|
000024  e013              B        |L11.78|
                  |L11.38|
;;;1220   			if (dj->dir[0] == DDE || dj->dir[0] == 0) {	/* Is it a blank entry? */
000026  6960              LDR      r0,[r4,#0x14]
000028  7800              LDRB     r0,[r0,#0]
00002a  28e5              CMP      r0,#0xe5
00002c  d002              BEQ      |L11.52|
00002e  6960              LDR      r0,[r4,#0x14]
000030  7800              LDRB     r0,[r0,#0]
000032  b920              CBNZ     r0,|L11.62|
                  |L11.52|
;;;1221   				if (++n == nent) break;	/* A block of contiguous entry is found */
000034  1c78              ADDS     r0,r7,#1
000036  4607              MOV      r7,r0
000038  42b0              CMP      r0,r6
00003a  d101              BNE      |L11.64|
00003c  e007              B        |L11.78|
                  |L11.62|
;;;1222   			} else {
;;;1223   				n = 0;					/* Not a blank entry. Restart to search */
00003e  2700              MOVS     r7,#0
                  |L11.64|
;;;1224   			}
;;;1225   			res = dir_next(dj, 1);		/* Next entry with table stretch enabled */
000040  2101              MOVS     r1,#1
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       dir_next
000048  4605              MOV      r5,r0
;;;1226   		} while (res == FR_OK);
00004a  2d00              CMP      r5,#0
00004c  d0e4              BEQ      |L11.24|
                  |L11.78|
00004e  bf00              NOP                            ;1219
                  |L11.80|
;;;1227   	}
;;;1228   	return res;
000050  4628              MOV      r0,r5
;;;1229   }
000052  e8bd81f0          POP      {r4-r8,pc}
;;;1230   #endif
                          ENDP


                          AREA ||i.dir_find||, CODE, READONLY, ALIGN=1

                  dir_find PROC
;;;1444   static
;;;1445   FRESULT dir_find (
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1446   	DIR *dj			/* Pointer to the directory object linked to the file name */
;;;1447   )
;;;1448   {
000004  4604              MOV      r4,r0
;;;1449   	FRESULT res;
;;;1450   	BYTE c, *dir;
;;;1451   #if _USE_LFN
;;;1452   	BYTE a, ord, sum;
;;;1453   #endif
;;;1454   
;;;1455   	res = dir_sdi(dj, 0);			/* Rewind directory object */
000006  2100              MOVS     r1,#0
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       dir_sdi
00000e  4607              MOV      r7,r0
;;;1456   	if (res != FR_OK) return res;
000010  b117              CBZ      r7,|L12.24|
000012  4638              MOV      r0,r7
                  |L12.20|
;;;1457   
;;;1458   #if _USE_LFN
;;;1459   	ord = sum = 0xFF;
;;;1460   #endif
;;;1461   	do {
;;;1462   		res = move_window(dj->fs, dj->sect);
;;;1463   		if (res != FR_OK) break;
;;;1464   		dir = dj->dir;					/* Ptr to the directory entry of current index */
;;;1465   		c = dir[DIR_Name];
;;;1466   		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
;;;1467   #if _USE_LFN	/* LFN configuration */
;;;1468   		a = dir[DIR_Attr] & AM_MASK;
;;;1469   		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
;;;1470   			ord = 0xFF;
;;;1471   		} else {
;;;1472   			if (a == AM_LFN) {			/* An LFN entry is found */
;;;1473   				if (dj->lfn) {
;;;1474   					if (c & LLE) {		/* Is it start of LFN sequence? */
;;;1475   						sum = dir[LDIR_Chksum];
;;;1476   						c &= ~LLE; ord = c;	/* LFN start order */
;;;1477   						dj->lfn_idx = dj->index;
;;;1478   					}
;;;1479   					/* Check validity of the LFN entry and compare it with given name */
;;;1480   					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
;;;1481   				}
;;;1482   			} else {					/* An SFN entry is found */
;;;1483   				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
;;;1484   				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
;;;1485   				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
;;;1486   			}
;;;1487   		}
;;;1488   #else		/* Non LFN configuration */
;;;1489   		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
;;;1490   			break;
;;;1491   #endif
;;;1492   		res = dir_next(dj, 0);		/* Next entry */
;;;1493   	} while (res == FR_OK);
;;;1494   
;;;1495   	return res;
;;;1496   }
000014  e8bd87f0          POP      {r4-r10,pc}
                  |L12.24|
000018  f04f09ff          MOV      r9,#0xff              ;1459
00001c  46ca              MOV      r10,r9                ;1459
00001e  bf00              NOP                            ;1461
                  |L12.32|
000020  6921              LDR      r1,[r4,#0x10]         ;1462
000022  6820              LDR      r0,[r4,#0]            ;1462
000024  f7fffffe          BL       move_window
000028  4607              MOV      r7,r0                 ;1462
00002a  b107              CBZ      r7,|L12.46|
00002c  e054              B        |L12.216|
                  |L12.46|
00002e  6965              LDR      r5,[r4,#0x14]         ;1464
000030  782e              LDRB     r6,[r5,#0]            ;1465
000032  b90e              CBNZ     r6,|L12.56|
000034  2704              MOVS     r7,#4                 ;1466
000036  e04f              B        |L12.216|
                  |L12.56|
000038  7ae8              LDRB     r0,[r5,#0xb]          ;1468
00003a  f000083f          AND      r8,r0,#0x3f           ;1468
00003e  2ee5              CMP      r6,#0xe5              ;1469
000040  d005              BEQ      |L12.78|
000042  f0080008          AND      r0,r8,#8              ;1469
000046  b128              CBZ      r0,|L12.84|
000048  f1b80f0f          CMP      r8,#0xf               ;1469
00004c  d002              BEQ      |L12.84|
                  |L12.78|
00004e  f04f09ff          MOV      r9,#0xff              ;1470
000052  e03a              B        |L12.202|
                  |L12.84|
000054  f1b80f0f          CMP      r8,#0xf               ;1472
000058  d11c              BNE      |L12.148|
00005a  69e0              LDR      r0,[r4,#0x1c]         ;1473
00005c  b3a0              CBZ      r0,|L12.200|
00005e  f0060040          AND      r0,r6,#0x40           ;1474
000062  b130              CBZ      r0,|L12.114|
000064  f895a00d          LDRB     r10,[r5,#0xd]         ;1475
000068  f0260640          BIC      r6,r6,#0x40           ;1476
00006c  46b1              MOV      r9,r6                 ;1476
00006e  88e0              LDRH     r0,[r4,#6]            ;1477
000070  8420              STRH     r0,[r4,#0x20]         ;1477
                  |L12.114|
000072  454e              CMP      r6,r9                 ;1480
000074  d10a              BNE      |L12.140|
000076  7b68              LDRB     r0,[r5,#0xd]          ;1480
000078  4550              CMP      r0,r10                ;1480
00007a  d107              BNE      |L12.140|
00007c  4629              MOV      r1,r5                 ;1480
00007e  69e0              LDR      r0,[r4,#0x1c]         ;1480
000080  f7fffffe          BL       cmp_lfn
000084  b110              CBZ      r0,|L12.140|
000086  f1a90001          SUB      r0,r9,#1              ;1480
00008a  e000              B        |L12.142|
                  |L12.140|
00008c  20ff              MOVS     r0,#0xff              ;1480
                  |L12.142|
00008e  f00009ff          AND      r9,r0,#0xff           ;1480
000092  e01a              B        |L12.202|
                  |L12.148|
000094  f1b90f00          CMP      r9,#0                 ;1483
000098  d105              BNE      |L12.166|
00009a  4628              MOV      r0,r5                 ;1483
00009c  f7fffffe          BL       sum_sfn
0000a0  4550              CMP      r0,r10                ;1483
0000a2  d100              BNE      |L12.166|
0000a4  e018              B        |L12.216|
                  |L12.166|
0000a6  f04f09ff          MOV      r9,#0xff              ;1484
0000aa  f64f70ff          MOV      r0,#0xffff            ;1484
0000ae  8420              STRH     r0,[r4,#0x20]         ;1484
0000b0  69a0              LDR      r0,[r4,#0x18]         ;1485
0000b2  7ac0              LDRB     r0,[r0,#0xb]          ;1485
0000b4  f0000001          AND      r0,r0,#1              ;1485
0000b8  b930              CBNZ     r0,|L12.200|
0000ba  220b              MOVS     r2,#0xb               ;1485
0000bc  4628              MOV      r0,r5                 ;1485
0000be  69a1              LDR      r1,[r4,#0x18]         ;1485
0000c0  f7fffffe          BL       mem_cmp
0000c4  b900              CBNZ     r0,|L12.200|
0000c6  e007              B        |L12.216|
                  |L12.200|
0000c8  e7ff              B        |L12.202|
                  |L12.202|
0000ca  2100              MOVS     r1,#0                 ;1492
0000cc  4620              MOV      r0,r4                 ;1492
0000ce  f7fffffe          BL       dir_next
0000d2  4607              MOV      r7,r0                 ;1492
0000d4  2f00              CMP      r7,#0                 ;1493
0000d6  d0a3              BEQ      |L12.32|
                  |L12.216|
0000d8  bf00              NOP                            ;1463
0000da  4638              MOV      r0,r7                 ;1495
0000dc  e79a              B        |L12.20|
;;;1497   
                          ENDP


                          AREA ||i.dir_next||, CODE, READONLY, ALIGN=1

                  dir_next PROC
;;;1135   static
;;;1136   FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1137   	DIR *dj,		/* Pointer to the directory object */
;;;1138   	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
;;;1139   )
;;;1140   {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
;;;1141   	DWORD clst;
;;;1142   	WORD i;
;;;1143   
;;;1144   
;;;1145   	stretch = stretch;		/* To suppress warning on read-only cfg. */
000008  bf00              NOP      
;;;1146   	i = dj->index + 1;
00000a  88e0              LDRH     r0,[r4,#6]
00000c  1c40              ADDS     r0,r0,#1
00000e  b286              UXTH     r6,r0
;;;1147   	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
000010  b10e              CBZ      r6,|L13.22|
000012  6920              LDR      r0,[r4,#0x10]
000014  b910              CBNZ     r0,|L13.28|
                  |L13.22|
;;;1148   		return FR_NO_FILE;
000016  2004              MOVS     r0,#4
                  |L13.24|
;;;1149   
;;;1150   	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
;;;1151   		dj->sect++;					/* Next sector */
;;;1152   
;;;1153   		if (dj->clust == 0) {	/* Static table */
;;;1154   			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
;;;1155   				return FR_NO_FILE;
;;;1156   		}
;;;1157   		else {					/* Dynamic table */
;;;1158   			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
;;;1159   				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
;;;1160   				if (clst <= 1) return FR_INT_ERR;
;;;1161   				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
;;;1162   				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
;;;1163   #if !_FS_READONLY
;;;1164   					BYTE c;
;;;1165   					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
;;;1166   					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
;;;1167   					if (clst == 0) return FR_DENIED;			/* No free cluster */
;;;1168   					if (clst == 1) return FR_INT_ERR;
;;;1169   					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
;;;1170   					/* Clean-up stretched table */
;;;1171   					if (sync_window(dj->fs)) return FR_DISK_ERR;	/* Flush active window */
;;;1172   					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
;;;1173   					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
;;;1174   					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
;;;1175   						dj->fs->wflag = 1;
;;;1176   						if (sync_window(dj->fs)) return FR_DISK_ERR;
;;;1177   						dj->fs->winsect++;
;;;1178   					}
;;;1179   					dj->fs->winsect -= c;						/* Rewind window address */
;;;1180   #else
;;;1181   					return FR_NO_FILE;			/* Report EOT */
;;;1182   #endif
;;;1183   				}
;;;1184   				dj->clust = clst;				/* Initialize data for new cluster */
;;;1185   				dj->sect = clust2sect(dj->fs, clst);
;;;1186   			}
;;;1187   		}
;;;1188   	}
;;;1189   
;;;1190   	dj->index = i;
;;;1191   	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
;;;1192   
;;;1193   	return FR_OK;
;;;1194   }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L13.28|
00001c  f006000f          AND      r0,r6,#0xf            ;1150
000020  2800              CMP      r0,#0                 ;1150
000022  d16d              BNE      |L13.256|
000024  6920              LDR      r0,[r4,#0x10]         ;1151
000026  1c40              ADDS     r0,r0,#1              ;1151
000028  6120              STR      r0,[r4,#0x10]         ;1151
00002a  68e0              LDR      r0,[r4,#0xc]          ;1153
00002c  b928              CBNZ     r0,|L13.58|
00002e  6820              LDR      r0,[r4,#0]            ;1154
000030  8900              LDRH     r0,[r0,#8]            ;1154
000032  42b0              CMP      r0,r6                 ;1154
000034  dc64              BGT      |L13.256|
000036  2004              MOVS     r0,#4                 ;1155
000038  e7ee              B        |L13.24|
                  |L13.58|
00003a  6820              LDR      r0,[r4,#0]            ;1158
00003c  7880              LDRB     r0,[r0,#2]            ;1158
00003e  1e40              SUBS     r0,r0,#1              ;1158
000040  ea001016          AND      r0,r0,r6,LSR #4       ;1158
000044  2800              CMP      r0,#0                 ;1158
000046  d15b              BNE      |L13.256|
000048  68e1              LDR      r1,[r4,#0xc]          ;1159
00004a  6820              LDR      r0,[r4,#0]            ;1159
00004c  f7fffffe          BL       get_fat
000050  4605              MOV      r5,r0                 ;1159
000052  2d01              CMP      r5,#1                 ;1160
000054  d801              BHI      |L13.90|
000056  2002              MOVS     r0,#2                 ;1160
000058  e7de              B        |L13.24|
                  |L13.90|
00005a  1c68              ADDS     r0,r5,#1              ;1161
00005c  b908              CBNZ     r0,|L13.98|
00005e  2001              MOVS     r0,#1                 ;1161
000060  e7da              B        |L13.24|
                  |L13.98|
000062  6820              LDR      r0,[r4,#0]            ;1162
000064  6980              LDR      r0,[r0,#0x18]         ;1162
000066  42a8              CMP      r0,r5                 ;1162
000068  d844              BHI      |L13.244|
00006a  f1b80f00          CMP      r8,#0                 ;1165
00006e  d101              BNE      |L13.116|
000070  2004              MOVS     r0,#4                 ;1165
000072  e7d1              B        |L13.24|
                  |L13.116|
000074  68e1              LDR      r1,[r4,#0xc]          ;1166
000076  6820              LDR      r0,[r4,#0]            ;1166
000078  f7fffffe          BL       create_chain
00007c  4605              MOV      r5,r0                 ;1166
00007e  b90d              CBNZ     r5,|L13.132|
000080  2007              MOVS     r0,#7                 ;1167
000082  e7c9              B        |L13.24|
                  |L13.132|
000084  2d01              CMP      r5,#1                 ;1168
000086  d101              BNE      |L13.140|
000088  2002              MOVS     r0,#2                 ;1168
00008a  e7c5              B        |L13.24|
                  |L13.140|
00008c  1c68              ADDS     r0,r5,#1              ;1169
00008e  b908              CBNZ     r0,|L13.148|
000090  2001              MOVS     r0,#1                 ;1169
000092  e7c1              B        |L13.24|
                  |L13.148|
000094  6820              LDR      r0,[r4,#0]            ;1171
000096  f7fffffe          BL       sync_window
00009a  b108              CBZ      r0,|L13.160|
00009c  2001              MOVS     r0,#1                 ;1171
00009e  e7bb              B        |L13.24|
                  |L13.160|
0000a0  6821              LDR      r1,[r4,#0]            ;1172
0000a2  f1010034          ADD      r0,r1,#0x34           ;1172
0000a6  f44f7200          MOV      r2,#0x200             ;1172
0000aa  2100              MOVS     r1,#0                 ;1172
0000ac  f7fffffe          BL       mem_set
0000b0  4629              MOV      r1,r5                 ;1173
0000b2  6820              LDR      r0,[r4,#0]            ;1173
0000b4  f7fffffe          BL       clust2sect
0000b8  6821              LDR      r1,[r4,#0]            ;1173
0000ba  6308              STR      r0,[r1,#0x30]         ;1173
0000bc  2700              MOVS     r7,#0                 ;1174
0000be  e00f              B        |L13.224|
                  |L13.192|
0000c0  2001              MOVS     r0,#1                 ;1175
0000c2  6821              LDR      r1,[r4,#0]            ;1175
0000c4  7108              STRB     r0,[r1,#4]            ;1175
0000c6  6820              LDR      r0,[r4,#0]            ;1176
0000c8  f7fffffe          BL       sync_window
0000cc  b108              CBZ      r0,|L13.210|
0000ce  2001              MOVS     r0,#1                 ;1176
0000d0  e7a2              B        |L13.24|
                  |L13.210|
0000d2  6820              LDR      r0,[r4,#0]            ;1177
0000d4  6b00              LDR      r0,[r0,#0x30]         ;1177
0000d6  1c40              ADDS     r0,r0,#1              ;1177
0000d8  6821              LDR      r1,[r4,#0]            ;1177
0000da  6308              STR      r0,[r1,#0x30]         ;1177
0000dc  1c78              ADDS     r0,r7,#1              ;1174
0000de  b2c7              UXTB     r7,r0                 ;1174
                  |L13.224|
0000e0  6820              LDR      r0,[r4,#0]            ;1174
0000e2  7880              LDRB     r0,[r0,#2]            ;1174
0000e4  42b8              CMP      r0,r7                 ;1174
0000e6  dceb              BGT      |L13.192|
0000e8  6820              LDR      r0,[r4,#0]            ;1179
0000ea  6b00              LDR      r0,[r0,#0x30]         ;1179
0000ec  1bc0              SUBS     r0,r0,r7              ;1179
0000ee  6821              LDR      r1,[r4,#0]            ;1179
0000f0  6308              STR      r0,[r1,#0x30]         ;1179
0000f2  bf00              NOP                            ;1183
                  |L13.244|
0000f4  60e5              STR      r5,[r4,#0xc]          ;1184
0000f6  4629              MOV      r1,r5                 ;1185
0000f8  6820              LDR      r0,[r4,#0]            ;1185
0000fa  f7fffffe          BL       clust2sect
0000fe  6120              STR      r0,[r4,#0x10]         ;1185
                  |L13.256|
000100  80e6              STRH     r6,[r4,#6]            ;1190
000102  6820              LDR      r0,[r4,#0]            ;1191
000104  3034              ADDS     r0,r0,#0x34           ;1191
000106  f006010f          AND      r1,r6,#0xf            ;1191
00010a  eb001041          ADD      r0,r0,r1,LSL #5       ;1191
00010e  6160              STR      r0,[r4,#0x14]         ;1191
000110  2000              MOVS     r0,#0                 ;1193
000112  e781              B        |L13.24|
;;;1195   
                          ENDP


                          AREA ||i.dir_read||, CODE, READONLY, ALIGN=1

                  dir_read PROC
;;;1505   static
;;;1506   FRESULT dir_read (
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;1507   	DIR *dj,		/* Pointer to the directory object */
;;;1508   	int vol			/* Filtered by 0:file/dir or 1:volume label */
;;;1509   )
;;;1510   {
000004  4604              MOV      r4,r0
000006  468a              MOV      r10,r1
;;;1511   	FRESULT res;
;;;1512   	BYTE a, c, *dir;
;;;1513   #if _USE_LFN
;;;1514   	BYTE ord = 0xFF, sum = 0xFF;
000008  f04f09ff          MOV      r9,#0xff
00000c  46cb              MOV      r11,r9
;;;1515   #endif
;;;1516   
;;;1517   	res = FR_NO_FILE;
00000e  2704              MOVS     r7,#4
;;;1518   	while (dj->sect) {
000010  e04e              B        |L14.176|
                  |L14.18|
;;;1519   		res = move_window(dj->fs, dj->sect);
000012  6921              LDR      r1,[r4,#0x10]
000014  6820              LDR      r0,[r4,#0]
000016  f7fffffe          BL       move_window
00001a  4607              MOV      r7,r0
;;;1520   		if (res != FR_OK) break;
00001c  b107              CBZ      r7,|L14.32|
00001e  e04a              B        |L14.182|
                  |L14.32|
;;;1521   		dir = dj->dir;					/* Ptr to the directory entry of current index */
000020  6966              LDR      r6,[r4,#0x14]
;;;1522   		c = dir[DIR_Name];
000022  7835              LDRB     r5,[r6,#0]
;;;1523   		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
000024  b90d              CBNZ     r5,|L14.42|
000026  2704              MOVS     r7,#4
000028  e045              B        |L14.182|
                  |L14.42|
;;;1524   		a = dir[DIR_Attr] & AM_MASK;
00002a  7af0              LDRB     r0,[r6,#0xb]
00002c  f000083f          AND      r8,r0,#0x3f
;;;1525   #if _USE_LFN	/* LFN configuration */
;;;1526   		if (c == DDE || (!_FS_RPATH && c == '.') || (a == AM_VOL) != vol) {	/* An entry without valid data */
000030  2de5              CMP      r5,#0xe5
000032  d009              BEQ      |L14.72|
000034  2d2e              CMP      r5,#0x2e
000036  d007              BEQ      |L14.72|
000038  f1b80f08          CMP      r8,#8
00003c  d101              BNE      |L14.66|
00003e  2001              MOVS     r0,#1
000040  e000              B        |L14.68|
                  |L14.66|
000042  2000              MOVS     r0,#0
                  |L14.68|
000044  4550              CMP      r0,r10
000046  d002              BEQ      |L14.78|
                  |L14.72|
;;;1527   			ord = 0xFF;
000048  f04f09ff          MOV      r9,#0xff
00004c  e029              B        |L14.162|
                  |L14.78|
;;;1528   		} else {
;;;1529   			if (a == AM_LFN) {			/* An LFN entry is found */
00004e  f1b80f0f          CMP      r8,#0xf
000052  d11a              BNE      |L14.138|
;;;1530   				if (c & LLE) {			/* Is it start of LFN sequence? */
000054  f0050040          AND      r0,r5,#0x40
000058  b130              CBZ      r0,|L14.104|
;;;1531   					sum = dir[LDIR_Chksum];
00005a  f896b00d          LDRB     r11,[r6,#0xd]
;;;1532   					c &= ~LLE; ord = c;
00005e  f0250540          BIC      r5,r5,#0x40
000062  46a9              MOV      r9,r5
;;;1533   					dj->lfn_idx = dj->index;
000064  88e0              LDRH     r0,[r4,#6]
000066  8420              STRH     r0,[r4,#0x20]
                  |L14.104|
;;;1534   				}
;;;1535   				/* Check LFN validity and capture it */
;;;1536   				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
000068  454d              CMP      r5,r9
00006a  d10a              BNE      |L14.130|
00006c  7b70              LDRB     r0,[r6,#0xd]
00006e  4558              CMP      r0,r11
000070  d107              BNE      |L14.130|
000072  4631              MOV      r1,r6
000074  69e0              LDR      r0,[r4,#0x1c]
000076  f7fffffe          BL       pick_lfn
00007a  b110              CBZ      r0,|L14.130|
00007c  f1a90001          SUB      r0,r9,#1
000080  e000              B        |L14.132|
                  |L14.130|
000082  20ff              MOVS     r0,#0xff
                  |L14.132|
000084  f00009ff          AND      r9,r0,#0xff
000088  e00b              B        |L14.162|
                  |L14.138|
;;;1537   			} else {					/* An SFN entry is found */
;;;1538   				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
00008a  f1b90f00          CMP      r9,#0
00008e  d104              BNE      |L14.154|
000090  4630              MOV      r0,r6
000092  f7fffffe          BL       sum_sfn
000096  4558              CMP      r0,r11
000098  d002              BEQ      |L14.160|
                  |L14.154|
;;;1539   					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
00009a  f64f70ff          MOV      r0,#0xffff
00009e  8420              STRH     r0,[r4,#0x20]
                  |L14.160|
;;;1540   				break;
0000a0  e009              B        |L14.182|
                  |L14.162|
;;;1541   			}
;;;1542   		}
;;;1543   #else		/* Non LFN configuration */
;;;1544   		if (c != DDE && (_FS_RPATH || c != '.') && a != AM_LFN && (a == AM_VOL) == vol)	/* Is it a valid entry? */
;;;1545   			break;
;;;1546   #endif
;;;1547   		res = dir_next(dj, 0);				/* Next entry */
0000a2  2100              MOVS     r1,#0
0000a4  4620              MOV      r0,r4
0000a6  f7fffffe          BL       dir_next
0000aa  4607              MOV      r7,r0
;;;1548   		if (res != FR_OK) break;
0000ac  b107              CBZ      r7,|L14.176|
0000ae  e002              B        |L14.182|
                  |L14.176|
0000b0  6920              LDR      r0,[r4,#0x10]         ;1518
0000b2  2800              CMP      r0,#0                 ;1518
0000b4  d1ad              BNE      |L14.18|
                  |L14.182|
0000b6  bf00              NOP                            ;1520
;;;1549   	}
;;;1550   
;;;1551   	if (res != FR_OK) dj->sect = 0;
0000b8  b10f              CBZ      r7,|L14.190|
0000ba  2000              MOVS     r0,#0
0000bc  6120              STR      r0,[r4,#0x10]
                  |L14.190|
;;;1552   
;;;1553   	return res;
0000be  4638              MOV      r0,r7
;;;1554   }
0000c0  e8bd9ff0          POP      {r4-r12,pc}
;;;1555   #endif	/* _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2 */
                          ENDP


                          AREA ||i.dir_register||, CODE, READONLY, ALIGN=1

                  dir_register PROC
;;;1563   static
;;;1564   FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;1565   	DIR *dj				/* Target directory with object name to be created */
;;;1566   )
;;;1567   {
000004  4604              MOV      r4,r0
;;;1568   	FRESULT res;
;;;1569   #if _USE_LFN	/* LFN configuration */
;;;1570   	WORD n, ne;
;;;1571   	BYTE sn[12], *fn, sum;
;;;1572   	WCHAR *lfn;
;;;1573   
;;;1574   
;;;1575   	fn = dj->fn; lfn = dj->lfn;
000006  f8d48018          LDR      r8,[r4,#0x18]
00000a  f8d4901c          LDR      r9,[r4,#0x1c]
;;;1576   	mem_cpy(sn, fn, 12);
00000e  220c              MOVS     r2,#0xc
000010  4641              MOV      r1,r8
000012  4668              MOV      r0,sp
000014  f7fffffe          BL       mem_cpy
;;;1577   
;;;1578   	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
000018  bf00              NOP      
;;;1579   		return FR_INVALID_NAME;
;;;1580   
;;;1581   	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
00001a  f89d000b          LDRB     r0,[sp,#0xb]
00001e  f0000001          AND      r0,r0,#1
000022  b328              CBZ      r0,|L15.112|
;;;1582   		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
000024  2000              MOVS     r0,#0
000026  f888000b          STRB     r0,[r8,#0xb]
00002a  61e0              STR      r0,[r4,#0x1c]
;;;1583   		for (n = 1; n < 100; n++) {
00002c  2601              MOVS     r6,#1
00002e  e00d              B        |L15.76|
                  |L15.48|
;;;1584   			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
000030  4633              MOV      r3,r6
000032  464a              MOV      r2,r9
000034  4669              MOV      r1,sp
000036  4640              MOV      r0,r8
000038  f7fffffe          BL       gen_numname
;;;1585   			res = dir_find(dj);				/* Check if the name collides with existing SFN */
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       dir_find
000042  4605              MOV      r5,r0
;;;1586   			if (res != FR_OK) break;
000044  b105              CBZ      r5,|L15.72|
000046  e003              B        |L15.80|
                  |L15.72|
000048  1c70              ADDS     r0,r6,#1              ;1583
00004a  b286              UXTH     r6,r0                 ;1583
                  |L15.76|
00004c  2e64              CMP      r6,#0x64              ;1583
00004e  dbef              BLT      |L15.48|
                  |L15.80|
000050  bf00              NOP      
;;;1587   		}
;;;1588   		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
000052  2e64              CMP      r6,#0x64
000054  d102              BNE      |L15.92|
000056  2007              MOVS     r0,#7
                  |L15.88|
;;;1589   		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
;;;1590   		fn[NS] = sn[NS]; dj->lfn = lfn;
;;;1591   	}
;;;1592   
;;;1593   	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
;;;1594   		for (n = 0; lfn[n]; n++) ;
;;;1595   		ne = (n + 25) / 13;
;;;1596   	} else {						/* Otherwise allocate an entry for an SFN  */
;;;1597   		ne = 1;
;;;1598   	}
;;;1599   	res = dir_alloc(dj, ne);		/* Allocate entries */
;;;1600   
;;;1601   	if (res == FR_OK && --ne) {		/* Set LFN entry if needed */
;;;1602   		res = dir_sdi(dj, (WORD)(dj->index - ne));
;;;1603   		if (res == FR_OK) {
;;;1604   			sum = sum_sfn(dj->fn);	/* Sum value of the SFN tied to the LFN */
;;;1605   			do {					/* Store LFN entries in bottom first */
;;;1606   				res = move_window(dj->fs, dj->sect);
;;;1607   				if (res != FR_OK) break;
;;;1608   				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
;;;1609   				dj->fs->wflag = 1;
;;;1610   				res = dir_next(dj, 0);	/* Next entry */
;;;1611   			} while (res == FR_OK && --ne);
;;;1612   		}
;;;1613   	}
;;;1614   #else	/* Non LFN configuration */
;;;1615   	res = dir_alloc(dj, 1);		/* Allocate an entry for SFN */
;;;1616   #endif
;;;1617   
;;;1618   	if (res == FR_OK) {				/* Set SFN entry */
;;;1619   		res = move_window(dj->fs, dj->sect);
;;;1620   		if (res == FR_OK) {
;;;1621   			mem_set(dj->dir, 0, SZ_DIR);	/* Clean the entry */
;;;1622   			mem_cpy(dj->dir, dj->fn, 11);	/* Put SFN */
;;;1623   #if _USE_LFN
;;;1624   			dj->dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
;;;1625   #endif
;;;1626   			dj->fs->wflag = 1;
;;;1627   		}
;;;1628   	}
;;;1629   
;;;1630   	return res;
;;;1631   }
000058  e8bd8ffe          POP      {r1-r11,pc}
                  |L15.92|
00005c  2d04              CMP      r5,#4                 ;1589
00005e  d001              BEQ      |L15.100|
000060  4628              MOV      r0,r5                 ;1589
000062  e7f9              B        |L15.88|
                  |L15.100|
000064  f89d000b          LDRB     r0,[sp,#0xb]          ;1590
000068  f888000b          STRB     r0,[r8,#0xb]          ;1590
00006c  f8c4901c          STR      r9,[r4,#0x1c]         ;1590
                  |L15.112|
000070  f89d000b          LDRB     r0,[sp,#0xb]          ;1593
000074  f0000002          AND      r0,r0,#2              ;1593
000078  b170              CBZ      r0,|L15.152|
00007a  2600              MOVS     r6,#0                 ;1594
00007c  e001              B        |L15.130|
                  |L15.126|
00007e  1c70              ADDS     r0,r6,#1              ;1594
000080  b286              UXTH     r6,r0                 ;1594
                  |L15.130|
000082  f8390016          LDRH     r0,[r9,r6,LSL #1]     ;1594
000086  2800              CMP      r0,#0                 ;1594
000088  d1f9              BNE      |L15.126|
00008a  f1060019          ADD      r0,r6,#0x19           ;1595
00008e  210d              MOVS     r1,#0xd               ;1595
000090  fb90f0f1          SDIV     r0,r0,r1              ;1595
000094  b287              UXTH     r7,r0                 ;1595
000096  e000              B        |L15.154|
                  |L15.152|
000098  2701              MOVS     r7,#1                 ;1597
                  |L15.154|
00009a  4639              MOV      r1,r7                 ;1599
00009c  4620              MOV      r0,r4                 ;1599
00009e  f7fffffe          BL       dir_alloc
0000a2  4605              MOV      r5,r0                 ;1599
0000a4  bb5d              CBNZ     r5,|L15.254|
0000a6  1e78              SUBS     r0,r7,#1              ;1601
0000a8  b280              UXTH     r0,r0                 ;1601
0000aa  0007              MOVS     r7,r0                 ;1601
0000ac  d027              BEQ      |L15.254|
0000ae  88e0              LDRH     r0,[r4,#6]            ;1602
0000b0  1bc0              SUBS     r0,r0,r7              ;1602
0000b2  b281              UXTH     r1,r0                 ;1602
0000b4  4620              MOV      r0,r4                 ;1602
0000b6  f7fffffe          BL       dir_sdi
0000ba  4605              MOV      r5,r0                 ;1602
0000bc  b9fd              CBNZ     r5,|L15.254|
0000be  69a0              LDR      r0,[r4,#0x18]         ;1604
0000c0  f7fffffe          BL       sum_sfn
0000c4  4682              MOV      r10,r0                ;1604
0000c6  bf00              NOP                            ;1605
                  |L15.200|
0000c8  6921              LDR      r1,[r4,#0x10]         ;1606
0000ca  6820              LDR      r0,[r4,#0]            ;1606
0000cc  f7fffffe          BL       move_window
0000d0  4605              MOV      r5,r0                 ;1606
0000d2  b105              CBZ      r5,|L15.214|
0000d4  e012              B        |L15.252|
                  |L15.214|
0000d6  b2fa              UXTB     r2,r7                 ;1608
0000d8  4653              MOV      r3,r10                ;1608
0000da  6961              LDR      r1,[r4,#0x14]         ;1608
0000dc  69e0              LDR      r0,[r4,#0x1c]         ;1608
0000de  f7fffffe          BL       fit_lfn
0000e2  2001              MOVS     r0,#1                 ;1609
0000e4  6821              LDR      r1,[r4,#0]            ;1609
0000e6  7108              STRB     r0,[r1,#4]            ;1609
0000e8  2100              MOVS     r1,#0                 ;1610
0000ea  4620              MOV      r0,r4                 ;1610
0000ec  f7fffffe          BL       dir_next
0000f0  4605              MOV      r5,r0                 ;1610
0000f2  b91d              CBNZ     r5,|L15.252|
0000f4  1e78              SUBS     r0,r7,#1              ;1611
0000f6  b280              UXTH     r0,r0                 ;1611
0000f8  0007              MOVS     r7,r0                 ;1611
0000fa  d1e5              BNE      |L15.200|
                  |L15.252|
0000fc  bf00              NOP                            ;1607
                  |L15.254|
0000fe  b9c5              CBNZ     r5,|L15.306|
000100  6921              LDR      r1,[r4,#0x10]         ;1619
000102  6820              LDR      r0,[r4,#0]            ;1619
000104  f7fffffe          BL       move_window
000108  4605              MOV      r5,r0                 ;1619
00010a  b995              CBNZ     r5,|L15.306|
00010c  2220              MOVS     r2,#0x20              ;1621
00010e  2100              MOVS     r1,#0                 ;1621
000110  6960              LDR      r0,[r4,#0x14]         ;1621
000112  f7fffffe          BL       mem_set
000116  220b              MOVS     r2,#0xb               ;1622
000118  e9d40105          LDRD     r0,r1,[r4,#0x14]      ;1622
00011c  f7fffffe          BL       mem_cpy
000120  69a0              LDR      r0,[r4,#0x18]         ;1624
000122  7ac0              LDRB     r0,[r0,#0xb]          ;1624
000124  f0000018          AND      r0,r0,#0x18           ;1624
000128  6961              LDR      r1,[r4,#0x14]         ;1624
00012a  7308              STRB     r0,[r1,#0xc]          ;1624
00012c  2001              MOVS     r0,#1                 ;1626
00012e  6821              LDR      r1,[r4,#0]            ;1626
000130  7108              STRB     r0,[r1,#4]            ;1626
                  |L15.306|
000132  4628              MOV      r0,r5                 ;1630
000134  e790              B        |L15.88|
;;;1632   #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.dir_remove||, CODE, READONLY, ALIGN=1

                  dir_remove PROC
;;;1641   static
;;;1642   FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
000000  b570              PUSH     {r4-r6,lr}
;;;1643   	DIR *dj				/* Directory object pointing the entry to be removed */
;;;1644   )
;;;1645   {
000002  4604              MOV      r4,r0
;;;1646   	FRESULT res;
;;;1647   #if _USE_LFN	/* LFN configuration */
;;;1648   	WORD i;
;;;1649   
;;;1650   	i = dj->index;	/* SFN index */
000004  88e6              LDRH     r6,[r4,#6]
;;;1651   	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
000006  8c20              LDRH     r0,[r4,#0x20]
000008  f64f72ff          MOV      r2,#0xffff
00000c  4290              CMP      r0,r2
00000e  d101              BNE      |L16.20|
000010  4630              MOV      r0,r6
000012  e000              B        |L16.22|
                  |L16.20|
000014  8c20              LDRH     r0,[r4,#0x20]
                  |L16.22|
000016  4601              MOV      r1,r0
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       dir_sdi
00001e  4605              MOV      r5,r0
;;;1652   	if (res == FR_OK) {
000020  b9e5              CBNZ     r5,|L16.92|
;;;1653   		do {
000022  bf00              NOP      
                  |L16.36|
;;;1654   			res = move_window(dj->fs, dj->sect);
000024  6921              LDR      r1,[r4,#0x10]
000026  6820              LDR      r0,[r4,#0]
000028  f7fffffe          BL       move_window
00002c  4605              MOV      r5,r0
;;;1655   			if (res != FR_OK) break;
00002e  b105              CBZ      r5,|L16.50|
000030  e010              B        |L16.84|
                  |L16.50|
;;;1656   			*dj->dir = DDE;			/* Mark the entry "deleted" */
000032  20e5              MOVS     r0,#0xe5
000034  6961              LDR      r1,[r4,#0x14]
000036  7008              STRB     r0,[r1,#0]
;;;1657   			dj->fs->wflag = 1;
000038  2001              MOVS     r0,#1
00003a  6821              LDR      r1,[r4,#0]
00003c  7108              STRB     r0,[r1,#4]
;;;1658   			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
00003e  88e0              LDRH     r0,[r4,#6]
000040  42b0              CMP      r0,r6
000042  db00              BLT      |L16.70|
000044  e006              B        |L16.84|
                  |L16.70|
;;;1659   			res = dir_next(dj, 0);		/* Next entry */
000046  2100              MOVS     r1,#0
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       dir_next
00004e  4605              MOV      r5,r0
;;;1660   		} while (res == FR_OK);
000050  2d00              CMP      r5,#0
000052  d0e7              BEQ      |L16.36|
                  |L16.84|
000054  bf00              NOP                            ;1655
;;;1661   		if (res == FR_NO_FILE) res = FR_INT_ERR;
000056  2d04              CMP      r5,#4
000058  d100              BNE      |L16.92|
00005a  2502              MOVS     r5,#2
                  |L16.92|
;;;1662   	}
;;;1663   
;;;1664   #else			/* Non LFN configuration */
;;;1665   	res = dir_sdi(dj, dj->index);
;;;1666   	if (res == FR_OK) {
;;;1667   		res = move_window(dj->fs, dj->sect);
;;;1668   		if (res == FR_OK) {
;;;1669   			*dj->dir = DDE;			/* Mark the entry "deleted" */
;;;1670   			dj->fs->wflag = 1;
;;;1671   		}
;;;1672   	}
;;;1673   #endif
;;;1674   
;;;1675   	return res;
00005c  4628              MOV      r0,r5
;;;1676   }
00005e  bd70              POP      {r4-r6,pc}
;;;1677   #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.dir_sdi||, CODE, READONLY, ALIGN=1

                  dir_sdi PROC
;;;1087   static
;;;1088   FRESULT dir_sdi (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1089   	DIR *dj,		/* Pointer to directory object */
;;;1090   	WORD idx		/* Index of directory table */
;;;1091   )
;;;1092   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;1093   	DWORD clst;
;;;1094   	WORD ic;
;;;1095   
;;;1096   
;;;1097   	dj->index = idx;
000008  80e6              STRH     r6,[r4,#6]
;;;1098   	clst = dj->sclust;
00000a  68a5              LDR      r5,[r4,#8]
;;;1099   	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
00000c  2d01              CMP      r5,#1
00000e  d003              BEQ      |L17.24|
000010  6820              LDR      r0,[r4,#0]
000012  6980              LDR      r0,[r0,#0x18]
000014  42a8              CMP      r0,r5
000016  d802              BHI      |L17.30|
                  |L17.24|
;;;1100   		return FR_INT_ERR;
000018  2002              MOVS     r0,#2
                  |L17.26|
;;;1101   	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
;;;1102   		clst = dj->fs->dirbase;
;;;1103   
;;;1104   	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
;;;1105   		dj->clust = clst;
;;;1106   		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
;;;1107   			return FR_INT_ERR;
;;;1108   		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
;;;1109   	}
;;;1110   	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
;;;1111   		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
;;;1112   		while (idx >= ic) {	/* Follow cluster chain */
;;;1113   			clst = get_fat(dj->fs, clst);				/* Get next cluster */
;;;1114   			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
;;;1115   			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
;;;1116   				return FR_INT_ERR;
;;;1117   			idx -= ic;
;;;1118   		}
;;;1119   		dj->clust = clst;
;;;1120   		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
;;;1121   	}
;;;1122   
;;;1123   	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
;;;1124   
;;;1125   	return FR_OK;	/* Seek succeeded */
;;;1126   }
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L17.30|
00001e  b92d              CBNZ     r5,|L17.44|
000020  6820              LDR      r0,[r4,#0]            ;1101
000022  7800              LDRB     r0,[r0,#0]            ;1101
000024  2803              CMP      r0,#3                 ;1101
000026  d101              BNE      |L17.44|
000028  6820              LDR      r0,[r4,#0]            ;1102
00002a  6a85              LDR      r5,[r0,#0x28]         ;1102
                  |L17.44|
00002c  b965              CBNZ     r5,|L17.72|
00002e  60e5              STR      r5,[r4,#0xc]          ;1105
000030  6820              LDR      r0,[r4,#0]            ;1106
000032  8900              LDRH     r0,[r0,#8]            ;1106
000034  42b0              CMP      r0,r6                 ;1106
000036  dc01              BGT      |L17.60|
000038  2002              MOVS     r0,#2                 ;1107
00003a  e7ee              B        |L17.26|
                  |L17.60|
00003c  6820              LDR      r0,[r4,#0]            ;1108
00003e  6a80              LDR      r0,[r0,#0x28]         ;1108
000040  eb001016          ADD      r0,r0,r6,LSR #4       ;1108
000044  6120              STR      r0,[r4,#0x10]         ;1108
000046  e020              B        |L17.138|
                  |L17.72|
000048  6820              LDR      r0,[r4,#0]            ;1111
00004a  7880              LDRB     r0,[r0,#2]            ;1111
00004c  0107              LSLS     r7,r0,#4              ;1111
00004e  e012              B        |L17.118|
                  |L17.80|
000050  4629              MOV      r1,r5                 ;1113
000052  6820              LDR      r0,[r4,#0]            ;1113
000054  f7fffffe          BL       get_fat
000058  4605              MOV      r5,r0                 ;1113
00005a  1c68              ADDS     r0,r5,#1              ;1114
00005c  b908              CBNZ     r0,|L17.98|
00005e  2001              MOVS     r0,#1                 ;1114
000060  e7db              B        |L17.26|
                  |L17.98|
000062  2d02              CMP      r5,#2                 ;1115
000064  d303              BCC      |L17.110|
000066  6820              LDR      r0,[r4,#0]            ;1115
000068  6980              LDR      r0,[r0,#0x18]         ;1115
00006a  42a8              CMP      r0,r5                 ;1115
00006c  d801              BHI      |L17.114|
                  |L17.110|
00006e  2002              MOVS     r0,#2                 ;1116
000070  e7d3              B        |L17.26|
                  |L17.114|
000072  1bf0              SUBS     r0,r6,r7              ;1117
000074  b286              UXTH     r6,r0                 ;1117
                  |L17.118|
000076  42be              CMP      r6,r7                 ;1112
000078  daea              BGE      |L17.80|
00007a  60e5              STR      r5,[r4,#0xc]          ;1119
00007c  4629              MOV      r1,r5                 ;1120
00007e  6820              LDR      r0,[r4,#0]            ;1120
000080  f7fffffe          BL       clust2sect
000084  eb001016          ADD      r0,r0,r6,LSR #4       ;1120
000088  6120              STR      r0,[r4,#0x10]         ;1120
                  |L17.138|
00008a  6820              LDR      r0,[r4,#0]            ;1123
00008c  3034              ADDS     r0,r0,#0x34           ;1123
00008e  f006010f          AND      r1,r6,#0xf            ;1123
000092  eb001041          ADD      r0,r0,r1,LSL #5       ;1123
000096  6160              STR      r0,[r4,#0x14]         ;1123
000098  2000              MOVS     r0,#0                 ;1125
00009a  e7be              B        |L17.26|
;;;1127   
                          ENDP


                          AREA ||i.enq_lock||, CODE, READONLY, ALIGN=2

                  enq_lock PROC
;;;645    static
;;;646    int enq_lock (void)	/* Check if an entry is available for a new file */
000000  2100              MOVS     r1,#0
;;;647    {
;;;648    	UINT i;
;;;649    
;;;650    	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
000002  e000              B        |L18.6|
                  |L18.4|
000004  1c49              ADDS     r1,r1,#1
                  |L18.6|
000006  2903              CMP      r1,#3
000008  d206              BCS      |L18.24|
00000a  eb010041          ADD      r0,r1,r1,LSL #1
00000e  4a05              LDR      r2,|L18.36|
000010  f8520020          LDR      r0,[r2,r0,LSL #2]
000014  2800              CMP      r0,#0
000016  d1f5              BNE      |L18.4|
                  |L18.24|
;;;651    	return (i == _FS_LOCK) ? 0 : 1;
000018  2903              CMP      r1,#3
00001a  d001              BEQ      |L18.32|
00001c  2001              MOVS     r0,#1
                  |L18.30|
;;;652    }
00001e  4770              BX       lr
                  |L18.32|
000020  2000              MOVS     r0,#0                 ;651
000022  e7fc              B        |L18.30|
;;;653    
                          ENDP

                  |L18.36|
                          DCD      Files

                          AREA ||i.f_chmod||, CODE, READONLY, ALIGN=1

                  f_chmod PROC
;;;3413   
;;;3414   FRESULT f_chmod (
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;3415   	const TCHAR *path,	/* Pointer to the file path */
;;;3416   	BYTE value,			/* Attribute bits */
;;;3417   	BYTE mask			/* Attribute mask to change */
;;;3418   )
;;;3419   {
000002  f5ad7d0c          SUB      sp,sp,#0x230
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;3420   	FRESULT res;
;;;3421   	DIR dj;
;;;3422   	BYTE *dir;
;;;3423   	DEF_NAMEBUF;
;;;3424   
;;;3425   
;;;3426   	res = chk_mounted(&path, &dj.fs, 1);
00000a  2201              MOVS     r2,#1
00000c  a983              ADD      r1,sp,#0x20c
00000e  a88c              ADD      r0,sp,#0x230
000010  f7fffffe          BL       chk_mounted
000014  4606              MOV      r6,r0
;;;3427   	if (res == FR_OK) {
000016  b9ee              CBNZ     r6,|L19.84|
;;;3428   		INIT_BUF(dj);
000018  a880              ADD      r0,sp,#0x200
00001a  9089              STR      r0,[sp,#0x224]
00001c  f8cdd228          STR      sp,[sp,#0x228]
;;;3429   		res = follow_path(&dj, path);		/* Follow the file path */
000020  a883              ADD      r0,sp,#0x20c
000022  998c              LDR      r1,[sp,#0x230]
000024  f7fffffe          BL       follow_path
000028  4606              MOV      r6,r0
;;;3430   		FREE_BUF();
;;;3431   		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
00002a  bf00              NOP      
;;;3432   			res = FR_INVALID_NAME;
;;;3433   		if (res == FR_OK) {
00002c  b996              CBNZ     r6,|L19.84|
;;;3434   			dir = dj.dir;
00002e  9d88              LDR      r5,[sp,#0x220]
;;;3435   			if (!dir) {						/* Is it a root directory? */
000030  b90d              CBNZ     r5,|L19.54|
;;;3436   				res = FR_INVALID_NAME;
000032  2606              MOVS     r6,#6
000034  e00e              B        |L19.84|
                  |L19.54|
;;;3437   			} else {						/* File or sub directory */
;;;3438   				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
000036  f0040427          AND      r4,r4,#0x27
;;;3439   				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
00003a  ea070004          AND      r0,r7,r4
00003e  7ae9              LDRB     r1,[r5,#0xb]
000040  43a1              BICS     r1,r1,r4
000042  4308              ORRS     r0,r0,r1
000044  72e8              STRB     r0,[r5,#0xb]
;;;3440   				dj.fs->wflag = 1;
000046  2001              MOVS     r0,#1
000048  9983              LDR      r1,[sp,#0x20c]
00004a  7108              STRB     r0,[r1,#4]
;;;3441   				res = sync_fs(dj.fs);
00004c  9883              LDR      r0,[sp,#0x20c]
00004e  f7fffffe          BL       sync_fs
000052  4606              MOV      r6,r0
                  |L19.84|
;;;3442   			}
;;;3443   		}
;;;3444   	}
;;;3445   
;;;3446   	LEAVE_FF(dj.fs, res);
000054  4630              MOV      r0,r6
;;;3447   }
000056  f50d7d0f          ADD      sp,sp,#0x23c
00005a  bdf0              POP      {r4-r7,pc}
;;;3448   
                          ENDP


                          AREA ||i.f_close||, CODE, READONLY, ALIGN=1

                  f_close PROC
;;;2707   
;;;2708   FRESULT f_close (
000000  b570              PUSH     {r4-r6,lr}
;;;2709   	FIL *fp		/* Pointer to the file object to be closed */
;;;2710   )
;;;2711   {
000002  4604              MOV      r4,r0
;;;2712   	FRESULT res;
;;;2713   
;;;2714   
;;;2715   #if _FS_READONLY
;;;2716   	res = validate(fp);
;;;2717   	{
;;;2718   #if _FS_REENTRANT
;;;2719   		FATFS *fs = fp->fs;
;;;2720   #endif
;;;2721   		if (res == FR_OK) fp->fs = 0;	/* Discard file object */
;;;2722   		LEAVE_FF(fs, res);
;;;2723   	}
;;;2724   #else
;;;2725   	res = f_sync(fp);		/* Flush cached data */
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       f_sync
00000a  4605              MOV      r5,r0
;;;2726   #if _FS_LOCK
;;;2727   	if (res == FR_OK) {		/* Decrement open counter */
00000c  b91d              CBNZ     r5,|L20.22|
;;;2728   #if _FS_REENTRANT
;;;2729   		FATFS *fs = fp->fs;;
;;;2730   		res = validate(fp);
;;;2731   		if (res == FR_OK) {
;;;2732   			res = dec_lock(fp->lockid);	
;;;2733   			unlock_fs(fs, FR_OK);
;;;2734   		}
;;;2735   #else
;;;2736   		res = dec_lock(fp->lockid);
00000e  6a60              LDR      r0,[r4,#0x24]
000010  f7fffffe          BL       dec_lock
000014  4605              MOV      r5,r0
                  |L20.22|
;;;2737   #endif
;;;2738   	}
;;;2739   #endif
;;;2740   	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
000016  b90d              CBNZ     r5,|L20.28|
000018  2000              MOVS     r0,#0
00001a  6020              STR      r0,[r4,#0]
                  |L20.28|
;;;2741   	return res;
00001c  4628              MOV      r0,r5
;;;2742   #endif
;;;2743   }
00001e  bd70              POP      {r4-r6,pc}
;;;2744   
                          ENDP


                          AREA ||i.f_getfree||, CODE, READONLY, ALIGN=1

                  f_getfree PROC
;;;3156   
;;;3157   FRESULT f_getfree (
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;3158   	const TCHAR *path,	/* Path name of the logical drive number */
;;;3159   	DWORD *nclst,		/* Pointer to a variable to return number of free clusters */
;;;3160   	FATFS **fatfs		/* Pointer to return pointer to corresponding file system object */
;;;3161   )
;;;3162   {
000004  b082              SUB      sp,sp,#8
000006  468b              MOV      r11,r1
;;;3163   	FRESULT res;
;;;3164   	FATFS *fs;
;;;3165   	DWORD n, clst, sect, stat;
;;;3166   	UINT i;
;;;3167   	BYTE fat, *p;
;;;3168   
;;;3169   
;;;3170   	/* Get drive number */
;;;3171   	res = chk_mounted(&path, fatfs, 0);
000008  2200              MOVS     r2,#0
00000a  a802              ADD      r0,sp,#8
00000c  9904              LDR      r1,[sp,#0x10]
00000e  f7fffffe          BL       chk_mounted
000012  9001              STR      r0,[sp,#4]
;;;3172   	fs = *fatfs;
000014  9804              LDR      r0,[sp,#0x10]
000016  6804              LDR      r4,[r0,#0]
;;;3173   	if (res == FR_OK) {
000018  9801              LDR      r0,[sp,#4]
00001a  2800              CMP      r0,#0
00001c  d16e              BNE      |L21.252|
;;;3174   		/* If free_clust is valid, return it without full cluster scan */
;;;3175   		if (fs->free_clust <= fs->n_fatent - 2) {
00001e  69a0              LDR      r0,[r4,#0x18]
000020  1e80              SUBS     r0,r0,#2
000022  6921              LDR      r1,[r4,#0x10]
000024  4281              CMP      r1,r0
000026  d803              BHI      |L21.48|
;;;3176   			*nclst = fs->free_clust;
000028  6920              LDR      r0,[r4,#0x10]
00002a  f8cb0000          STR      r0,[r11,#0]
00002e  e065              B        |L21.252|
                  |L21.48|
;;;3177   		} else {
;;;3178   			/* Get number of free clusters */
;;;3179   			fat = fs->fs_type;
000030  f894a000          LDRB     r10,[r4,#0]
;;;3180   			n = 0;
000034  2600              MOVS     r6,#0
;;;3181   			if (fat == FS_FAT12) {
000036  f1ba0f01          CMP      r10,#1
00003a  d11c              BNE      |L21.118|
;;;3182   				clst = 2;
00003c  2702              MOVS     r7,#2
;;;3183   				do {
00003e  bf00              NOP      
                  |L21.64|
;;;3184   					stat = get_fat(fs, clst);
000040  4639              MOV      r1,r7
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       get_fat
000048  4680              MOV      r8,r0
;;;3185   					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
00004a  f1080001          ADD      r0,r8,#1
00004e  b910              CBNZ     r0,|L21.86|
000050  2001              MOVS     r0,#1
000052  9001              STR      r0,[sp,#4]
000054  e00e              B        |L21.116|
                  |L21.86|
;;;3186   					if (stat == 1) { res = FR_INT_ERR; break; }
000056  f1b80f01          CMP      r8,#1
00005a  d102              BNE      |L21.98|
00005c  2002              MOVS     r0,#2
00005e  9001              STR      r0,[sp,#4]
000060  e008              B        |L21.116|
                  |L21.98|
;;;3187   					if (stat == 0) n++;
000062  f1b80f00          CMP      r8,#0
000066  d100              BNE      |L21.106|
000068  1c76              ADDS     r6,r6,#1
                  |L21.106|
;;;3188   				} while (++clst < fs->n_fatent);
00006a  1c78              ADDS     r0,r7,#1
00006c  4607              MOV      r7,r0
00006e  69a1              LDR      r1,[r4,#0x18]
000070  4288              CMP      r0,r1
000072  d3e5              BCC      |L21.64|
                  |L21.116|
000074  e03a              B        |L21.236|
                  |L21.118|
;;;3189   			} else {
;;;3190   				clst = fs->n_fatent;
000076  69a7              LDR      r7,[r4,#0x18]
;;;3191   				sect = fs->fatbase;
000078  6a60              LDR      r0,[r4,#0x24]
00007a  9000              STR      r0,[sp,#0]
;;;3192   				i = 0; p = 0;
00007c  f04f0900          MOV      r9,#0
000080  2500              MOVS     r5,#0
;;;3193   				do {
000082  bf00              NOP      
                  |L21.132|
;;;3194   					if (!i) {
000084  f1b90f00          CMP      r9,#0
000088  d10e              BNE      |L21.168|
;;;3195   						res = move_window(fs, sect++);
00008a  9800              LDR      r0,[sp,#0]
00008c  1c42              ADDS     r2,r0,#1
00008e  4601              MOV      r1,r0
000090  4620              MOV      r0,r4
000092  9200              STR      r2,[sp,#0]
000094  f7fffffe          BL       move_window
000098  9001              STR      r0,[sp,#4]
;;;3196   						if (res != FR_OK) break;
00009a  9801              LDR      r0,[sp,#4]
00009c  b100              CBZ      r0,|L21.160|
00009e  e024              B        |L21.234|
                  |L21.160|
;;;3197   						p = fs->win;
0000a0  f1040534          ADD      r5,r4,#0x34
;;;3198   						i = SS(fs);
0000a4  f44f7900          MOV      r9,#0x200
                  |L21.168|
;;;3199   					}
;;;3200   					if (fat == FS_FAT16) {
0000a8  f1ba0f02          CMP      r10,#2
0000ac  d109              BNE      |L21.194|
;;;3201   						if (LD_WORD(p) == 0) n++;
0000ae  7828              LDRB     r0,[r5,#0]
0000b0  7869              LDRB     r1,[r5,#1]
0000b2  ea402001          ORR      r0,r0,r1,LSL #8
0000b6  b900              CBNZ     r0,|L21.186|
0000b8  1c76              ADDS     r6,r6,#1
                  |L21.186|
;;;3202   						p += 2; i -= 2;
0000ba  1cad              ADDS     r5,r5,#2
0000bc  f1a90902          SUB      r9,r9,#2
0000c0  e010              B        |L21.228|
                  |L21.194|
;;;3203   					} else {
;;;3204   						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
0000c2  78e8              LDRB     r0,[r5,#3]
0000c4  0600              LSLS     r0,r0,#24
0000c6  78a9              LDRB     r1,[r5,#2]
0000c8  ea404001          ORR      r0,r0,r1,LSL #16
0000cc  7869              LDRB     r1,[r5,#1]
0000ce  ea402001          ORR      r0,r0,r1,LSL #8
0000d2  7829              LDRB     r1,[r5,#0]
0000d4  4308              ORRS     r0,r0,r1
0000d6  f0204070          BIC      r0,r0,#0xf0000000
0000da  b900              CBNZ     r0,|L21.222|
0000dc  1c76              ADDS     r6,r6,#1
                  |L21.222|
;;;3205   						p += 4; i -= 4;
0000de  1d2d              ADDS     r5,r5,#4
0000e0  f1a90904          SUB      r9,r9,#4
                  |L21.228|
;;;3206   					}
;;;3207   				} while (--clst);
0000e4  1e78              SUBS     r0,r7,#1
0000e6  0007              MOVS     r7,r0
0000e8  d1cc              BNE      |L21.132|
                  |L21.234|
0000ea  bf00              NOP                            ;3196
                  |L21.236|
;;;3208   			}
;;;3209   			fs->free_clust = n;
0000ec  6126              STR      r6,[r4,#0x10]
;;;3210   			if (fat == FS_FAT32) fs->fsi_flag = 1;
0000ee  f1ba0f03          CMP      r10,#3
0000f2  d101              BNE      |L21.248|
0000f4  2001              MOVS     r0,#1
0000f6  7160              STRB     r0,[r4,#5]
                  |L21.248|
;;;3211   			*nclst = n;
0000f8  f8cb6000          STR      r6,[r11,#0]
                  |L21.252|
;;;3212   		}
;;;3213   	}
;;;3214   	LEAVE_FF(fs, res);
0000fc  9801              LDR      r0,[sp,#4]
;;;3215   }
0000fe  b005              ADD      sp,sp,#0x14
000100  e8bd8ff0          POP      {r4-r11,pc}
;;;3216   
                          ENDP


                          AREA ||i.f_lseek||, CODE, READONLY, ALIGN=1

                  f_lseek PROC
;;;2876   
;;;2877   FRESULT f_lseek (
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;2878   	FIL *fp,		/* Pointer to the file object */
;;;2879   	DWORD ofs		/* File pointer from top of file */
;;;2880   )
;;;2881   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;2882   	FRESULT res;
;;;2883   
;;;2884   
;;;2885   	res = validate(fp);					/* Check validity of the object */
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       validate
00000e  4682              MOV      r10,r0
;;;2886   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
000010  f1ba0f00          CMP      r10,#0
000014  d002              BEQ      |L22.28|
000016  4650              MOV      r0,r10
                  |L22.24|
;;;2887   	if (fp->flag & FA__ERROR)			/* Check abort flag */
;;;2888   		LEAVE_FF(fp->fs, FR_INT_ERR);
;;;2889   
;;;2890   #if _USE_FASTSEEK
;;;2891   	if (fp->cltbl) {	/* Fast seek */
;;;2892   		DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
;;;2893   
;;;2894   		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
;;;2895   			tbl = fp->cltbl;
;;;2896   			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
;;;2897   			cl = fp->sclust;			/* Top of the chain */
;;;2898   			if (cl) {
;;;2899   				do {
;;;2900   					/* Get a fragment */
;;;2901   					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
;;;2902   					do {
;;;2903   						pcl = cl; ncl++;
;;;2904   						cl = get_fat(fp->fs, cl);
;;;2905   						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
;;;2906   						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2907   					} while (cl == pcl + 1);
;;;2908   					if (ulen <= tlen) {		/* Store the length and top of the fragment */
;;;2909   						*tbl++ = ncl; *tbl++ = tcl;
;;;2910   					}
;;;2911   				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
;;;2912   			}
;;;2913   			*fp->cltbl = ulen;	/* Number of items used */
;;;2914   			if (ulen <= tlen)
;;;2915   				*tbl = 0;		/* Terminate table */
;;;2916   			else
;;;2917   				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
;;;2918   
;;;2919   		} else {						/* Fast seek */
;;;2920   			if (ofs > fp->fsize)		/* Clip offset at the file size */
;;;2921   				ofs = fp->fsize;
;;;2922   			fp->fptr = ofs;				/* Set file pointer */
;;;2923   			if (ofs) {
;;;2924   				fp->clust = clmt_clust(fp, ofs - 1);
;;;2925   				dsc = clust2sect(fp->fs, fp->clust);
;;;2926   				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
;;;2927   				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
;;;2928   				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
;;;2929   #if !_FS_TINY
;;;2930   #if !_FS_READONLY
;;;2931   					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
;;;2932   						if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;2933   							ABORT(fp->fs, FR_DISK_ERR);
;;;2934   						fp->flag &= ~FA__DIRTY;
;;;2935   					}
;;;2936   #endif
;;;2937   					if (disk_read(fp->fs->drv, fp->buf, dsc, 1) != RES_OK)	/* Load current sector */
;;;2938   						ABORT(fp->fs, FR_DISK_ERR);
;;;2939   #endif
;;;2940   					fp->dsect = dsc;
;;;2941   				}
;;;2942   			}
;;;2943   		}
;;;2944   	} else
;;;2945   #endif
;;;2946   
;;;2947   	/* Normal Seek */
;;;2948   	{
;;;2949   		DWORD clst, bcs, nsect, ifptr;
;;;2950   
;;;2951   		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
;;;2952   #if !_FS_READONLY
;;;2953   			 && !(fp->flag & FA_WRITE)
;;;2954   #endif
;;;2955   			) ofs = fp->fsize;
;;;2956   
;;;2957   		ifptr = fp->fptr;
;;;2958   		fp->fptr = nsect = 0;
;;;2959   		if (ofs) {
;;;2960   			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
;;;2961   			if (ifptr > 0 &&
;;;2962   				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
;;;2963   				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
;;;2964   				ofs -= fp->fptr;
;;;2965   				clst = fp->clust;
;;;2966   			} else {									/* When seek to back cluster, */
;;;2967   				clst = fp->sclust;						/* start from the first cluster */
;;;2968   #if !_FS_READONLY
;;;2969   				if (clst == 0) {						/* If no cluster chain, create a new chain */
;;;2970   					clst = create_chain(fp->fs, 0);
;;;2971   					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
;;;2972   					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2973   					fp->sclust = clst;
;;;2974   				}
;;;2975   #endif
;;;2976   				fp->clust = clst;
;;;2977   			}
;;;2978   			if (clst != 0) {
;;;2979   				while (ofs > bcs) {						/* Cluster following loop */
;;;2980   #if !_FS_READONLY
;;;2981   					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
;;;2982   						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
;;;2983   						if (clst == 0) {				/* When disk gets full, clip file size */
;;;2984   							ofs = bcs; break;
;;;2985   						}
;;;2986   					} else
;;;2987   #endif
;;;2988   						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
;;;2989   					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2990   					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
;;;2991   					fp->clust = clst;
;;;2992   					fp->fptr += bcs;
;;;2993   					ofs -= bcs;
;;;2994   				}
;;;2995   				fp->fptr += ofs;
;;;2996   				if (ofs % SS(fp->fs)) {
;;;2997   					nsect = clust2sect(fp->fs, clst);	/* Current sector */
;;;2998   					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
;;;2999   					nsect += ofs / SS(fp->fs);
;;;3000   				}
;;;3001   			}
;;;3002   		}
;;;3003   		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
;;;3004   #if !_FS_TINY
;;;3005   #if !_FS_READONLY
;;;3006   			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
;;;3007   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;3008   					ABORT(fp->fs, FR_DISK_ERR);
;;;3009   				fp->flag &= ~FA__DIRTY;
;;;3010   			}
;;;3011   #endif
;;;3012   			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
;;;3013   				ABORT(fp->fs, FR_DISK_ERR);
;;;3014   #endif
;;;3015   			fp->dsect = nsect;
;;;3016   		}
;;;3017   #if !_FS_READONLY
;;;3018   		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
;;;3019   			fp->fsize = fp->fptr;
;;;3020   			fp->flag |= FA__WRITTEN;
;;;3021   		}
;;;3022   #endif
;;;3023   	}
;;;3024   
;;;3025   	LEAVE_FF(fp->fs, res);
;;;3026   }
000018  e8bd87f0          POP      {r4-r10,pc}
                  |L22.28|
00001c  79a0              LDRB     r0,[r4,#6]            ;2887
00001e  f0000080          AND      r0,r0,#0x80           ;2887
000022  b108              CBZ      r0,|L22.40|
000024  2002              MOVS     r0,#2                 ;2888
000026  e7f7              B        |L22.24|
                  |L22.40|
000028  68e0              LDR      r0,[r4,#0xc]          ;2951
00002a  42b0              CMP      r0,r6                 ;2951
00002c  d204              BCS      |L22.56|
00002e  79a0              LDRB     r0,[r4,#6]            ;2953
000030  f0000002          AND      r0,r0,#2              ;2953
000034  b900              CBNZ     r0,|L22.56|
000036  68e6              LDR      r6,[r4,#0xc]          ;2955
                  |L22.56|
000038  f8d49008          LDR      r9,[r4,#8]            ;2957
00003c  f04f0800          MOV      r8,#0                 ;2958
000040  f8c48008          STR      r8,[r4,#8]            ;2958
000044  2e00              CMP      r6,#0                 ;2959
000046  d077              BEQ      |L22.312|
000048  6820              LDR      r0,[r4,#0]            ;2960
00004a  7880              LDRB     r0,[r0,#2]            ;2960
00004c  0247              LSLS     r7,r0,#9              ;2960
00004e  f1b90f00          CMP      r9,#0                 ;2961
000052  d011              BEQ      |L22.120|
000054  1e70              SUBS     r0,r6,#1              ;2962
000056  fbb0f1f7          UDIV     r1,r0,r7              ;2962
00005a  f1a90001          SUB      r0,r9,#1              ;2962
00005e  fbb0f0f7          UDIV     r0,r0,r7              ;2962
000062  4281              CMP      r1,r0                 ;2962
000064  d308              BCC      |L22.120|
000066  f1a90001          SUB      r0,r9,#1              ;2963
00006a  1e79              SUBS     r1,r7,#1              ;2963
00006c  4388              BICS     r0,r0,r1              ;2963
00006e  60a0              STR      r0,[r4,#8]            ;2963
000070  68a0              LDR      r0,[r4,#8]            ;2964
000072  1a36              SUBS     r6,r6,r0              ;2964
000074  6965              LDR      r5,[r4,#0x14]         ;2965
000076  e018              B        |L22.170|
                  |L22.120|
000078  6925              LDR      r5,[r4,#0x10]         ;2967
00007a  b9ad              CBNZ     r5,|L22.168|
00007c  2100              MOVS     r1,#0                 ;2970
00007e  6820              LDR      r0,[r4,#0]            ;2970
000080  f7fffffe          BL       create_chain
000084  4605              MOV      r5,r0                 ;2970
000086  2d01              CMP      r5,#1                 ;2971
000088  d105              BNE      |L22.150|
00008a  79a0              LDRB     r0,[r4,#6]            ;2971
00008c  f0400080          ORR      r0,r0,#0x80           ;2971
000090  71a0              STRB     r0,[r4,#6]            ;2971
000092  2002              MOVS     r0,#2                 ;2971
000094  e7c0              B        |L22.24|
                  |L22.150|
000096  1c68              ADDS     r0,r5,#1              ;2972
000098  b928              CBNZ     r0,|L22.166|
00009a  79a0              LDRB     r0,[r4,#6]            ;2972
00009c  f0400080          ORR      r0,r0,#0x80           ;2972
0000a0  71a0              STRB     r0,[r4,#6]            ;2972
0000a2  2001              MOVS     r0,#1                 ;2972
0000a4  e7b8              B        |L22.24|
                  |L22.166|
0000a6  6125              STR      r5,[r4,#0x10]         ;2973
                  |L22.168|
0000a8  6165              STR      r5,[r4,#0x14]         ;2976
                  |L22.170|
0000aa  2d00              CMP      r5,#0                 ;2978
0000ac  d044              BEQ      |L22.312|
0000ae  e029              B        |L22.260|
                  |L22.176|
0000b0  79a0              LDRB     r0,[r4,#6]            ;2981
0000b2  f0000002          AND      r0,r0,#2              ;2981
0000b6  b138              CBZ      r0,|L22.200|
0000b8  4629              MOV      r1,r5                 ;2982
0000ba  6820              LDR      r0,[r4,#0]            ;2982
0000bc  f7fffffe          BL       create_chain
0000c0  4605              MOV      r5,r0                 ;2982
0000c2  b935              CBNZ     r5,|L22.210|
0000c4  463e              MOV      r6,r7                 ;2984
0000c6  e01f              B        |L22.264|
                  |L22.200|
0000c8  4629              MOV      r1,r5                 ;2988
0000ca  6820              LDR      r0,[r4,#0]            ;2988
0000cc  f7fffffe          BL       get_fat
0000d0  4605              MOV      r5,r0                 ;2988
                  |L22.210|
0000d2  1c68              ADDS     r0,r5,#1              ;2989
0000d4  b928              CBNZ     r0,|L22.226|
0000d6  79a0              LDRB     r0,[r4,#6]            ;2989
0000d8  f0400080          ORR      r0,r0,#0x80           ;2989
0000dc  71a0              STRB     r0,[r4,#6]            ;2989
0000de  2001              MOVS     r0,#1                 ;2989
0000e0  e79a              B        |L22.24|
                  |L22.226|
0000e2  2d01              CMP      r5,#1                 ;2990
0000e4  d903              BLS      |L22.238|
0000e6  6820              LDR      r0,[r4,#0]            ;2990
0000e8  6980              LDR      r0,[r0,#0x18]         ;2990
0000ea  42a8              CMP      r0,r5                 ;2990
0000ec  d805              BHI      |L22.250|
                  |L22.238|
0000ee  79a0              LDRB     r0,[r4,#6]            ;2990
0000f0  f0400080          ORR      r0,r0,#0x80           ;2990
0000f4  71a0              STRB     r0,[r4,#6]            ;2990
0000f6  2002              MOVS     r0,#2                 ;2990
0000f8  e78e              B        |L22.24|
                  |L22.250|
0000fa  6165              STR      r5,[r4,#0x14]         ;2991
0000fc  68a0              LDR      r0,[r4,#8]            ;2992
0000fe  4438              ADD      r0,r0,r7              ;2992
000100  60a0              STR      r0,[r4,#8]            ;2992
000102  1bf6              SUBS     r6,r6,r7              ;2993
                  |L22.260|
000104  42be              CMP      r6,r7                 ;2979
000106  d8d3              BHI      |L22.176|
                  |L22.264|
000108  bf00              NOP                            ;2984
00010a  68a0              LDR      r0,[r4,#8]            ;2995
00010c  4430              ADD      r0,r0,r6              ;2995
00010e  60a0              STR      r0,[r4,#8]            ;2995
000110  f3c60008          UBFX     r0,r6,#0,#9           ;2996
000114  b168              CBZ      r0,|L22.306|
000116  4629              MOV      r1,r5                 ;2997
000118  6820              LDR      r0,[r4,#0]            ;2997
00011a  f7fffffe          BL       clust2sect
00011e  4680              MOV      r8,r0                 ;2997
000120  f1b80f00          CMP      r8,#0                 ;2998
000124  d106              BNE      |L22.308|
000126  79a0              LDRB     r0,[r4,#6]            ;2998
000128  f0400080          ORR      r0,r0,#0x80           ;2998
00012c  71a0              STRB     r0,[r4,#6]            ;2998
00012e  2002              MOVS     r0,#2                 ;2998
000130  e772              B        |L22.24|
                  |L22.306|
000132  e001              B        |L22.312|
                  |L22.308|
000134  eb082856          ADD      r8,r8,r6,LSR #9       ;2999
                  |L22.312|
000138  8920              LDRH     r0,[r4,#8]            ;3003
00013a  f3c00008          UBFX     r0,r0,#0,#9           ;3003
00013e  b350              CBZ      r0,|L22.406|
000140  69a0              LDR      r0,[r4,#0x18]         ;3003
000142  4540              CMP      r0,r8                 ;3003
000144  d027              BEQ      |L22.406|
000146  79a0              LDRB     r0,[r4,#6]            ;3006
000148  f0000040          AND      r0,r0,#0x40           ;3006
00014c  b190              CBZ      r0,|L22.372|
00014e  6821              LDR      r1,[r4,#0]            ;3007
000150  7848              LDRB     r0,[r1,#1]            ;3007
000152  2301              MOVS     r3,#1                 ;3007
000154  f1040128          ADD      r1,r4,#0x28           ;3007
000158  69a2              LDR      r2,[r4,#0x18]         ;3007
00015a  f7fffffe          BL       disk_write
00015e  b128              CBZ      r0,|L22.364|
000160  79a0              LDRB     r0,[r4,#6]            ;3008
000162  f0400080          ORR      r0,r0,#0x80           ;3008
000166  71a0              STRB     r0,[r4,#6]            ;3008
000168  2001              MOVS     r0,#1                 ;3008
00016a  e755              B        |L22.24|
                  |L22.364|
00016c  79a0              LDRB     r0,[r4,#6]            ;3009
00016e  f0200040          BIC      r0,r0,#0x40           ;3009
000172  71a0              STRB     r0,[r4,#6]            ;3009
                  |L22.372|
000174  6821              LDR      r1,[r4,#0]            ;3012
000176  7848              LDRB     r0,[r1,#1]            ;3012
000178  2301              MOVS     r3,#1                 ;3012
00017a  4642              MOV      r2,r8                 ;3012
00017c  f1040128          ADD      r1,r4,#0x28           ;3012
000180  f7fffffe          BL       disk_read
000184  b128              CBZ      r0,|L22.402|
000186  79a0              LDRB     r0,[r4,#6]            ;3013
000188  f0400080          ORR      r0,r0,#0x80           ;3013
00018c  71a0              STRB     r0,[r4,#6]            ;3013
00018e  2001              MOVS     r0,#1                 ;3013
000190  e742              B        |L22.24|
                  |L22.402|
000192  f8c48018          STR      r8,[r4,#0x18]         ;3015
                  |L22.406|
000196  e9d40102          LDRD     r0,r1,[r4,#8]         ;3018
00019a  4288              CMP      r0,r1                 ;3018
00019c  d905              BLS      |L22.426|
00019e  68a0              LDR      r0,[r4,#8]            ;3019
0001a0  60e0              STR      r0,[r4,#0xc]          ;3019
0001a2  79a0              LDRB     r0,[r4,#6]            ;3020
0001a4  f0400020          ORR      r0,r0,#0x20           ;3020
0001a8  71a0              STRB     r0,[r4,#6]            ;3020
                  |L22.426|
0001aa  4650              MOV      r0,r10                ;3025
0001ac  e734              B        |L22.24|
;;;3027   
                          ENDP


                          AREA ||i.f_mkdir||, CODE, READONLY, ALIGN=1

                  f_mkdir PROC
;;;3340   
;;;3341   FRESULT f_mkdir (
000000  e92d47f1          PUSH     {r0,r4-r10,lr}
;;;3342   	const TCHAR *path		/* Pointer to the directory path */
;;;3343   )
;;;3344   {
000004  f5ad7d0d          SUB      sp,sp,#0x234
;;;3345   	FRESULT res;
;;;3346   	DIR dj;
;;;3347   	BYTE *dir, n;
;;;3348   	DWORD dsc, dcl, pcl, tm = get_fattime();
000008  f7fffffe          BL       get_fattime
00000c  4606              MOV      r6,r0
;;;3349   	DEF_NAMEBUF;
;;;3350   
;;;3351   
;;;3352   	res = chk_mounted(&path, &dj.fs, 1);
00000e  2201              MOVS     r2,#1
000010  a984              ADD      r1,sp,#0x210
000012  a88d              ADD      r0,sp,#0x234
000014  f7fffffe          BL       chk_mounted
000018  4605              MOV      r5,r0
;;;3353   	if (res == FR_OK) {
00001a  2d00              CMP      r5,#0
                  |L23.28|
00001c  d16f              BNE      |L23.254|
;;;3354   		INIT_BUF(dj);
00001e  a881              ADD      r0,sp,#0x204
000020  908a              STR      r0,[sp,#0x228]
000022  a801              ADD      r0,sp,#4
000024  908b              STR      r0,[sp,#0x22c]
;;;3355   		res = follow_path(&dj, path);			/* Follow the file path */
000026  a884              ADD      r0,sp,#0x210
000028  998d              LDR      r1,[sp,#0x234]
00002a  f7fffffe          BL       follow_path
00002e  4605              MOV      r5,r0
;;;3356   		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
000030  b905              CBNZ     r5,|L23.52|
000032  2508              MOVS     r5,#8
                  |L23.52|
;;;3357   		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
000034  bf00              NOP      
;;;3358   			res = FR_INVALID_NAME;
;;;3359   		if (res == FR_NO_FILE) {				/* Can create a new directory */
000036  2d04              CMP      r5,#4
000038  d1f0              BNE      |L23.28|
;;;3360   			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
00003a  2100              MOVS     r1,#0
00003c  9884              LDR      r0,[sp,#0x210]
00003e  f7fffffe          BL       create_chain
000042  4607              MOV      r7,r0
;;;3361   			res = FR_OK;
000044  2500              MOVS     r5,#0
;;;3362   			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
000046  b907              CBNZ     r7,|L23.74|
000048  2507              MOVS     r5,#7
                  |L23.74|
;;;3363   			if (dcl == 1) res = FR_INT_ERR;
00004a  2f01              CMP      r7,#1
00004c  d100              BNE      |L23.80|
00004e  2502              MOVS     r5,#2
                  |L23.80|
;;;3364   			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
000050  1c78              ADDS     r0,r7,#1
000052  b900              CBNZ     r0,|L23.86|
000054  2501              MOVS     r5,#1
                  |L23.86|
;;;3365   			if (res == FR_OK)					/* Flush FAT */
000056  b91d              CBNZ     r5,|L23.96|
;;;3366   				res = sync_window(dj.fs);
000058  9884              LDR      r0,[sp,#0x210]
00005a  f7fffffe          BL       sync_window
00005e  4605              MOV      r5,r0
                  |L23.96|
;;;3367   			if (res == FR_OK) {					/* Initialize the new directory table */
000060  2d00              CMP      r5,#0
000062  d15b              BNE      |L23.284|
;;;3368   				dsc = clust2sect(dj.fs, dcl);
000064  4639              MOV      r1,r7
000066  9884              LDR      r0,[sp,#0x210]
000068  f7fffffe          BL       clust2sect
00006c  4681              MOV      r9,r0
;;;3369   				dir = dj.fs->win;
00006e  9884              LDR      r0,[sp,#0x210]
000070  f1000434          ADD      r4,r0,#0x34
;;;3370   				mem_set(dir, 0, SS(dj.fs));
000074  f44f7200          MOV      r2,#0x200
000078  2100              MOVS     r1,#0
00007a  4620              MOV      r0,r4
00007c  f7fffffe          BL       mem_set
;;;3371   				mem_set(dir+DIR_Name, ' ', 11);	/* Create "." entry */
000080  220b              MOVS     r2,#0xb
000082  2120              MOVS     r1,#0x20
000084  4620              MOV      r0,r4
000086  f7fffffe          BL       mem_set
;;;3372   				dir[DIR_Name] = '.';
00008a  202e              MOVS     r0,#0x2e
00008c  7020              STRB     r0,[r4,#0]
;;;3373   				dir[DIR_Attr] = AM_DIR;
00008e  2010              MOVS     r0,#0x10
000090  72e0              STRB     r0,[r4,#0xb]
;;;3374   				ST_DWORD(dir+DIR_WrtTime, tm);
000092  75a6              STRB     r6,[r4,#0x16]
000094  0a31              LSRS     r1,r6,#8
000096  75e1              STRB     r1,[r4,#0x17]
000098  0c31              LSRS     r1,r6,#16
00009a  7621              STRB     r1,[r4,#0x18]
00009c  0e31              LSRS     r1,r6,#24
00009e  7661              STRB     r1,[r4,#0x19]
;;;3375   				st_clust(dir, dcl);
0000a0  4639              MOV      r1,r7
0000a2  4620              MOV      r0,r4
0000a4  f7fffffe          BL       st_clust
;;;3376   				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
0000a8  2220              MOVS     r2,#0x20
0000aa  4621              MOV      r1,r4
0000ac  f1040020          ADD      r0,r4,#0x20
0000b0  f7fffffe          BL       mem_cpy
;;;3377   				dir[33] = '.'; pcl = dj.sclust;
0000b4  202e              MOVS     r0,#0x2e
0000b6  f8840021          STRB     r0,[r4,#0x21]
0000ba  f8dda218          LDR      r10,[sp,#0x218]
;;;3378   				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
0000be  9884              LDR      r0,[sp,#0x210]
0000c0  7800              LDRB     r0,[r0,#0]
0000c2  2803              CMP      r0,#3
0000c4  d104              BNE      |L23.208|
0000c6  9884              LDR      r0,[sp,#0x210]
0000c8  6a80              LDR      r0,[r0,#0x28]
0000ca  4550              CMP      r0,r10
0000cc  d100              BNE      |L23.208|
;;;3379   					pcl = 0;
0000ce  46aa              MOV      r10,r5
                  |L23.208|
;;;3380   				st_clust(dir+SZ_DIR, pcl);
0000d0  4651              MOV      r1,r10
0000d2  f1040020          ADD      r0,r4,#0x20
0000d6  f7fffffe          BL       st_clust
;;;3381   				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
0000da  9884              LDR      r0,[sp,#0x210]
0000dc  f8908002          LDRB     r8,[r0,#2]
0000e0  e018              B        |L23.276|
                  |L23.226|
;;;3382   					dj.fs->winsect = dsc++;
0000e2  9884              LDR      r0,[sp,#0x210]
0000e4  f8c09030          STR      r9,[r0,#0x30]
0000e8  f1090901          ADD      r9,r9,#1
;;;3383   					dj.fs->wflag = 1;
0000ec  2001              MOVS     r0,#1
0000ee  9984              LDR      r1,[sp,#0x210]
0000f0  7108              STRB     r0,[r1,#4]
;;;3384   					res = sync_window(dj.fs);
0000f2  9884              LDR      r0,[sp,#0x210]
0000f4  f7fffffe          BL       sync_window
0000f8  4605              MOV      r5,r0
;;;3385   					if (res != FR_OK) break;
0000fa  b10d              CBZ      r5,|L23.256|
0000fc  e00d              B        |L23.282|
                  |L23.254|
0000fe  e02d              B        |L23.348|
                  |L23.256|
;;;3386   					mem_set(dir, 0, SS(dj.fs));
000100  f44f7200          MOV      r2,#0x200
000104  2100              MOVS     r1,#0
000106  4620              MOV      r0,r4
000108  f7fffffe          BL       mem_set
00010c  f1a80001          SUB      r0,r8,#1              ;3381
000110  f00008ff          AND      r8,r0,#0xff           ;3381
                  |L23.276|
000114  f1b80f00          CMP      r8,#0                 ;3381
000118  d1e3              BNE      |L23.226|
                  |L23.282|
00011a  bf00              NOP                            ;3385
                  |L23.284|
;;;3387   				}
;;;3388   			}
;;;3389   			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
00011c  b91d              CBNZ     r5,|L23.294|
00011e  a884              ADD      r0,sp,#0x210
000120  f7fffffe          BL       dir_register
000124  4605              MOV      r5,r0
                  |L23.294|
;;;3390   			if (res != FR_OK) {
000126  b125              CBZ      r5,|L23.306|
;;;3391   				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
000128  4639              MOV      r1,r7
00012a  9884              LDR      r0,[sp,#0x210]
00012c  f7fffffe          BL       remove_chain
000130  e014              B        |L23.348|
                  |L23.306|
;;;3392   			} else {
;;;3393   				dir = dj.dir;
000132  9c89              LDR      r4,[sp,#0x224]
;;;3394   				dir[DIR_Attr] = AM_DIR;				/* Attribute */
000134  2010              MOVS     r0,#0x10
000136  72e0              STRB     r0,[r4,#0xb]
;;;3395   				ST_DWORD(dir+DIR_WrtTime, tm);		/* Created time */
000138  75a6              STRB     r6,[r4,#0x16]
00013a  0a31              LSRS     r1,r6,#8
00013c  75e1              STRB     r1,[r4,#0x17]
00013e  0c31              LSRS     r1,r6,#16
000140  7621              STRB     r1,[r4,#0x18]
000142  0e31              LSRS     r1,r6,#24
000144  7661              STRB     r1,[r4,#0x19]
;;;3396   				st_clust(dir, dcl);					/* Table start cluster */
000146  4639              MOV      r1,r7
000148  4620              MOV      r0,r4
00014a  f7fffffe          BL       st_clust
;;;3397   				dj.fs->wflag = 1;
00014e  2001              MOVS     r0,#1
000150  9984              LDR      r1,[sp,#0x210]
000152  7108              STRB     r0,[r1,#4]
;;;3398   				res = sync_fs(dj.fs);
000154  9884              LDR      r0,[sp,#0x210]
000156  f7fffffe          BL       sync_fs
00015a  4605              MOV      r5,r0
                  |L23.348|
;;;3399   			}
;;;3400   		}
;;;3401   		FREE_BUF();
;;;3402   	}
;;;3403   
;;;3404   	LEAVE_FF(dj.fs, res);
00015c  4628              MOV      r0,r5
;;;3405   }
00015e  f50d7d0e          ADD      sp,sp,#0x238
000162  e8bd87f0          POP      {r4-r10,pc}
;;;3406   
                          ENDP


                          AREA ||i.f_mount||, CODE, READONLY, ALIGN=2

                  f_mount PROC
;;;2267   
;;;2268   FRESULT f_mount (
000000  b570              PUSH     {r4-r6,lr}
;;;2269   	BYTE vol,		/* Logical drive number to be mounted/unmounted */
;;;2270   	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
;;;2271   )
;;;2272   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2273   	FATFS *rfs;
;;;2274   
;;;2275   
;;;2276   	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
000006  2c02              CMP      r4,#2
000008  db01              BLT      |L24.14|
;;;2277   		return FR_INVALID_DRIVE;
00000a  200b              MOVS     r0,#0xb
                  |L24.12|
;;;2278   	rfs = FatFs[vol];			/* Get current fs object */
;;;2279   
;;;2280   	if (rfs) {
;;;2281   #if _FS_LOCK
;;;2282   		clear_lock(rfs);
;;;2283   #endif
;;;2284   #if _FS_REENTRANT				/* Discard sync object of the current volume */
;;;2285   		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
;;;2286   #endif
;;;2287   		rfs->fs_type = 0;		/* Clear old fs object */
;;;2288   	}
;;;2289   
;;;2290   	if (fs) {
;;;2291   		fs->fs_type = 0;		/* Clear new fs object */
;;;2292   #if _FS_REENTRANT				/* Create sync object for the new volume */
;;;2293   		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
;;;2294   #endif
;;;2295   	}
;;;2296   	FatFs[vol] = fs;			/* Register new fs object */
;;;2297   
;;;2298   	return FR_OK;
;;;2299   }
00000c  bd70              POP      {r4-r6,pc}
                  |L24.14|
00000e  4808              LDR      r0,|L24.48|
000010  f8506024          LDR      r6,[r0,r4,LSL #2]     ;2278
000014  b126              CBZ      r6,|L24.32|
000016  4630              MOV      r0,r6                 ;2282
000018  f7fffffe          BL       clear_lock
00001c  2000              MOVS     r0,#0                 ;2287
00001e  7030              STRB     r0,[r6,#0]            ;2287
                  |L24.32|
000020  b10d              CBZ      r5,|L24.38|
000022  2000              MOVS     r0,#0                 ;2291
000024  7028              STRB     r0,[r5,#0]            ;2291
                  |L24.38|
000026  4802              LDR      r0,|L24.48|
000028  f8405024          STR      r5,[r0,r4,LSL #2]     ;2296
00002c  2000              MOVS     r0,#0                 ;2298
00002e  e7ed              B        |L24.12|
;;;2300   
                          ENDP

                  |L24.48|
                          DCD      FatFs

                          AREA ||i.f_open||, CODE, READONLY, ALIGN=1

                  f_open PROC
;;;2307   
;;;2308   FRESULT f_open (
000000  e92d43f7          PUSH     {r0-r2,r4-r9,lr}
;;;2309   	FIL *fp,			/* Pointer to the blank file object */
;;;2310   	const TCHAR *path,	/* Pointer to the file name */
;;;2311   	BYTE mode			/* Access mode and file open mode flags */
;;;2312   )
;;;2313   {
000004  f5ad7d0c          SUB      sp,sp,#0x230
000008  4605              MOV      r5,r0
00000a  4616              MOV      r6,r2
;;;2314   	FRESULT res;
;;;2315   	DIR dj;
;;;2316   	BYTE *dir;
;;;2317   	DEF_NAMEBUF;
;;;2318   
;;;2319   
;;;2320   	if (!fp) return FR_INVALID_OBJECT;
00000c  b925              CBNZ     r5,|L25.24|
00000e  2009              MOVS     r0,#9
                  |L25.16|
;;;2321   	fp->fs = 0;			/* Clear file object */
;;;2322   
;;;2323   #if !_FS_READONLY
;;;2324   	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
;;;2325   	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
;;;2326   #else
;;;2327   	mode &= FA_READ;
;;;2328   	res = chk_mounted(&path, &dj.fs, 0);
;;;2329   #endif
;;;2330   	if (res == FR_OK) {
;;;2331   		INIT_BUF(dj);
;;;2332   		res = follow_path(&dj, path);	/* Follow the file path */
;;;2333   		dir = dj.dir;
;;;2334   #if !_FS_READONLY	/* R/W configuration */
;;;2335   		if (res == FR_OK) {
;;;2336   			if (!dir)	/* Current dir itself */
;;;2337   				res = FR_INVALID_NAME;
;;;2338   #if _FS_LOCK
;;;2339   			else
;;;2340   				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
;;;2341   #endif
;;;2342   		}
;;;2343   		/* Create or Open a file */
;;;2344   		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
;;;2345   			DWORD dw, cl;
;;;2346   
;;;2347   			if (res != FR_OK) {					/* No file, create new */
;;;2348   				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
;;;2349   #if _FS_LOCK
;;;2350   					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
;;;2351   #else
;;;2352   					res = dir_register(&dj);
;;;2353   #endif
;;;2354   				mode |= FA_CREATE_ALWAYS;		/* File is created */
;;;2355   				dir = dj.dir;					/* New entry */
;;;2356   			}
;;;2357   			else {								/* Any object is already existing */
;;;2358   				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
;;;2359   					res = FR_DENIED;
;;;2360   				} else {
;;;2361   					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
;;;2362   						res = FR_EXIST;
;;;2363   				}
;;;2364   			}
;;;2365   			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
;;;2366   				dw = get_fattime();					/* Created time */
;;;2367   				ST_DWORD(dir+DIR_CrtTime, dw);
;;;2368   				dir[DIR_Attr] = 0;					/* Reset attribute */
;;;2369   				ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
;;;2370   				cl = ld_clust(dj.fs, dir);			/* Get start cluster */
;;;2371   				st_clust(dir, 0);					/* cluster = 0 */
;;;2372   				dj.fs->wflag = 1;
;;;2373   				if (cl) {							/* Remove the cluster chain if exist */
;;;2374   					dw = dj.fs->winsect;
;;;2375   					res = remove_chain(dj.fs, cl);
;;;2376   					if (res == FR_OK) {
;;;2377   						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
;;;2378   						res = move_window(dj.fs, dw);
;;;2379   					}
;;;2380   				}
;;;2381   			}
;;;2382   		}
;;;2383   		else {	/* Open an existing file */
;;;2384   			if (res == FR_OK) {						/* Follow succeeded */
;;;2385   				if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
;;;2386   					res = FR_NO_FILE;
;;;2387   				} else {
;;;2388   					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
;;;2389   						res = FR_DENIED;
;;;2390   				}
;;;2391   			}
;;;2392   		}
;;;2393   		if (res == FR_OK) {
;;;2394   			if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
;;;2395   				mode |= FA__WRITTEN;
;;;2396   			fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
;;;2397   			fp->dir_ptr = dir;
;;;2398   #if _FS_LOCK
;;;2399   			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
;;;2400   			if (!fp->lockid) res = FR_INT_ERR;
;;;2401   #endif
;;;2402   		}
;;;2403   
;;;2404   #else				/* R/O configuration */
;;;2405   		if (res == FR_OK) {					/* Follow succeeded */
;;;2406   			dir = dj.dir;
;;;2407   			if (!dir) {						/* Current dir itself */
;;;2408   				res = FR_INVALID_NAME;
;;;2409   			} else {
;;;2410   				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
;;;2411   					res = FR_NO_FILE;
;;;2412   			}
;;;2413   		}
;;;2414   #endif
;;;2415   		FREE_BUF();
;;;2416   
;;;2417   		if (res == FR_OK) {
;;;2418   			fp->flag = mode;					/* File access mode */
;;;2419   			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
;;;2420   			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
;;;2421   			fp->fptr = 0;						/* File pointer */
;;;2422   			fp->dsect = 0;
;;;2423   #if _USE_FASTSEEK
;;;2424   			fp->cltbl = 0;						/* Normal seek mode */
;;;2425   #endif
;;;2426   			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
;;;2427   		}
;;;2428   	}
;;;2429   
;;;2430   	LEAVE_FF(dj.fs, res);
;;;2431   }
000010  f50d7d0f          ADD      sp,sp,#0x23c
000014  e8bd83f0          POP      {r4-r9,pc}
                  |L25.24|
000018  2000              MOVS     r0,#0                 ;2321
00001a  6028              STR      r0,[r5,#0]            ;2321
00001c  f006061f          AND      r6,r6,#0x1f           ;2324
000020  f0260201          BIC      r2,r6,#1              ;2325
000024  a983              ADD      r1,sp,#0x20c          ;2325
000026  a88d              ADD      r0,sp,#0x234          ;2325
000028  f7fffffe          BL       chk_mounted
00002c  4607              MOV      r7,r0                 ;2325
00002e  2f00              CMP      r7,#0                 ;2330
000030  d172              BNE      |L25.280|
000032  a880              ADD      r0,sp,#0x200          ;2331
000034  9089              STR      r0,[sp,#0x224]        ;2331
000036  f8cdd228          STR      sp,[sp,#0x228]        ;2331
00003a  a883              ADD      r0,sp,#0x20c          ;2332
00003c  998d              LDR      r1,[sp,#0x234]        ;2332
00003e  f7fffffe          BL       follow_path
000042  4607              MOV      r7,r0                 ;2332
000044  9c88              LDR      r4,[sp,#0x220]        ;2333
000046  b96f              CBNZ     r7,|L25.100|
000048  b90c              CBNZ     r4,|L25.78|
00004a  2706              MOVS     r7,#6                 ;2337
00004c  e00a              B        |L25.100|
                  |L25.78|
00004e  f0260001          BIC      r0,r6,#1              ;2340
000052  b108              CBZ      r0,|L25.88|
000054  2001              MOVS     r0,#1                 ;2340
000056  e000              B        |L25.90|
                  |L25.88|
000058  2000              MOVS     r0,#0                 ;2340
                  |L25.90|
00005a  4601              MOV      r1,r0                 ;2340
00005c  a883              ADD      r0,sp,#0x20c          ;2340
00005e  f7fffffe          BL       chk_lock
000062  4607              MOV      r7,r0                 ;2340
                  |L25.100|
000064  f006001c          AND      r0,r6,#0x1c           ;2344
000068  2800              CMP      r0,#0                 ;2344
00006a  d056              BEQ      |L25.282|
00006c  b177              CBZ      r7,|L25.140|
00006e  2f04              CMP      r7,#4                 ;2348
000070  d108              BNE      |L25.132|
000072  f7fffffe          BL       enq_lock
000076  b118              CBZ      r0,|L25.128|
000078  a883              ADD      r0,sp,#0x20c          ;2350
00007a  f7fffffe          BL       dir_register
00007e  e000              B        |L25.130|
                  |L25.128|
000080  2012              MOVS     r0,#0x12              ;2350
                  |L25.130|
000082  4607              MOV      r7,r0                 ;2350
                  |L25.132|
000084  f0460608          ORR      r6,r6,#8              ;2354
000088  9c88              LDR      r4,[sp,#0x220]        ;2355
00008a  e009              B        |L25.160|
                  |L25.140|
00008c  7ae0              LDRB     r0,[r4,#0xb]          ;2358
00008e  f0000011          AND      r0,r0,#0x11           ;2358
000092  b108              CBZ      r0,|L25.152|
000094  2707              MOVS     r7,#7                 ;2359
000096  e003              B        |L25.160|
                  |L25.152|
000098  f0060004          AND      r0,r6,#4              ;2361
00009c  b100              CBZ      r0,|L25.160|
00009e  2708              MOVS     r7,#8                 ;2362
                  |L25.160|
0000a0  2f00              CMP      r7,#0                 ;2365
0000a2  d138              BNE      |L25.278|
0000a4  f0060008          AND      r0,r6,#8              ;2365
0000a8  b3a8              CBZ      r0,|L25.278|
0000aa  f7fffffe          BL       get_fattime
0000ae  4680              MOV      r8,r0                 ;2366
0000b0  f884800e          STRB     r8,[r4,#0xe]          ;2367
0000b4  ea4f2118          LSR      r1,r8,#8              ;2367
0000b8  73e1              STRB     r1,[r4,#0xf]          ;2367
0000ba  ea4f4118          LSR      r1,r8,#16             ;2367
0000be  7421              STRB     r1,[r4,#0x10]         ;2367
0000c0  ea4f6118          LSR      r1,r8,#24             ;2367
0000c4  7461              STRB     r1,[r4,#0x11]         ;2367
0000c6  2000              MOVS     r0,#0                 ;2368
0000c8  72e0              STRB     r0,[r4,#0xb]          ;2368
0000ca  7720              STRB     r0,[r4,#0x1c]         ;2369
0000cc  2100              MOVS     r1,#0                 ;2369
0000ce  7761              STRB     r1,[r4,#0x1d]         ;2369
0000d0  77a1              STRB     r1,[r4,#0x1e]         ;2369
0000d2  77e1              STRB     r1,[r4,#0x1f]         ;2369
0000d4  4621              MOV      r1,r4                 ;2370
0000d6  9883              LDR      r0,[sp,#0x20c]        ;2370
0000d8  f7fffffe          BL       ld_clust
0000dc  4681              MOV      r9,r0                 ;2370
0000de  2100              MOVS     r1,#0                 ;2371
0000e0  4620              MOV      r0,r4                 ;2371
0000e2  f7fffffe          BL       st_clust
0000e6  2001              MOVS     r0,#1                 ;2372
0000e8  9983              LDR      r1,[sp,#0x20c]        ;2372
0000ea  7108              STRB     r0,[r1,#4]            ;2372
0000ec  f1b90f00          CMP      r9,#0                 ;2373
0000f0  d011              BEQ      |L25.278|
0000f2  9883              LDR      r0,[sp,#0x20c]        ;2374
0000f4  f8d08030          LDR      r8,[r0,#0x30]         ;2374
0000f8  4649              MOV      r1,r9                 ;2375
0000fa  9883              LDR      r0,[sp,#0x20c]        ;2375
0000fc  f7fffffe          BL       remove_chain
000100  4607              MOV      r7,r0                 ;2375
000102  b947              CBNZ     r7,|L25.278|
000104  f1a90001          SUB      r0,r9,#1              ;2377
000108  9983              LDR      r1,[sp,#0x20c]        ;2377
00010a  60c8              STR      r0,[r1,#0xc]          ;2377
00010c  4641              MOV      r1,r8                 ;2378
00010e  9883              LDR      r0,[sp,#0x20c]        ;2378
000110  f7fffffe          BL       move_window
000114  4607              MOV      r7,r0                 ;2378
                  |L25.278|
000116  e00f              B        |L25.312|
                  |L25.280|
000118  e040              B        |L25.412|
                  |L25.282|
00011a  b96f              CBNZ     r7,|L25.312|
00011c  7ae0              LDRB     r0,[r4,#0xb]          ;2385
00011e  f0000010          AND      r0,r0,#0x10           ;2385
000122  b108              CBZ      r0,|L25.296|
000124  2704              MOVS     r7,#4                 ;2386
000126  e007              B        |L25.312|
                  |L25.296|
000128  f0060002          AND      r0,r6,#2              ;2388
00012c  b120              CBZ      r0,|L25.312|
00012e  7ae0              LDRB     r0,[r4,#0xb]          ;2388
000130  f0000001          AND      r0,r0,#1              ;2388
000134  b100              CBZ      r0,|L25.312|
000136  2707              MOVS     r7,#7                 ;2389
                  |L25.312|
000138  b9b7              CBNZ     r7,|L25.360|
00013a  f0060008          AND      r0,r6,#8              ;2394
00013e  b108              CBZ      r0,|L25.324|
000140  f0460620          ORR      r6,r6,#0x20           ;2395
                  |L25.324|
000144  9883              LDR      r0,[sp,#0x20c]        ;2396
000146  6b00              LDR      r0,[r0,#0x30]         ;2396
000148  61e8              STR      r0,[r5,#0x1c]         ;2396
00014a  622c              STR      r4,[r5,#0x20]         ;2397
00014c  f0260001          BIC      r0,r6,#1              ;2399
000150  b108              CBZ      r0,|L25.342|
000152  2001              MOVS     r0,#1                 ;2399
000154  e000              B        |L25.344|
                  |L25.342|
000156  2000              MOVS     r0,#0                 ;2399
                  |L25.344|
000158  4601              MOV      r1,r0                 ;2399
00015a  a883              ADD      r0,sp,#0x20c          ;2399
00015c  f7fffffe          BL       inc_lock
000160  6268              STR      r0,[r5,#0x24]         ;2399
000162  6a68              LDR      r0,[r5,#0x24]         ;2400
000164  b900              CBNZ     r0,|L25.360|
000166  2702              MOVS     r7,#2                 ;2400
                  |L25.360|
000168  b9c7              CBNZ     r7,|L25.412|
00016a  71ae              STRB     r6,[r5,#6]            ;2418
00016c  4621              MOV      r1,r4                 ;2419
00016e  9883              LDR      r0,[sp,#0x20c]        ;2419
000170  f7fffffe          BL       ld_clust
000174  6128              STR      r0,[r5,#0x10]         ;2419
000176  7fe0              LDRB     r0,[r4,#0x1f]         ;2420
000178  0601              LSLS     r1,r0,#24             ;2420
00017a  7fa0              LDRB     r0,[r4,#0x1e]         ;2420
00017c  ea414100          ORR      r1,r1,r0,LSL #16      ;2420
000180  7f60              LDRB     r0,[r4,#0x1d]         ;2420
000182  ea412000          ORR      r0,r1,r0,LSL #8       ;2420
000186  7f21              LDRB     r1,[r4,#0x1c]         ;2420
000188  4308              ORRS     r0,r0,r1              ;2420
00018a  60e8              STR      r0,[r5,#0xc]          ;2420
00018c  2000              MOVS     r0,#0                 ;2421
00018e  60a8              STR      r0,[r5,#8]            ;2421
000190  61a8              STR      r0,[r5,#0x18]         ;2422
000192  9883              LDR      r0,[sp,#0x20c]        ;2426
000194  6028              STR      r0,[r5,#0]            ;2426
000196  9883              LDR      r0,[sp,#0x20c]        ;2426
000198  88c0              LDRH     r0,[r0,#6]            ;2426
00019a  80a8              STRH     r0,[r5,#4]            ;2426
                  |L25.412|
00019c  4638              MOV      r0,r7                 ;2430
00019e  e737              B        |L25.16|
;;;2432   
                          ENDP


                          AREA ||i.f_opendir||, CODE, READONLY, ALIGN=1

                  f_opendir PROC
;;;3034   
;;;3035   FRESULT f_opendir (
000000  b573              PUSH     {r0,r1,r4-r6,lr}
;;;3036   	DIR *dj,			/* Pointer to directory object to create */
;;;3037   	const TCHAR *path	/* Pointer to the directory path */
;;;3038   )
;;;3039   {
000002  f5ad7d04          SUB      sp,sp,#0x210
000006  4604              MOV      r4,r0
;;;3040   	FRESULT res;
;;;3041   	FATFS *fs;
;;;3042   	DEF_NAMEBUF;
;;;3043   
;;;3044   
;;;3045   	if (!dj) return FR_INVALID_OBJECT;
000008  b91c              CBNZ     r4,|L26.18|
00000a  2009              MOVS     r0,#9
                  |L26.12|
;;;3046   
;;;3047   	res = chk_mounted(&path, &dj->fs, 0);
;;;3048   	fs = dj->fs;
;;;3049   	if (res == FR_OK) {
;;;3050   		INIT_BUF(*dj);
;;;3051   		res = follow_path(dj, path);			/* Follow the path to the directory */
;;;3052   		FREE_BUF();
;;;3053   		if (res == FR_OK) {						/* Follow completed */
;;;3054   			if (dj->dir) {						/* It is not the root dir */
;;;3055   				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
;;;3056   					dj->sclust = ld_clust(fs, dj->dir);
;;;3057   				} else {						/* The object is not a directory */
;;;3058   					res = FR_NO_PATH;
;;;3059   				}
;;;3060   			}
;;;3061   			if (res == FR_OK) {
;;;3062   				dj->id = fs->id;
;;;3063   				res = dir_sdi(dj, 0);			/* Rewind dir */
;;;3064   			}
;;;3065   		}
;;;3066   		if (res == FR_NO_FILE) res = FR_NO_PATH;
;;;3067   		if (res != FR_OK) dj->fs = 0;			/* Invalidate the dir object if function faild */
;;;3068   	} else {
;;;3069   		dj->fs = 0;
;;;3070   	}
;;;3071   
;;;3072   	LEAVE_FF(fs, res);
;;;3073   }
00000c  f50d7d06          ADD      sp,sp,#0x218
000010  bd70              POP      {r4-r6,pc}
                  |L26.18|
000012  2200              MOVS     r2,#0                 ;3047
000014  4621              MOV      r1,r4                 ;3047
000016  a885              ADD      r0,sp,#0x214          ;3047
000018  f7fffffe          BL       chk_mounted
00001c  4605              MOV      r5,r0                 ;3047
00001e  6826              LDR      r6,[r4,#0]            ;3048
000020  bb35              CBNZ     r5,|L26.112|
000022  a881              ADD      r0,sp,#0x204          ;3050
000024  61a0              STR      r0,[r4,#0x18]         ;3050
000026  a801              ADD      r0,sp,#4              ;3050
000028  61e0              STR      r0,[r4,#0x1c]         ;3050
00002a  4620              MOV      r0,r4                 ;3051
00002c  9985              LDR      r1,[sp,#0x214]        ;3051
00002e  f7fffffe          BL       follow_path
000032  4605              MOV      r5,r0                 ;3051
000034  b9ad              CBNZ     r5,|L26.98|
000036  6960              LDR      r0,[r4,#0x14]         ;3054
000038  b158              CBZ      r0,|L26.82|
00003a  6960              LDR      r0,[r4,#0x14]         ;3055
00003c  7ac0              LDRB     r0,[r0,#0xb]          ;3055
00003e  f0000010          AND      r0,r0,#0x10           ;3055
000042  b128              CBZ      r0,|L26.80|
000044  4630              MOV      r0,r6                 ;3056
000046  6961              LDR      r1,[r4,#0x14]         ;3056
000048  f7fffffe          BL       ld_clust
00004c  60a0              STR      r0,[r4,#8]            ;3056
00004e  e000              B        |L26.82|
                  |L26.80|
000050  2505              MOVS     r5,#5                 ;3058
                  |L26.82|
000052  b935              CBNZ     r5,|L26.98|
000054  88f0              LDRH     r0,[r6,#6]            ;3062
000056  80a0              STRH     r0,[r4,#4]            ;3062
000058  2100              MOVS     r1,#0                 ;3063
00005a  4620              MOV      r0,r4                 ;3063
00005c  f7fffffe          BL       dir_sdi
000060  4605              MOV      r5,r0                 ;3063
                  |L26.98|
000062  2d04              CMP      r5,#4                 ;3066
000064  d100              BNE      |L26.104|
000066  2505              MOVS     r5,#5                 ;3066
                  |L26.104|
000068  b125              CBZ      r5,|L26.116|
00006a  2000              MOVS     r0,#0                 ;3067
00006c  6020              STR      r0,[r4,#0]            ;3067
00006e  e001              B        |L26.116|
                  |L26.112|
000070  2000              MOVS     r0,#0                 ;3069
000072  6020              STR      r0,[r4,#0]            ;3069
                  |L26.116|
000074  4628              MOV      r0,r5                 ;3072
000076  e7c9              B        |L26.12|
;;;3074   
                          ENDP


                          AREA ||i.f_read||, CODE, READONLY, ALIGN=1

                  f_read PROC
;;;2439   
;;;2440   FRESULT f_read (
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;2441   	FIL *fp, 		/* Pointer to the file object */
;;;2442   	void *buff,		/* Pointer to data buffer */
;;;2443   	UINT btr,		/* Number of bytes to read */
;;;2444   	UINT *br		/* Pointer to number of bytes read */
;;;2445   )
;;;2446   {
000004  b083              SUB      sp,sp,#0xc
000006  4604              MOV      r4,r0
000008  4615              MOV      r5,r2
00000a  469a              MOV      r10,r3
;;;2447   	FRESULT res;
;;;2448   	DWORD clst, sect, remain;
;;;2449   	UINT rcnt, cc;
;;;2450   	BYTE csect, *rbuff = (BYTE*)buff;
00000c  f8ddb010          LDR      r11,[sp,#0x10]
;;;2451   
;;;2452   
;;;2453   	*br = 0;	/* Clear read byte counter */
000010  2000              MOVS     r0,#0
000012  f8ca0000          STR      r0,[r10,#0]
;;;2454   
;;;2455   	res = validate(fp);							/* Check validity */
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       validate
00001c  9002              STR      r0,[sp,#8]
;;;2456   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
00001e  9802              LDR      r0,[sp,#8]
000020  b118              CBZ      r0,|L27.42|
000022  9802              LDR      r0,[sp,#8]
                  |L27.36|
;;;2457   	if (fp->flag & FA__ERROR)					/* Aborted file? */
;;;2458   		LEAVE_FF(fp->fs, FR_INT_ERR);
;;;2459   	if (!(fp->flag & FA_READ)) 					/* Check access mode */
;;;2460   		LEAVE_FF(fp->fs, FR_DENIED);
;;;2461   	remain = fp->fsize - fp->fptr;
;;;2462   	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
;;;2463   
;;;2464   	for ( ;  btr;								/* Repeat until all data read */
;;;2465   		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
;;;2466   		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
;;;2467   			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
;;;2468   			if (!csect) {						/* On the cluster boundary? */
;;;2469   				if (fp->fptr == 0) {			/* On the top of the file? */
;;;2470   					clst = fp->sclust;			/* Follow from the origin */
;;;2471   				} else {						/* Middle or end of the file */
;;;2472   #if _USE_FASTSEEK
;;;2473   					if (fp->cltbl)
;;;2474   						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
;;;2475   					else
;;;2476   #endif
;;;2477   						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
;;;2478   				}
;;;2479   				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
;;;2480   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2481   				fp->clust = clst;				/* Update current cluster */
;;;2482   			}
;;;2483   			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
;;;2484   			if (!sect) ABORT(fp->fs, FR_INT_ERR);
;;;2485   			sect += csect;
;;;2486   			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
;;;2487   			if (cc) {							/* Read maximum contiguous sectors directly */
;;;2488   				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
;;;2489   					cc = fp->fs->csize - csect;
;;;2490   				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
;;;2491   					ABORT(fp->fs, FR_DISK_ERR);
;;;2492   #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
;;;2493   #if _FS_TINY
;;;2494   				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
;;;2495   					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
;;;2496   #else
;;;2497   				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
;;;2498   					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
;;;2499   #endif
;;;2500   #endif
;;;2501   				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
;;;2502   				continue;
;;;2503   			}
;;;2504   #if !_FS_TINY
;;;2505   			if (fp->dsect != sect) {			/* Load data sector if not in cache */
;;;2506   #if !_FS_READONLY
;;;2507   				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
;;;2508   					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;2509   						ABORT(fp->fs, FR_DISK_ERR);
;;;2510   					fp->flag &= ~FA__DIRTY;
;;;2511   				}
;;;2512   #endif
;;;2513   				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
;;;2514   					ABORT(fp->fs, FR_DISK_ERR);
;;;2515   			}
;;;2516   #endif
;;;2517   			fp->dsect = sect;
;;;2518   		}
;;;2519   		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
;;;2520   		if (rcnt > btr) rcnt = btr;
;;;2521   #if _FS_TINY
;;;2522   		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
;;;2523   			ABORT(fp->fs, FR_DISK_ERR);
;;;2524   		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
;;;2525   #else
;;;2526   		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
;;;2527   #endif
;;;2528   	}
;;;2529   
;;;2530   	LEAVE_FF(fp->fs, FR_OK);
;;;2531   }
000024  b007              ADD      sp,sp,#0x1c
000026  e8bd8ff0          POP      {r4-r11,pc}
                  |L27.42|
00002a  79a0              LDRB     r0,[r4,#6]            ;2457
00002c  f0000080          AND      r0,r0,#0x80           ;2457
000030  b108              CBZ      r0,|L27.54|
000032  2002              MOVS     r0,#2                 ;2458
000034  e7f6              B        |L27.36|
                  |L27.54|
000036  79a0              LDRB     r0,[r4,#6]            ;2459
000038  f0000001          AND      r0,r0,#1              ;2459
00003c  b908              CBNZ     r0,|L27.66|
00003e  2007              MOVS     r0,#7                 ;2460
000040  e7f0              B        |L27.36|
                  |L27.66|
000042  e9d41002          LDRD     r1,r0,[r4,#8]         ;2461
000046  1a40              SUBS     r0,r0,r1              ;2461
000048  9000              STR      r0,[sp,#0]            ;2461
00004a  9800              LDR      r0,[sp,#0]            ;2462
00004c  4285              CMP      r5,r0                 ;2462
00004e  d900              BLS      |L27.82|
000050  9d00              LDR      r5,[sp,#0]            ;2462
                  |L27.82|
000052  e0b5              B        |L27.448|
                  |L27.84|
000054  8920              LDRH     r0,[r4,#8]            ;2466
000056  f3c00008          UBFX     r0,r0,#0,#9           ;2466
00005a  2800              CMP      r0,#0                 ;2466
00005c  d17e              BNE      |L27.348|
00005e  6820              LDR      r0,[r4,#0]            ;2467
000060  7880              LDRB     r0,[r0,#2]            ;2467
000062  1e40              SUBS     r0,r0,#1              ;2467
000064  68a1              LDR      r1,[r4,#8]            ;2467
000066  ea002051          AND      r0,r0,r1,LSR #9       ;2467
00006a  f00009ff          AND      r9,r0,#0xff           ;2467
00006e  f1b90f00          CMP      r9,#0                 ;2468
000072  d11d              BNE      |L27.176|
000074  68a0              LDR      r0,[r4,#8]            ;2469
000076  b910              CBNZ     r0,|L27.126|
000078  6920              LDR      r0,[r4,#0x10]         ;2470
00007a  9001              STR      r0,[sp,#4]            ;2470
00007c  e004              B        |L27.136|
                  |L27.126|
00007e  6961              LDR      r1,[r4,#0x14]         ;2477
000080  6820              LDR      r0,[r4,#0]            ;2477
000082  f7fffffe          BL       get_fat
000086  9001              STR      r0,[sp,#4]            ;2477
                  |L27.136|
000088  9801              LDR      r0,[sp,#4]            ;2479
00008a  2802              CMP      r0,#2                 ;2479
00008c  d205              BCS      |L27.154|
00008e  79a0              LDRB     r0,[r4,#6]            ;2479
000090  f0400080          ORR      r0,r0,#0x80           ;2479
000094  71a0              STRB     r0,[r4,#6]            ;2479
000096  2002              MOVS     r0,#2                 ;2479
000098  e7c4              B        |L27.36|
                  |L27.154|
00009a  9801              LDR      r0,[sp,#4]            ;2480
00009c  1c40              ADDS     r0,r0,#1              ;2480
00009e  b928              CBNZ     r0,|L27.172|
0000a0  79a0              LDRB     r0,[r4,#6]            ;2480
0000a2  f0400080          ORR      r0,r0,#0x80           ;2480
0000a6  71a0              STRB     r0,[r4,#6]            ;2480
0000a8  2001              MOVS     r0,#1                 ;2480
0000aa  e7bb              B        |L27.36|
                  |L27.172|
0000ac  9801              LDR      r0,[sp,#4]            ;2481
0000ae  6160              STR      r0,[r4,#0x14]         ;2481
                  |L27.176|
0000b0  6961              LDR      r1,[r4,#0x14]         ;2483
0000b2  6820              LDR      r0,[r4,#0]            ;2483
0000b4  f7fffffe          BL       clust2sect
0000b8  4606              MOV      r6,r0                 ;2483
0000ba  b92e              CBNZ     r6,|L27.200|
0000bc  79a0              LDRB     r0,[r4,#6]            ;2484
0000be  f0400080          ORR      r0,r0,#0x80           ;2484
0000c2  71a0              STRB     r0,[r4,#6]            ;2484
0000c4  2002              MOVS     r0,#2                 ;2484
0000c6  e7ad              B        |L27.36|
                  |L27.200|
0000c8  444e              ADD      r6,r6,r9              ;2485
0000ca  ea4f2855          LSR      r8,r5,#9              ;2486
0000ce  f1b80f00          CMP      r8,#0                 ;2487
0000d2  d02d              BEQ      |L27.304|
0000d4  eb090008          ADD      r0,r9,r8              ;2488
0000d8  6821              LDR      r1,[r4,#0]            ;2488
0000da  7889              LDRB     r1,[r1,#2]            ;2488
0000dc  4288              CMP      r0,r1                 ;2488
0000de  d903              BLS      |L27.232|
0000e0  6820              LDR      r0,[r4,#0]            ;2489
0000e2  7880              LDRB     r0,[r0,#2]            ;2489
0000e4  eba00809          SUB      r8,r0,r9              ;2489
                  |L27.232|
0000e8  f00803ff          AND      r3,r8,#0xff           ;2490
0000ec  6821              LDR      r1,[r4,#0]            ;2490
0000ee  7848              LDRB     r0,[r1,#1]            ;2490
0000f0  4632              MOV      r2,r6                 ;2490
0000f2  4659              MOV      r1,r11                ;2490
0000f4  f7fffffe          BL       disk_read
0000f8  b128              CBZ      r0,|L27.262|
0000fa  79a0              LDRB     r0,[r4,#6]            ;2491
0000fc  f0400080          ORR      r0,r0,#0x80           ;2491
000100  71a0              STRB     r0,[r4,#6]            ;2491
000102  2001              MOVS     r0,#1                 ;2491
000104  e78e              B        |L27.36|
                  |L27.262|
000106  79a0              LDRB     r0,[r4,#6]            ;2497
000108  f0000040          AND      r0,r0,#0x40           ;2497
00010c  b168              CBZ      r0,|L27.298|
00010e  69a0              LDR      r0,[r4,#0x18]         ;2497
000110  1b80              SUBS     r0,r0,r6              ;2497
000112  4540              CMP      r0,r8                 ;2497
000114  d209              BCS      |L27.298|
000116  69a1              LDR      r1,[r4,#0x18]         ;2498
000118  1b89              SUBS     r1,r1,r6              ;2498
00011a  eb0b2041          ADD      r0,r11,r1,LSL #9      ;2498
00011e  f44f7200          MOV      r2,#0x200             ;2498
000122  f1040128          ADD      r1,r4,#0x28           ;2498
000126  f7fffffe          BL       mem_cpy
                  |L27.298|
00012a  ea4f2748          LSL      r7,r8,#9              ;2501
00012e  e03d              B        |L27.428|
                  |L27.304|
000130  69a0              LDR      r0,[r4,#0x18]         ;2505
000132  42b0              CMP      r0,r6                 ;2505
000134  d026              BEQ      |L27.388|
000136  79a0              LDRB     r0,[r4,#6]            ;2507
000138  f0000040          AND      r0,r0,#0x40           ;2507
00013c  b198              CBZ      r0,|L27.358|
00013e  6821              LDR      r1,[r4,#0]            ;2508
000140  7848              LDRB     r0,[r1,#1]            ;2508
000142  2301              MOVS     r3,#1                 ;2508
000144  f1040128          ADD      r1,r4,#0x28           ;2508
000148  69a2              LDR      r2,[r4,#0x18]         ;2508
00014a  f7fffffe          BL       disk_write
00014e  b130              CBZ      r0,|L27.350|
000150  79a0              LDRB     r0,[r4,#6]            ;2509
000152  f0400080          ORR      r0,r0,#0x80           ;2509
000156  71a0              STRB     r0,[r4,#6]            ;2509
000158  2001              MOVS     r0,#1                 ;2509
00015a  e763              B        |L27.36|
                  |L27.348|
00015c  e013              B        |L27.390|
                  |L27.350|
00015e  79a0              LDRB     r0,[r4,#6]            ;2510
000160  f0200040          BIC      r0,r0,#0x40           ;2510
000164  71a0              STRB     r0,[r4,#6]            ;2510
                  |L27.358|
000166  6821              LDR      r1,[r4,#0]            ;2513
000168  7848              LDRB     r0,[r1,#1]            ;2513
00016a  2301              MOVS     r3,#1                 ;2513
00016c  4632              MOV      r2,r6                 ;2513
00016e  f1040128          ADD      r1,r4,#0x28           ;2513
000172  f7fffffe          BL       disk_read
000176  b128              CBZ      r0,|L27.388|
000178  79a0              LDRB     r0,[r4,#6]            ;2514
00017a  f0400080          ORR      r0,r0,#0x80           ;2514
00017e  71a0              STRB     r0,[r4,#6]            ;2514
000180  2001              MOVS     r0,#1                 ;2514
000182  e74f              B        |L27.36|
                  |L27.388|
000184  61a6              STR      r6,[r4,#0x18]         ;2517
                  |L27.390|
000186  8920              LDRH     r0,[r4,#8]            ;2519
000188  f3c00008          UBFX     r0,r0,#0,#9           ;2519
00018c  f5c07700          RSB      r7,r0,#0x200          ;2519
000190  42af              CMP      r7,r5                 ;2520
000192  d900              BLS      |L27.406|
000194  462f              MOV      r7,r5                 ;2520
                  |L27.406|
000196  8920              LDRH     r0,[r4,#8]            ;2526
000198  f3c00208          UBFX     r2,r0,#0,#9           ;2526
00019c  f1040028          ADD      r0,r4,#0x28           ;2526
0001a0  1811              ADDS     r1,r2,r0              ;2526
0001a2  463a              MOV      r2,r7                 ;2526
0001a4  4658              MOV      r0,r11                ;2526
0001a6  f7fffffe          BL       mem_cpy
0001aa  bf00              NOP                            ;2502
                  |L27.428|
0001ac  44bb              ADD      r11,r11,r7            ;2465
0001ae  68a0              LDR      r0,[r4,#8]            ;2465
0001b0  4438              ADD      r0,r0,r7              ;2465
0001b2  60a0              STR      r0,[r4,#8]            ;2465
0001b4  f8da0000          LDR      r0,[r10,#0]           ;2465
0001b8  4438              ADD      r0,r0,r7              ;2465
0001ba  f8ca0000          STR      r0,[r10,#0]           ;2465
0001be  1bed              SUBS     r5,r5,r7              ;2465
                  |L27.448|
0001c0  2d00              CMP      r5,#0                 ;2464
0001c2  f47faf47          BNE      |L27.84|
0001c6  2000              MOVS     r0,#0                 ;2530
0001c8  e72c              B        |L27.36|
;;;2532   
                          ENDP


                          AREA ||i.f_readdir||, CODE, READONLY, ALIGN=1

                  f_readdir PROC
;;;3081   
;;;3082   FRESULT f_readdir (
000000  b570              PUSH     {r4-r6,lr}
;;;3083   	DIR *dj,			/* Pointer to the open directory object */
;;;3084   	FILINFO *fno		/* Pointer to file information to return */
;;;3085   )
;;;3086   {
000002  f5ad7d04          SUB      sp,sp,#0x210
000006  4604              MOV      r4,r0
000008  460e              MOV      r6,r1
;;;3087   	FRESULT res;
;;;3088   	DEF_NAMEBUF;
;;;3089   
;;;3090   
;;;3091   	res = validate(dj);						/* Check validity of the object */
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       validate
000010  4605              MOV      r5,r0
;;;3092   	if (res == FR_OK) {
000012  bb1d              CBNZ     r5,|L28.92|
;;;3093   		if (!fno) {
000014  b92e              CBNZ     r6,|L28.34|
;;;3094   			res = dir_sdi(dj, 0);			/* Rewind the directory object */
000016  2100              MOVS     r1,#0
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       dir_sdi
00001e  4605              MOV      r5,r0
000020  e01c              B        |L28.92|
                  |L28.34|
;;;3095   		} else {
;;;3096   			INIT_BUF(*dj);
000022  a881              ADD      r0,sp,#0x204
000024  61a0              STR      r0,[r4,#0x18]
000026  a801              ADD      r0,sp,#4
000028  61e0              STR      r0,[r4,#0x1c]
;;;3097   			res = dir_read(dj, 0);			/* Read an item */
00002a  2100              MOVS     r1,#0
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       dir_read
000032  4605              MOV      r5,r0
;;;3098   			if (res == FR_NO_FILE) {		/* Reached end of dir */
000034  2d04              CMP      r5,#4
000036  d102              BNE      |L28.62|
;;;3099   				dj->sect = 0;
000038  2000              MOVS     r0,#0
00003a  6120              STR      r0,[r4,#0x10]
;;;3100   				res = FR_OK;
00003c  2500              MOVS     r5,#0
                  |L28.62|
;;;3101   			}
;;;3102   			if (res == FR_OK) {				/* A valid entry is found */
00003e  b96d              CBNZ     r5,|L28.92|
;;;3103   				get_fileinfo(dj, fno);		/* Get the object information */
000040  4631              MOV      r1,r6
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       get_fileinfo
;;;3104   				res = dir_next(dj, 0);		/* Increment index for next */
000048  2100              MOVS     r1,#0
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       dir_next
000050  4605              MOV      r5,r0
;;;3105   				if (res == FR_NO_FILE) {
000052  2d04              CMP      r5,#4
000054  d102              BNE      |L28.92|
;;;3106   					dj->sect = 0;
000056  2000              MOVS     r0,#0
000058  6120              STR      r0,[r4,#0x10]
;;;3107   					res = FR_OK;
00005a  2500              MOVS     r5,#0
                  |L28.92|
;;;3108   				}
;;;3109   			}
;;;3110   			FREE_BUF();
;;;3111   		}
;;;3112   	}
;;;3113   
;;;3114   	LEAVE_FF(dj->fs, res);
00005c  4628              MOV      r0,r5
;;;3115   }
00005e  f50d7d04          ADD      sp,sp,#0x210
000062  bd70              POP      {r4-r6,pc}
;;;3116   
                          ENDP


                          AREA ||i.f_rename||, CODE, READONLY, ALIGN=1

                  f_rename PROC
;;;3496   
;;;3497   FRESULT f_rename (
000000  e92d41f3          PUSH     {r0,r1,r4-r8,lr}
;;;3498   	const TCHAR *path_old,	/* Pointer to the old name */
;;;3499   	const TCHAR *path_new	/* Pointer to the new name */
;;;3500   )
;;;3501   {
000004  f5ad7d1c          SUB      sp,sp,#0x270
000008  460f              MOV      r7,r1
;;;3502   	FRESULT res;
;;;3503   	DIR djo, djn;
;;;3504   	BYTE buf[21], *dir;
;;;3505   	DWORD dw;
;;;3506   	DEF_NAMEBUF;
;;;3507   
;;;3508   
;;;3509   	res = chk_mounted(&path_old, &djo.fs, 1);
00000a  2201              MOVS     r2,#1
00000c  a993              ADD      r1,sp,#0x24c
00000e  a89c              ADD      r0,sp,#0x270
000010  f7fffffe          BL       chk_mounted
000014  4604              MOV      r4,r0
;;;3510   	if (res == FR_OK) {
000016  2c00              CMP      r4,#0
000018  d116              BNE      |L29.72|
;;;3511   		djn.fs = djo.fs;
00001a  9893              LDR      r0,[sp,#0x24c]
00001c  908a              STR      r0,[sp,#0x228]
;;;3512   		INIT_BUF(djo);
00001e  a881              ADD      r0,sp,#0x204
000020  9099              STR      r0,[sp,#0x264]
000022  a801              ADD      r0,sp,#4
000024  909a              STR      r0,[sp,#0x268]
;;;3513   		res = follow_path(&djo, path_old);		/* Check old object */
000026  a893              ADD      r0,sp,#0x24c
000028  999c              LDR      r1,[sp,#0x270]
00002a  f7fffffe          BL       follow_path
00002e  4604              MOV      r4,r0
;;;3514   		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
000030  bf00              NOP      
;;;3515   			res = FR_INVALID_NAME;
;;;3516   #if _FS_LOCK
;;;3517   		if (res == FR_OK) res = chk_lock(&djo, 2);
000032  b924              CBNZ     r4,|L29.62|
000034  2102              MOVS     r1,#2
000036  a893              ADD      r0,sp,#0x24c
000038  f7fffffe          BL       chk_lock
00003c  4604              MOV      r4,r0
                  |L29.62|
;;;3518   #endif
;;;3519   		if (res == FR_OK) {						/* Old object is found */
00003e  2c00              CMP      r4,#0
000040  d16d              BNE      |L29.286|
;;;3520   			if (!djo.dir) {						/* Is root dir? */
000042  9898              LDR      r0,[sp,#0x260]
000044  b908              CBNZ     r0,|L29.74|
;;;3521   				res = FR_NO_FILE;
000046  2404              MOVS     r4,#4
                  |L29.72|
000048  e069              B        |L29.286|
                  |L29.74|
;;;3522   			} else {
;;;3523   				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
00004a  9898              LDR      r0,[sp,#0x260]
00004c  f100010b          ADD      r1,r0,#0xb
000050  2215              MOVS     r2,#0x15
000052  a884              ADD      r0,sp,#0x210
000054  f7fffffe          BL       mem_cpy
;;;3524   				mem_cpy(&djn, &djo, sizeof (DIR));		/* Check new object */
000058  2224              MOVS     r2,#0x24
00005a  a993              ADD      r1,sp,#0x24c
00005c  a88a              ADD      r0,sp,#0x228
00005e  f7fffffe          BL       mem_cpy
;;;3525   				res = follow_path(&djn, path_new);
000062  4639              MOV      r1,r7
000064  a88a              ADD      r0,sp,#0x228
000066  f7fffffe          BL       follow_path
00006a  4604              MOV      r4,r0
;;;3526   				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
00006c  b904              CBNZ     r4,|L29.112|
00006e  2408              MOVS     r4,#8
                  |L29.112|
;;;3527   				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
000070  2c04              CMP      r4,#4
000072  d154              BNE      |L29.286|
;;;3528   /* Start critical section that any interruption can cause a cross-link */
;;;3529   					res = dir_register(&djn);			/* Register the new entry */
000074  a88a              ADD      r0,sp,#0x228
000076  f7fffffe          BL       dir_register
00007a  4604              MOV      r4,r0
;;;3530   					if (res == FR_OK) {
00007c  2c00              CMP      r4,#0
00007e  d14e              BNE      |L29.286|
;;;3531   						dir = djn.dir;					/* Copy object information except for name */
000080  9d8f              LDR      r5,[sp,#0x23c]
;;;3532   						mem_cpy(dir+13, buf+2, 19);
000082  2213              MOVS     r2,#0x13
000084  f20d2112          ADD      r1,sp,#0x212
000088  f105000d          ADD      r0,r5,#0xd
00008c  f7fffffe          BL       mem_cpy
;;;3533   						dir[DIR_Attr] = buf[0] | AM_ARC;
000090  f89d0210          LDRB     r0,[sp,#0x210]
000094  f0400020          ORR      r0,r0,#0x20
000098  72e8              STRB     r0,[r5,#0xb]
;;;3534   						djo.fs->wflag = 1;
00009a  2001              MOVS     r0,#1
00009c  9993              LDR      r1,[sp,#0x24c]
00009e  7108              STRB     r0,[r1,#4]
;;;3535   						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
0000a0  998c              LDR      r1,[sp,#0x230]
0000a2  9895              LDR      r0,[sp,#0x254]
0000a4  4288              CMP      r0,r1
0000a6  d030              BEQ      |L29.266|
0000a8  7ae8              LDRB     r0,[r5,#0xb]
0000aa  f0000010          AND      r0,r0,#0x10
0000ae  b360              CBZ      r0,|L29.266|
;;;3536   							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
0000b0  4629              MOV      r1,r5
0000b2  9893              LDR      r0,[sp,#0x24c]
0000b4  f7fffffe          BL       ld_clust
0000b8  4680              MOV      r8,r0
0000ba  4641              MOV      r1,r8
0000bc  9893              LDR      r0,[sp,#0x24c]
0000be  f7fffffe          BL       clust2sect
0000c2  4606              MOV      r6,r0
;;;3537   							if (!dw) {
0000c4  b90e              CBNZ     r6,|L29.202|
;;;3538   								res = FR_INT_ERR;
0000c6  2402              MOVS     r4,#2
0000c8  e01f              B        |L29.266|
                  |L29.202|
;;;3539   							} else {
;;;3540   								res = move_window(djo.fs, dw);
0000ca  4631              MOV      r1,r6
0000cc  9893              LDR      r0,[sp,#0x24c]
0000ce  f7fffffe          BL       move_window
0000d2  4604              MOV      r4,r0
;;;3541   								dir = djo.fs->win+SZ_DIR;	/* .. entry */
0000d4  9893              LDR      r0,[sp,#0x24c]
0000d6  f1000554          ADD      r5,r0,#0x54
;;;3542   								if (res == FR_OK && dir[1] == '.') {
0000da  b9b4              CBNZ     r4,|L29.266|
0000dc  7868              LDRB     r0,[r5,#1]
0000de  282e              CMP      r0,#0x2e
0000e0  d113              BNE      |L29.266|
;;;3543   									dw = (djo.fs->fs_type == FS_FAT32 && djn.sclust == djo.fs->dirbase) ? 0 : djn.sclust;
0000e2  9893              LDR      r0,[sp,#0x24c]
0000e4  7800              LDRB     r0,[r0,#0]
0000e6  2803              CMP      r0,#3
0000e8  d106              BNE      |L29.248|
0000ea  9993              LDR      r1,[sp,#0x24c]
0000ec  988c              LDR      r0,[sp,#0x230]
0000ee  6a89              LDR      r1,[r1,#0x28]
0000f0  4288              CMP      r0,r1
0000f2  d101              BNE      |L29.248|
0000f4  2000              MOVS     r0,#0
0000f6  e000              B        |L29.250|
                  |L29.248|
0000f8  988c              LDR      r0,[sp,#0x230]
                  |L29.250|
0000fa  4606              MOV      r6,r0
;;;3544   									st_clust(dir, dw);
0000fc  4631              MOV      r1,r6
0000fe  4628              MOV      r0,r5
000100  f7fffffe          BL       st_clust
;;;3545   									djo.fs->wflag = 1;
000104  2001              MOVS     r0,#1
000106  9993              LDR      r1,[sp,#0x24c]
000108  7108              STRB     r0,[r1,#4]
                  |L29.266|
;;;3546   								}
;;;3547   							}
;;;3548   						}
;;;3549   						if (res == FR_OK) {
00010a  b944              CBNZ     r4,|L29.286|
;;;3550   							res = dir_remove(&djo);		/* Remove old entry */
00010c  a893              ADD      r0,sp,#0x24c
00010e  f7fffffe          BL       dir_remove
000112  4604              MOV      r4,r0
;;;3551   							if (res == FR_OK)
000114  b91c              CBNZ     r4,|L29.286|
;;;3552   								res = sync_fs(djo.fs);
000116  9893              LDR      r0,[sp,#0x24c]
000118  f7fffffe          BL       sync_fs
00011c  4604              MOV      r4,r0
                  |L29.286|
;;;3553   						}
;;;3554   					}
;;;3555   /* End critical section */
;;;3556   				}
;;;3557   			}
;;;3558   		}
;;;3559   		FREE_BUF();
;;;3560   	}
;;;3561   
;;;3562   	LEAVE_FF(djo.fs, res);
00011e  4620              MOV      r0,r4
;;;3563   }
000120  f50d7d1e          ADD      sp,sp,#0x278
000124  e8bd81f0          POP      {r4-r8,pc}
;;;3564   
                          ENDP


                          AREA ||i.f_stat||, CODE, READONLY, ALIGN=1

                  f_stat PROC
;;;3123   
;;;3124   FRESULT f_stat (
000000  b533              PUSH     {r0,r1,r4,r5,lr}
;;;3125   	const TCHAR *path,	/* Pointer to the file path */
;;;3126   	FILINFO *fno		/* Pointer to file information to return */
;;;3127   )
;;;3128   {
000002  f5ad7d0d          SUB      sp,sp,#0x234
000006  460d              MOV      r5,r1
;;;3129   	FRESULT res;
;;;3130   	DIR dj;
;;;3131   	DEF_NAMEBUF;
;;;3132   
;;;3133   
;;;3134   	res = chk_mounted(&path, &dj.fs, 0);
000008  2200              MOVS     r2,#0
00000a  a984              ADD      r1,sp,#0x210
00000c  a88d              ADD      r0,sp,#0x234
00000e  f7fffffe          BL       chk_mounted
000012  4604              MOV      r4,r0
;;;3135   	if (res == FR_OK) {
000014  b98c              CBNZ     r4,|L30.58|
;;;3136   		INIT_BUF(dj);
000016  a881              ADD      r0,sp,#0x204
000018  908a              STR      r0,[sp,#0x228]
00001a  a801              ADD      r0,sp,#4
00001c  908b              STR      r0,[sp,#0x22c]
;;;3137   		res = follow_path(&dj, path);	/* Follow the file path */
00001e  a884              ADD      r0,sp,#0x210
000020  998d              LDR      r1,[sp,#0x234]
000022  f7fffffe          BL       follow_path
000026  4604              MOV      r4,r0
;;;3138   		if (res == FR_OK) {				/* Follow completed */
000028  b93c              CBNZ     r4,|L30.58|
;;;3139   			if (dj.dir)		/* Found an object */
00002a  9889              LDR      r0,[sp,#0x224]
00002c  b120              CBZ      r0,|L30.56|
;;;3140   				get_fileinfo(&dj, fno);
00002e  4629              MOV      r1,r5
000030  a884              ADD      r0,sp,#0x210
000032  f7fffffe          BL       get_fileinfo
000036  e000              B        |L30.58|
                  |L30.56|
;;;3141   			else			/* It is root dir */
;;;3142   				res = FR_INVALID_NAME;
000038  2406              MOVS     r4,#6
                  |L30.58|
;;;3143   		}
;;;3144   		FREE_BUF();
;;;3145   	}
;;;3146   
;;;3147   	LEAVE_FF(dj.fs, res);
00003a  4620              MOV      r0,r4
;;;3148   }
00003c  f50d7d0f          ADD      sp,sp,#0x23c
000040  bd30              POP      {r4,r5,pc}
;;;3149   
                          ENDP


                          AREA ||i.f_sync||, CODE, READONLY, ALIGN=1

                  f_sync PROC
;;;2659   
;;;2660   FRESULT f_sync (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2661   	FIL *fp		/* Pointer to the file object */
;;;2662   )
;;;2663   {
000004  4604              MOV      r4,r0
;;;2664   	FRESULT res;
;;;2665   	DWORD tm;
;;;2666   	BYTE *dir;
;;;2667   
;;;2668   
;;;2669   	res = validate(fp);					/* Check validity of the object */
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       validate
00000c  4607              MOV      r7,r0
;;;2670   	if (res == FR_OK) {
00000e  2f00              CMP      r7,#0
000010  d14c              BNE      |L31.172|
;;;2671   		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
000012  79a0              LDRB     r0,[r4,#6]
000014  f0000020          AND      r0,r0,#0x20
000018  2800              CMP      r0,#0
00001a  d047              BEQ      |L31.172|
;;;2672   #if !_FS_TINY	/* Write-back dirty buffer */
;;;2673   			if (fp->flag & FA__DIRTY) {
00001c  79a0              LDRB     r0,[r4,#6]
00001e  f0000040          AND      r0,r0,#0x40
000022  b178              CBZ      r0,|L31.68|
;;;2674   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
000024  6821              LDR      r1,[r4,#0]
000026  7848              LDRB     r0,[r1,#1]
000028  2301              MOVS     r3,#1
00002a  f1040128          ADD      r1,r4,#0x28
00002e  69a2              LDR      r2,[r4,#0x18]
000030  f7fffffe          BL       disk_write
000034  b110              CBZ      r0,|L31.60|
;;;2675   					LEAVE_FF(fp->fs, FR_DISK_ERR);
000036  2001              MOVS     r0,#1
                  |L31.56|
;;;2676   				fp->flag &= ~FA__DIRTY;
;;;2677   			}
;;;2678   #endif
;;;2679   			/* Update the directory entry */
;;;2680   			res = move_window(fp->fs, fp->dir_sect);
;;;2681   			if (res == FR_OK) {
;;;2682   				dir = fp->dir_ptr;
;;;2683   				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
;;;2684   				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
;;;2685   				st_clust(dir, fp->sclust);					/* Update start cluster */
;;;2686   				tm = get_fattime();							/* Update updated time */
;;;2687   				ST_DWORD(dir+DIR_WrtTime, tm);
;;;2688   				ST_WORD(dir+DIR_LstAccDate, 0);
;;;2689   				fp->flag &= ~FA__WRITTEN;
;;;2690   				fp->fs->wflag = 1;
;;;2691   				res = sync_fs(fp->fs);
;;;2692   			}
;;;2693   		}
;;;2694   	}
;;;2695   
;;;2696   	LEAVE_FF(fp->fs, res);
;;;2697   }
000038  e8bd81f0          POP      {r4-r8,pc}
                  |L31.60|
00003c  79a0              LDRB     r0,[r4,#6]            ;2676
00003e  f0200040          BIC      r0,r0,#0x40           ;2676
000042  71a0              STRB     r0,[r4,#6]            ;2676
                  |L31.68|
000044  69e1              LDR      r1,[r4,#0x1c]         ;2680
000046  6820              LDR      r0,[r4,#0]            ;2680
000048  f7fffffe          BL       move_window
00004c  4607              MOV      r7,r0                 ;2680
00004e  2f00              CMP      r7,#0                 ;2681
000050  d12c              BNE      |L31.172|
000052  6a25              LDR      r5,[r4,#0x20]         ;2682
000054  7ae8              LDRB     r0,[r5,#0xb]          ;2683
000056  f0400020          ORR      r0,r0,#0x20           ;2683
00005a  72e8              STRB     r0,[r5,#0xb]          ;2683
00005c  7b20              LDRB     r0,[r4,#0xc]          ;2684
00005e  7728              STRB     r0,[r5,#0x1c]         ;2684
000060  89a0              LDRH     r0,[r4,#0xc]          ;2684
000062  0a01              LSRS     r1,r0,#8              ;2684
000064  7769              STRB     r1,[r5,#0x1d]         ;2684
000066  68e0              LDR      r0,[r4,#0xc]          ;2684
000068  0c01              LSRS     r1,r0,#16             ;2684
00006a  77a9              STRB     r1,[r5,#0x1e]         ;2684
00006c  68e0              LDR      r0,[r4,#0xc]          ;2684
00006e  0e01              LSRS     r1,r0,#24             ;2684
000070  77e9              STRB     r1,[r5,#0x1f]         ;2684
000072  4628              MOV      r0,r5                 ;2685
000074  6921              LDR      r1,[r4,#0x10]         ;2685
000076  f7fffffe          BL       st_clust
00007a  f7fffffe          BL       get_fattime
00007e  4606              MOV      r6,r0                 ;2686
000080  75ae              STRB     r6,[r5,#0x16]         ;2687
000082  0a31              LSRS     r1,r6,#8              ;2687
000084  75e9              STRB     r1,[r5,#0x17]         ;2687
000086  0c31              LSRS     r1,r6,#16             ;2687
000088  7629              STRB     r1,[r5,#0x18]         ;2687
00008a  0e31              LSRS     r1,r6,#24             ;2687
00008c  7669              STRB     r1,[r5,#0x19]         ;2687
00008e  2000              MOVS     r0,#0                 ;2688
000090  74a8              STRB     r0,[r5,#0x12]         ;2688
000092  2100              MOVS     r1,#0                 ;2688
000094  74e9              STRB     r1,[r5,#0x13]         ;2688
000096  79a0              LDRB     r0,[r4,#6]            ;2689
000098  f0200020          BIC      r0,r0,#0x20           ;2689
00009c  71a0              STRB     r0,[r4,#6]            ;2689
00009e  2001              MOVS     r0,#1                 ;2690
0000a0  6821              LDR      r1,[r4,#0]            ;2690
0000a2  7108              STRB     r0,[r1,#4]            ;2690
0000a4  6820              LDR      r0,[r4,#0]            ;2691
0000a6  f7fffffe          BL       sync_fs
0000aa  4607              MOV      r7,r0                 ;2691
                  |L31.172|
0000ac  4638              MOV      r0,r7                 ;2696
0000ae  e7c3              B        |L31.56|
;;;2698   
                          ENDP


                          AREA ||i.f_truncate||, CODE, READONLY, ALIGN=1

                  f_truncate PROC
;;;3223   
;;;3224   FRESULT f_truncate (
000000  b570              PUSH     {r4-r6,lr}
;;;3225   	FIL *fp		/* Pointer to the file object */
;;;3226   )
;;;3227   {
000002  4604              MOV      r4,r0
;;;3228   	FRESULT res;
;;;3229   	DWORD ncl;
;;;3230   
;;;3231   
;;;3232   	res = validate(fp);						/* Check validity of the object */
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       validate
00000a  4605              MOV      r5,r0
;;;3233   	if (res == FR_OK) {
00000c  b955              CBNZ     r5,|L32.36|
;;;3234   		if (fp->flag & FA__ERROR) {			/* Check abort flag */
00000e  79a0              LDRB     r0,[r4,#6]
000010  f0000080          AND      r0,r0,#0x80
000014  b108              CBZ      r0,|L32.26|
;;;3235   			res = FR_INT_ERR;
000016  2502              MOVS     r5,#2
000018  e004              B        |L32.36|
                  |L32.26|
;;;3236   		} else {
;;;3237   			if (!(fp->flag & FA_WRITE))		/* Check access mode */
00001a  79a0              LDRB     r0,[r4,#6]
00001c  f0000002          AND      r0,r0,#2
000020  b900              CBNZ     r0,|L32.36|
;;;3238   				res = FR_DENIED;
000022  2507              MOVS     r5,#7
                  |L32.36|
;;;3239   		}
;;;3240   	}
;;;3241   	if (res == FR_OK) {
000024  2d00              CMP      r5,#0
000026  d136              BNE      |L32.150|
;;;3242   		if (fp->fsize > fp->fptr) {
000028  e9d41002          LDRD     r1,r0,[r4,#8]
00002c  4288              CMP      r0,r1
00002e  d92d              BLS      |L32.140|
;;;3243   			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
000030  68a0              LDR      r0,[r4,#8]
000032  60e0              STR      r0,[r4,#0xc]
;;;3244   			fp->flag |= FA__WRITTEN;
000034  79a0              LDRB     r0,[r4,#6]
000036  f0400020          ORR      r0,r0,#0x20
00003a  71a0              STRB     r0,[r4,#6]
;;;3245   			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
00003c  68a0              LDR      r0,[r4,#8]
00003e  b938              CBNZ     r0,|L32.80|
;;;3246   				res = remove_chain(fp->fs, fp->sclust);
000040  6921              LDR      r1,[r4,#0x10]
000042  6820              LDR      r0,[r4,#0]
000044  f7fffffe          BL       remove_chain
000048  4605              MOV      r5,r0
;;;3247   				fp->sclust = 0;
00004a  2000              MOVS     r0,#0
00004c  6120              STR      r0,[r4,#0x10]
00004e  e01d              B        |L32.140|
                  |L32.80|
;;;3248   			} else {				/* When truncate a part of the file, remove remaining clusters */
;;;3249   				ncl = get_fat(fp->fs, fp->clust);
000050  6961              LDR      r1,[r4,#0x14]
000052  6820              LDR      r0,[r4,#0]
000054  f7fffffe          BL       get_fat
000058  4606              MOV      r6,r0
;;;3250   				res = FR_OK;
00005a  2500              MOVS     r5,#0
;;;3251   				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
00005c  1c70              ADDS     r0,r6,#1
00005e  b900              CBNZ     r0,|L32.98|
000060  2501              MOVS     r5,#1
                  |L32.98|
;;;3252   				if (ncl == 1) res = FR_INT_ERR;
000062  2e01              CMP      r6,#1
000064  d100              BNE      |L32.104|
000066  2502              MOVS     r5,#2
                  |L32.104|
;;;3253   				if (res == FR_OK && ncl < fp->fs->n_fatent) {
000068  b985              CBNZ     r5,|L32.140|
00006a  6820              LDR      r0,[r4,#0]
00006c  6980              LDR      r0,[r0,#0x18]
00006e  42b0              CMP      r0,r6
000070  d90c              BLS      |L32.140|
;;;3254   					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
000072  f06f4270          MVN      r2,#0xf0000000
000076  6961              LDR      r1,[r4,#0x14]
000078  6820              LDR      r0,[r4,#0]
00007a  f7fffffe          BL       put_fat
00007e  4605              MOV      r5,r0
;;;3255   					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
000080  b925              CBNZ     r5,|L32.140|
000082  4631              MOV      r1,r6
000084  6820              LDR      r0,[r4,#0]
000086  f7fffffe          BL       remove_chain
00008a  4605              MOV      r5,r0
                  |L32.140|
;;;3256   				}
;;;3257   			}
;;;3258   		}
;;;3259   		if (res != FR_OK) fp->flag |= FA__ERROR;
00008c  b11d              CBZ      r5,|L32.150|
00008e  79a0              LDRB     r0,[r4,#6]
000090  f0400080          ORR      r0,r0,#0x80
000094  71a0              STRB     r0,[r4,#6]
                  |L32.150|
;;;3260   	}
;;;3261   
;;;3262   	LEAVE_FF(fp->fs, res);
000096  4628              MOV      r0,r5
;;;3263   }
000098  bd70              POP      {r4-r6,pc}
;;;3264   
                          ENDP


                          AREA ||i.f_unlink||, CODE, READONLY, ALIGN=1

                  f_unlink PROC
;;;3271   
;;;3272   FRESULT f_unlink (
000000  b571              PUSH     {r0,r4-r6,lr}
;;;3273   	const TCHAR *path		/* Pointer to the file or directory path */
;;;3274   )
;;;3275   {
000002  f5ad7d15          SUB      sp,sp,#0x254
;;;3276   	FRESULT res;
;;;3277   	DIR dj, sdj;
;;;3278   	BYTE *dir;
;;;3279   	DWORD dclst;
;;;3280   	DEF_NAMEBUF;
;;;3281   
;;;3282   
;;;3283   	res = chk_mounted(&path, &dj.fs, 1);
000006  2201              MOVS     r2,#1
000008  a98c              ADD      r1,sp,#0x230
00000a  a895              ADD      r0,sp,#0x254
00000c  f7fffffe          BL       chk_mounted
000010  4604              MOV      r4,r0
;;;3284   	if (res == FR_OK) {
000012  2c00              CMP      r4,#0
000014  d14f              BNE      |L33.182|
;;;3285   		INIT_BUF(dj);
000016  a880              ADD      r0,sp,#0x200
000018  9092              STR      r0,[sp,#0x248]
00001a  f8cdd24c          STR      sp,[sp,#0x24c]
;;;3286   		res = follow_path(&dj, path);		/* Follow the file path */
00001e  a88c              ADD      r0,sp,#0x230
000020  9995              LDR      r1,[sp,#0x254]
000022  f7fffffe          BL       follow_path
000026  4604              MOV      r4,r0
;;;3287   		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
000028  bf00              NOP      
;;;3288   			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
;;;3289   #if _FS_LOCK
;;;3290   		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
00002a  b924              CBNZ     r4,|L33.54|
00002c  2102              MOVS     r1,#2
00002e  a88c              ADD      r0,sp,#0x230
000030  f7fffffe          BL       chk_lock
000034  4604              MOV      r4,r0
                  |L33.54|
;;;3291   #endif
;;;3292   		if (res == FR_OK) {					/* The object is accessible */
000036  2c00              CMP      r4,#0
000038  d13d              BNE      |L33.182|
;;;3293   			dir = dj.dir;
00003a  9e91              LDR      r6,[sp,#0x244]
;;;3294   			if (!dir) {
00003c  b90e              CBNZ     r6,|L33.66|
;;;3295   				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
00003e  2406              MOVS     r4,#6
000040  e004              B        |L33.76|
                  |L33.66|
;;;3296   			} else {
;;;3297   				if (dir[DIR_Attr] & AM_RDO)
000042  7af0              LDRB     r0,[r6,#0xb]
000044  f0000001          AND      r0,r0,#1
000048  b100              CBZ      r0,|L33.76|
;;;3298   					res = FR_DENIED;		/* Cannot remove R/O object */
00004a  2407              MOVS     r4,#7
                  |L33.76|
;;;3299   			}
;;;3300   			dclst = ld_clust(dj.fs, dir);
00004c  4631              MOV      r1,r6
00004e  988c              LDR      r0,[sp,#0x230]
000050  f7fffffe          BL       ld_clust
000054  4605              MOV      r5,r0
;;;3301   			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
000056  b9ec              CBNZ     r4,|L33.148|
000058  7af0              LDRB     r0,[r6,#0xb]
00005a  f0000010          AND      r0,r0,#0x10
00005e  b1c8              CBZ      r0,|L33.148|
;;;3302   				if (dclst < 2) {
000060  2d02              CMP      r5,#2
000062  d201              BCS      |L33.104|
;;;3303   					res = FR_INT_ERR;
000064  2402              MOVS     r4,#2
000066  e015              B        |L33.148|
                  |L33.104|
;;;3304   				} else {
;;;3305   					mem_cpy(&sdj, &dj, sizeof (DIR));	/* Check if the sub-dir is empty or not */
000068  2224              MOVS     r2,#0x24
00006a  a98c              ADD      r1,sp,#0x230
00006c  a883              ADD      r0,sp,#0x20c
00006e  f7fffffe          BL       mem_cpy
;;;3306   					sdj.sclust = dclst;
000072  9585              STR      r5,[sp,#0x214]
;;;3307   					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
000074  2102              MOVS     r1,#2
000076  a883              ADD      r0,sp,#0x20c
000078  f7fffffe          BL       dir_sdi
00007c  4604              MOV      r4,r0
;;;3308   					if (res == FR_OK) {
00007e  b94c              CBNZ     r4,|L33.148|
;;;3309   						res = dir_read(&sdj, 0);	/* Read an item */
000080  2100              MOVS     r1,#0
000082  a883              ADD      r0,sp,#0x20c
000084  f7fffffe          BL       dir_read
000088  4604              MOV      r4,r0
;;;3310   						if (res == FR_OK		/* Not empty dir */
00008a  b904              CBNZ     r4,|L33.142|
;;;3311   #if _FS_RPATH
;;;3312   						|| dclst == dj.fs->cdir	/* Current dir */
;;;3313   #endif
;;;3314   						) res = FR_DENIED;
00008c  2407              MOVS     r4,#7
                  |L33.142|
;;;3315   						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
00008e  2c04              CMP      r4,#4
000090  d100              BNE      |L33.148|
000092  2400              MOVS     r4,#0
                  |L33.148|
;;;3316   					}
;;;3317   				}
;;;3318   			}
;;;3319   			if (res == FR_OK) {
000094  b97c              CBNZ     r4,|L33.182|
;;;3320   				res = dir_remove(&dj);		/* Remove the directory entry */
000096  a88c              ADD      r0,sp,#0x230
000098  f7fffffe          BL       dir_remove
00009c  4604              MOV      r4,r0
;;;3321   				if (res == FR_OK) {
00009e  b954              CBNZ     r4,|L33.182|
;;;3322   					if (dclst)				/* Remove the cluster chain if exist */
0000a0  b125              CBZ      r5,|L33.172|
;;;3323   						res = remove_chain(dj.fs, dclst);
0000a2  4629              MOV      r1,r5
0000a4  988c              LDR      r0,[sp,#0x230]
0000a6  f7fffffe          BL       remove_chain
0000aa  4604              MOV      r4,r0
                  |L33.172|
;;;3324   					if (res == FR_OK) res = sync_fs(dj.fs);
0000ac  b91c              CBNZ     r4,|L33.182|
0000ae  988c              LDR      r0,[sp,#0x230]
0000b0  f7fffffe          BL       sync_fs
0000b4  4604              MOV      r4,r0
                  |L33.182|
;;;3325   				}
;;;3326   			}
;;;3327   		}
;;;3328   		FREE_BUF();
;;;3329   	}
;;;3330   
;;;3331   	LEAVE_FF(dj.fs, res);
0000b6  4620              MOV      r0,r4
;;;3332   }
0000b8  f50d7d16          ADD      sp,sp,#0x258
0000bc  bd70              POP      {r4-r6,pc}
;;;3333   
                          ENDP


                          AREA ||i.f_utime||, CODE, READONLY, ALIGN=1

                  f_utime PROC
;;;3455   
;;;3456   FRESULT f_utime (
000000  b573              PUSH     {r0,r1,r4-r6,lr}
;;;3457   	const TCHAR *path,	/* Pointer to the file/directory name */
;;;3458   	const FILINFO *fno	/* Pointer to the time stamp to be set */
;;;3459   )
;;;3460   {
000002  f5ad7d0c          SUB      sp,sp,#0x230
000006  460d              MOV      r5,r1
;;;3461   	FRESULT res;
;;;3462   	DIR dj;
;;;3463   	BYTE *dir;
;;;3464   	DEF_NAMEBUF;
;;;3465   
;;;3466   
;;;3467   	res = chk_mounted(&path, &dj.fs, 1);
000008  2201              MOVS     r2,#1
00000a  a983              ADD      r1,sp,#0x20c
00000c  a88c              ADD      r0,sp,#0x230
00000e  f7fffffe          BL       chk_mounted
000012  4606              MOV      r6,r0
;;;3468   	if (res == FR_OK) {
000014  b9fe              CBNZ     r6,|L34.86|
;;;3469   		INIT_BUF(dj);
000016  a880              ADD      r0,sp,#0x200
000018  9089              STR      r0,[sp,#0x224]
00001a  f8cdd228          STR      sp,[sp,#0x228]
;;;3470   		res = follow_path(&dj, path);	/* Follow the file path */
00001e  a883              ADD      r0,sp,#0x20c
000020  998c              LDR      r1,[sp,#0x230]
000022  f7fffffe          BL       follow_path
000026  4606              MOV      r6,r0
;;;3471   		FREE_BUF();
;;;3472   		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
000028  bf00              NOP      
;;;3473   			res = FR_INVALID_NAME;
;;;3474   		if (res == FR_OK) {
00002a  b9a6              CBNZ     r6,|L34.86|
;;;3475   			dir = dj.dir;
00002c  9c88              LDR      r4,[sp,#0x220]
;;;3476   			if (!dir) {					/* Root directory */
00002e  b90c              CBNZ     r4,|L34.52|
;;;3477   				res = FR_INVALID_NAME;
000030  2606              MOVS     r6,#6
000032  e010              B        |L34.86|
                  |L34.52|
;;;3478   			} else {					/* File or sub-directory */
;;;3479   				ST_WORD(dir+DIR_WrtTime, fno->ftime);
000034  79a8              LDRB     r0,[r5,#6]
000036  75a0              STRB     r0,[r4,#0x16]
000038  88e8              LDRH     r0,[r5,#6]
00003a  1201              ASRS     r1,r0,#8
00003c  75e1              STRB     r1,[r4,#0x17]
;;;3480   				ST_WORD(dir+DIR_WrtDate, fno->fdate);
00003e  7928              LDRB     r0,[r5,#4]
000040  7620              STRB     r0,[r4,#0x18]
000042  88a8              LDRH     r0,[r5,#4]
000044  1201              ASRS     r1,r0,#8
000046  7661              STRB     r1,[r4,#0x19]
;;;3481   				dj.fs->wflag = 1;
000048  2001              MOVS     r0,#1
00004a  9983              LDR      r1,[sp,#0x20c]
00004c  7108              STRB     r0,[r1,#4]
;;;3482   				res = sync_fs(dj.fs);
00004e  9883              LDR      r0,[sp,#0x20c]
000050  f7fffffe          BL       sync_fs
000054  4606              MOV      r6,r0
                  |L34.86|
;;;3483   			}
;;;3484   		}
;;;3485   	}
;;;3486   
;;;3487   	LEAVE_FF(dj.fs, res);
000056  4630              MOV      r0,r6
;;;3488   }
000058  f50d7d0e          ADD      sp,sp,#0x238
00005c  bd70              POP      {r4-r6,pc}
;;;3489   
                          ENDP


                          AREA ||i.f_write||, CODE, READONLY, ALIGN=1

                  f_write PROC
;;;2540   
;;;2541   FRESULT f_write (
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;2542   	FIL *fp,			/* Pointer to the file object */
;;;2543   	const void *buff,	/* Pointer to the data to be written */
;;;2544   	UINT btw,			/* Number of bytes to write */
;;;2545   	UINT *bw			/* Pointer to number of bytes written */
;;;2546   )
;;;2547   {
000004  b083              SUB      sp,sp,#0xc
000006  4604              MOV      r4,r0
000008  4615              MOV      r5,r2
00000a  469b              MOV      r11,r3
;;;2548   	FRESULT res;
;;;2549   	DWORD clst, sect;
;;;2550   	UINT wcnt, cc;
;;;2551   	const BYTE *wbuff = (const BYTE*)buff;
00000c  9804              LDR      r0,[sp,#0x10]
00000e  9001              STR      r0,[sp,#4]
;;;2552   	BYTE csect;
;;;2553   
;;;2554   
;;;2555   	*bw = 0;	/* Clear write byte counter */
000010  2000              MOVS     r0,#0
000012  f8cb0000          STR      r0,[r11,#0]
;;;2556   
;;;2557   	res = validate(fp);						/* Check validity */
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       validate
00001c  9002              STR      r0,[sp,#8]
;;;2558   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
00001e  9802              LDR      r0,[sp,#8]
000020  b118              CBZ      r0,|L35.42|
000022  9802              LDR      r0,[sp,#8]
                  |L35.36|
;;;2559   	if (fp->flag & FA__ERROR)				/* Aborted file? */
;;;2560   		LEAVE_FF(fp->fs, FR_INT_ERR);
;;;2561   	if (!(fp->flag & FA_WRITE))				/* Check access mode */
;;;2562   		LEAVE_FF(fp->fs, FR_DENIED);
;;;2563   	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
;;;2564   
;;;2565   	for ( ;  btw;							/* Repeat until all data written */
;;;2566   		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
;;;2567   		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
;;;2568   			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
;;;2569   			if (!csect) {					/* On the cluster boundary? */
;;;2570   				if (fp->fptr == 0) {		/* On the top of the file? */
;;;2571   					clst = fp->sclust;		/* Follow from the origin */
;;;2572   					if (clst == 0)			/* When no cluster is allocated, */
;;;2573   						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
;;;2574   				} else {					/* Middle or end of the file */
;;;2575   #if _USE_FASTSEEK
;;;2576   					if (fp->cltbl)
;;;2577   						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
;;;2578   					else
;;;2579   #endif
;;;2580   						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
;;;2581   				}
;;;2582   				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
;;;2583   				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
;;;2584   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2585   				fp->clust = clst;			/* Update current cluster */
;;;2586   			}
;;;2587   #if _FS_TINY
;;;2588   			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
;;;2589   				ABORT(fp->fs, FR_DISK_ERR);
;;;2590   #else
;;;2591   			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
;;;2592   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;2593   					ABORT(fp->fs, FR_DISK_ERR);
;;;2594   				fp->flag &= ~FA__DIRTY;
;;;2595   			}
;;;2596   #endif
;;;2597   			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
;;;2598   			if (!sect) ABORT(fp->fs, FR_INT_ERR);
;;;2599   			sect += csect;
;;;2600   			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
;;;2601   			if (cc) {						/* Write maximum contiguous sectors directly */
;;;2602   				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
;;;2603   					cc = fp->fs->csize - csect;
;;;2604   				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
;;;2605   					ABORT(fp->fs, FR_DISK_ERR);
;;;2606   #if _FS_TINY
;;;2607   				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
;;;2608   					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
;;;2609   					fp->fs->wflag = 0;
;;;2610   				}
;;;2611   #else
;;;2612   				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
;;;2613   					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
;;;2614   					fp->flag &= ~FA__DIRTY;
;;;2615   				}
;;;2616   #endif
;;;2617   				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
;;;2618   				continue;
;;;2619   			}
;;;2620   #if _FS_TINY
;;;2621   			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
;;;2622   				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
;;;2623   				fp->fs->winsect = sect;
;;;2624   			}
;;;2625   #else
;;;2626   			if (fp->dsect != sect) {		/* Fill sector cache with file data */
;;;2627   				if (fp->fptr < fp->fsize &&
;;;2628   					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
;;;2629   						ABORT(fp->fs, FR_DISK_ERR);
;;;2630   			}
;;;2631   #endif
;;;2632   			fp->dsect = sect;
;;;2633   		}
;;;2634   		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
;;;2635   		if (wcnt > btw) wcnt = btw;
;;;2636   #if _FS_TINY
;;;2637   		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
;;;2638   			ABORT(fp->fs, FR_DISK_ERR);
;;;2639   		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
;;;2640   		fp->fs->wflag = 1;
;;;2641   #else
;;;2642   		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
;;;2643   		fp->flag |= FA__DIRTY;
;;;2644   #endif
;;;2645   	}
;;;2646   
;;;2647   	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
;;;2648   	fp->flag |= FA__WRITTEN;						/* Set file change flag */
;;;2649   
;;;2650   	LEAVE_FF(fp->fs, FR_OK);
;;;2651   }
000024  b007              ADD      sp,sp,#0x1c
000026  e8bd8ff0          POP      {r4-r11,pc}
                  |L35.42|
00002a  79a0              LDRB     r0,[r4,#6]            ;2559
00002c  f0000080          AND      r0,r0,#0x80           ;2559
000030  b108              CBZ      r0,|L35.54|
000032  2002              MOVS     r0,#2                 ;2560
000034  e7f6              B        |L35.36|
                  |L35.54|
000036  79a0              LDRB     r0,[r4,#6]            ;2561
000038  f0000002          AND      r0,r0,#2              ;2561
00003c  b908              CBNZ     r0,|L35.66|
00003e  2007              MOVS     r0,#7                 ;2562
000040  e7f0              B        |L35.36|
                  |L35.66|
000042  68e0              LDR      r0,[r4,#0xc]          ;2563
000044  4428              ADD      r0,r0,r5              ;2563
000046  68e1              LDR      r1,[r4,#0xc]          ;2563
000048  4288              CMP      r0,r1                 ;2563
00004a  d200              BCS      |L35.78|
00004c  2500              MOVS     r5,#0                 ;2563
                  |L35.78|
00004e  e0cd              B        |L35.492|
                  |L35.80|
000050  8920              LDRH     r0,[r4,#8]            ;2567
000052  f3c00008          UBFX     r0,r0,#0,#9           ;2567
000056  2800              CMP      r0,#0                 ;2567
000058  d177              BNE      |L35.330|
00005a  6820              LDR      r0,[r4,#0]            ;2568
00005c  7880              LDRB     r0,[r0,#2]            ;2568
00005e  1e40              SUBS     r0,r0,#1              ;2568
000060  68a1              LDR      r1,[r4,#8]            ;2568
000062  ea002051          AND      r0,r0,r1,LSR #9       ;2568
000066  f0000aff          AND      r10,r0,#0xff          ;2568
00006a  f1ba0f00          CMP      r10,#0                ;2569
00006e  d12a              BNE      |L35.198|
000070  68a0              LDR      r0,[r4,#8]            ;2570
000072  b958              CBNZ     r0,|L35.140|
000074  f8d48010          LDR      r8,[r4,#0x10]         ;2571
000078  f1b80f00          CMP      r8,#0                 ;2572
00007c  d10b              BNE      |L35.150|
00007e  2100              MOVS     r1,#0                 ;2573
000080  6820              LDR      r0,[r4,#0]            ;2573
000082  f7fffffe          BL       create_chain
000086  4680              MOV      r8,r0                 ;2573
000088  6120              STR      r0,[r4,#0x10]         ;2573
00008a  e004              B        |L35.150|
                  |L35.140|
00008c  6961              LDR      r1,[r4,#0x14]         ;2580
00008e  6820              LDR      r0,[r4,#0]            ;2580
000090  f7fffffe          BL       create_chain
000094  4680              MOV      r8,r0                 ;2580
                  |L35.150|
000096  f1b80f00          CMP      r8,#0                 ;2582
00009a  d100              BNE      |L35.158|
00009c  e0a9              B        |L35.498|
                  |L35.158|
00009e  f1b80f01          CMP      r8,#1                 ;2583
0000a2  d105              BNE      |L35.176|
0000a4  79a0              LDRB     r0,[r4,#6]            ;2583
0000a6  f0400080          ORR      r0,r0,#0x80           ;2583
0000aa  71a0              STRB     r0,[r4,#6]            ;2583
0000ac  2002              MOVS     r0,#2                 ;2583
0000ae  e7b9              B        |L35.36|
                  |L35.176|
0000b0  f1080001          ADD      r0,r8,#1              ;2584
0000b4  b928              CBNZ     r0,|L35.194|
0000b6  79a0              LDRB     r0,[r4,#6]            ;2584
0000b8  f0400080          ORR      r0,r0,#0x80           ;2584
0000bc  71a0              STRB     r0,[r4,#6]            ;2584
0000be  2001              MOVS     r0,#1                 ;2584
0000c0  e7b0              B        |L35.36|
                  |L35.194|
0000c2  f8c48014          STR      r8,[r4,#0x14]         ;2585
                  |L35.198|
0000c6  79a0              LDRB     r0,[r4,#6]            ;2591
0000c8  f0000040          AND      r0,r0,#0x40           ;2591
0000cc  b190              CBZ      r0,|L35.244|
0000ce  6821              LDR      r1,[r4,#0]            ;2592
0000d0  7848              LDRB     r0,[r1,#1]            ;2592
0000d2  2301              MOVS     r3,#1                 ;2592
0000d4  f1040128          ADD      r1,r4,#0x28           ;2592
0000d8  69a2              LDR      r2,[r4,#0x18]         ;2592
0000da  f7fffffe          BL       disk_write
0000de  b128              CBZ      r0,|L35.236|
0000e0  79a0              LDRB     r0,[r4,#6]            ;2593
0000e2  f0400080          ORR      r0,r0,#0x80           ;2593
0000e6  71a0              STRB     r0,[r4,#6]            ;2593
0000e8  2001              MOVS     r0,#1                 ;2593
0000ea  e79b              B        |L35.36|
                  |L35.236|
0000ec  79a0              LDRB     r0,[r4,#6]            ;2594
0000ee  f0200040          BIC      r0,r0,#0x40           ;2594
0000f2  71a0              STRB     r0,[r4,#6]            ;2594
                  |L35.244|
0000f4  6961              LDR      r1,[r4,#0x14]         ;2597
0000f6  6820              LDR      r0,[r4,#0]            ;2597
0000f8  f7fffffe          BL       clust2sect
0000fc  4606              MOV      r6,r0                 ;2597
0000fe  b92e              CBNZ     r6,|L35.268|
000100  79a0              LDRB     r0,[r4,#6]            ;2598
000102  f0400080          ORR      r0,r0,#0x80           ;2598
000106  71a0              STRB     r0,[r4,#6]            ;2598
000108  2002              MOVS     r0,#2                 ;2598
00010a  e78b              B        |L35.36|
                  |L35.268|
00010c  4456              ADD      r6,r6,r10             ;2599
00010e  ea4f2955          LSR      r9,r5,#9              ;2600
000112  f1b90f00          CMP      r9,#0                 ;2601
000116  d02f              BEQ      |L35.376|
000118  eb0a0009          ADD      r0,r10,r9             ;2602
00011c  6821              LDR      r1,[r4,#0]            ;2602
00011e  7889              LDRB     r1,[r1,#2]            ;2602
000120  4288              CMP      r0,r1                 ;2602
000122  d903              BLS      |L35.300|
000124  6820              LDR      r0,[r4,#0]            ;2603
000126  7880              LDRB     r0,[r0,#2]            ;2603
000128  eba0090a          SUB      r9,r0,r10             ;2603
                  |L35.300|
00012c  f00903ff          AND      r3,r9,#0xff           ;2604
000130  6821              LDR      r1,[r4,#0]            ;2604
000132  7848              LDRB     r0,[r1,#1]            ;2604
000134  4632              MOV      r2,r6                 ;2604
000136  9901              LDR      r1,[sp,#4]            ;2604
000138  f7fffffe          BL       disk_write
00013c  b130              CBZ      r0,|L35.332|
00013e  79a0              LDRB     r0,[r4,#6]            ;2605
000140  f0400080          ORR      r0,r0,#0x80           ;2605
000144  71a0              STRB     r0,[r4,#6]            ;2605
000146  2001              MOVS     r0,#1                 ;2605
000148  e76c              B        |L35.36|
                  |L35.330|
00014a  e02c              B        |L35.422|
                  |L35.332|
00014c  69a0              LDR      r0,[r4,#0x18]         ;2612
00014e  1b80              SUBS     r0,r0,r6              ;2612
000150  4548              CMP      r0,r9                 ;2612
000152  d20e              BCS      |L35.370|
000154  69a0              LDR      r0,[r4,#0x18]         ;2613
000156  1b80              SUBS     r0,r0,r6              ;2613
000158  9a01              LDR      r2,[sp,#4]            ;2613
00015a  eb022140          ADD      r1,r2,r0,LSL #9       ;2613
00015e  f44f7200          MOV      r2,#0x200             ;2613
000162  f1040028          ADD      r0,r4,#0x28           ;2613
000166  f7fffffe          BL       mem_cpy
00016a  79a0              LDRB     r0,[r4,#6]            ;2614
00016c  f0200040          BIC      r0,r0,#0x40           ;2614
000170  71a0              STRB     r0,[r4,#6]            ;2614
                  |L35.370|
000172  ea4f2749          LSL      r7,r9,#9              ;2617
000176  e02d              B        |L35.468|
                  |L35.376|
000178  69a0              LDR      r0,[r4,#0x18]         ;2626
00017a  42b0              CMP      r0,r6                 ;2626
00017c  d012              BEQ      |L35.420|
00017e  e9d40102          LDRD     r0,r1,[r4,#8]         ;2627
000182  4288              CMP      r0,r1                 ;2627
000184  d20e              BCS      |L35.420|
000186  6821              LDR      r1,[r4,#0]            ;2628
000188  7848              LDRB     r0,[r1,#1]            ;2628
00018a  2301              MOVS     r3,#1                 ;2628
00018c  4632              MOV      r2,r6                 ;2628
00018e  f1040128          ADD      r1,r4,#0x28           ;2628
000192  f7fffffe          BL       disk_read
000196  b128              CBZ      r0,|L35.420|
000198  79a0              LDRB     r0,[r4,#6]            ;2629
00019a  f0400080          ORR      r0,r0,#0x80           ;2629
00019e  71a0              STRB     r0,[r4,#6]            ;2629
0001a0  2001              MOVS     r0,#1                 ;2629
0001a2  e73f              B        |L35.36|
                  |L35.420|
0001a4  61a6              STR      r6,[r4,#0x18]         ;2632
                  |L35.422|
0001a6  8920              LDRH     r0,[r4,#8]            ;2634
0001a8  f3c00008          UBFX     r0,r0,#0,#9           ;2634
0001ac  f5c07700          RSB      r7,r0,#0x200          ;2634
0001b0  42af              CMP      r7,r5                 ;2635
0001b2  d900              BLS      |L35.438|
0001b4  462f              MOV      r7,r5                 ;2635
                  |L35.438|
0001b6  8921              LDRH     r1,[r4,#8]            ;2642
0001b8  f3c10208          UBFX     r2,r1,#0,#9           ;2642
0001bc  f1040128          ADD      r1,r4,#0x28           ;2642
0001c0  1850              ADDS     r0,r2,r1              ;2642
0001c2  463a              MOV      r2,r7                 ;2642
0001c4  9901              LDR      r1,[sp,#4]            ;2642
0001c6  f7fffffe          BL       mem_cpy
0001ca  79a0              LDRB     r0,[r4,#6]            ;2643
0001cc  f0400040          ORR      r0,r0,#0x40           ;2643
0001d0  71a0              STRB     r0,[r4,#6]            ;2643
0001d2  bf00              NOP                            ;2618
                  |L35.468|
0001d4  9801              LDR      r0,[sp,#4]            ;2566
0001d6  4438              ADD      r0,r0,r7              ;2566
0001d8  9001              STR      r0,[sp,#4]            ;2566
0001da  68a0              LDR      r0,[r4,#8]            ;2566
0001dc  4438              ADD      r0,r0,r7              ;2566
0001de  60a0              STR      r0,[r4,#8]            ;2566
0001e0  f8db0000          LDR      r0,[r11,#0]           ;2566
0001e4  4438              ADD      r0,r0,r7              ;2566
0001e6  f8cb0000          STR      r0,[r11,#0]           ;2566
0001ea  1bed              SUBS     r5,r5,r7              ;2566
                  |L35.492|
0001ec  2d00              CMP      r5,#0                 ;2565
0001ee  f47faf2f          BNE      |L35.80|
                  |L35.498|
0001f2  bf00              NOP                            ;2582
0001f4  e9d40102          LDRD     r0,r1,[r4,#8]         ;2647
0001f8  4288              CMP      r0,r1                 ;2647
0001fa  d901              BLS      |L35.512|
0001fc  68a0              LDR      r0,[r4,#8]            ;2647
0001fe  60e0              STR      r0,[r4,#0xc]          ;2647
                  |L35.512|
000200  79a0              LDRB     r0,[r4,#6]            ;2648
000202  f0400020          ORR      r0,r0,#0x20           ;2648
000206  71a0              STRB     r0,[r4,#6]            ;2648
000208  2000              MOVS     r0,#0                 ;2650
00020a  e70b              B        |L35.36|
;;;2652   
                          ENDP


                          AREA ||i.fit_lfn||, CODE, READONLY, ALIGN=2

                  fit_lfn PROC
;;;1340   static
;;;1341   void fit_lfn (
000000  b5f0              PUSH     {r4-r7,lr}
;;;1342   	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
;;;1343   	BYTE *dir,				/* Pointer to the directory entry */
;;;1344   	BYTE ord,				/* LFN order (1-20) */
;;;1345   	BYTE sum				/* SFN sum */
;;;1346   )
;;;1347   {
000002  4604              MOV      r4,r0
000004  461d              MOV      r5,r3
;;;1348   	UINT i, s;
;;;1349   	WCHAR wc;
;;;1350   
;;;1351   
;;;1352   	dir[LDIR_Chksum] = sum;			/* Set check sum */
000006  734d              STRB     r5,[r1,#0xd]
;;;1353   	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
000008  270f              MOVS     r7,#0xf
00000a  72cf              STRB     r7,[r1,#0xb]
;;;1354   	dir[LDIR_Type] = 0;
00000c  2700              MOVS     r7,#0
00000e  730f              STRB     r7,[r1,#0xc]
;;;1355   	ST_WORD(dir+LDIR_FstClusLO, 0);
000010  768f              STRB     r7,[r1,#0x1a]
000012  46bc              MOV      r12,r7
000014  f881c01b          STRB     r12,[r1,#0x1b]
;;;1356   
;;;1357   	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
000018  1e57              SUBS     r7,r2,#1
00001a  eb070c87          ADD      r12,r7,r7,LSL #2
00001e  eb0c06c7          ADD      r6,r12,r7,LSL #3
;;;1358   	s = wc = 0;
000022  2700              MOVS     r7,#0
000024  4638              MOV      r0,r7
000026  463b              MOV      r3,r7
;;;1359   	do {
000028  bf00              NOP      
                  |L36.42|
;;;1360   		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
00002a  f64f77ff          MOV      r7,#0xffff
00002e  42b8              CMP      r0,r7
000030  d003              BEQ      |L36.58|
000032  4637              MOV      r7,r6
000034  1c76              ADDS     r6,r6,#1
000036  f8340017          LDRH     r0,[r4,r7,LSL #1]
                  |L36.58|
;;;1361   		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
00003a  f8dfc040          LDR      r12,|L36.124|
00003e  f81cc003          LDRB     r12,[r12,r3]
000042  f801000c          STRB     r0,[r1,r12]
000046  1207              ASRS     r7,r0,#8
000048  f8dfc030          LDR      r12,|L36.124|
00004c  f81cc003          LDRB     r12,[r12,r3]
000050  448c              ADD      r12,r12,r1
000052  f88c7001          STRB     r7,[r12,#1]
;;;1362   		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
000056  b908              CBNZ     r0,|L36.92|
000058  f64f70ff          MOV      r0,#0xffff
                  |L36.92|
;;;1363   	} while (++s < 13);
00005c  1c5f              ADDS     r7,r3,#1
00005e  463b              MOV      r3,r7
000060  2f0d              CMP      r7,#0xd
000062  d3e2              BCC      |L36.42|
;;;1364   	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
000064  f64f77ff          MOV      r7,#0xffff
000068  42b8              CMP      r0,r7
00006a  d002              BEQ      |L36.114|
00006c  f8347016          LDRH     r7,[r4,r6,LSL #1]
000070  b90f              CBNZ     r7,|L36.118|
                  |L36.114|
000072  f0420240          ORR      r2,r2,#0x40
                  |L36.118|
;;;1365   	dir[LDIR_Ord] = ord;			/* Set the LFN order */
000076  700a              STRB     r2,[r1,#0]
;;;1366   }
000078  bdf0              POP      {r4-r7,pc}
;;;1367   
                          ENDP

00007a  0000              DCW      0x0000
                  |L36.124|
                          DCD      LfnOfs

                          AREA ||i.follow_path||, CODE, READONLY, ALIGN=1

                  follow_path PROC
;;;1978   static
;;;1979   FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
000000  e92d41f3          PUSH     {r0,r1,r4-r8,lr}
;;;1980   	DIR *dj,			/* Directory object to return last directory and found object */
;;;1981   	const TCHAR *path	/* Full-path string to find a file or directory */
;;;1982   )
;;;1983   {
000004  4604              MOV      r4,r0
;;;1984   	FRESULT res;
;;;1985   	BYTE *dir, ns;
;;;1986   
;;;1987   
;;;1988   #if _FS_RPATH
;;;1989   	if (*path == '/' || *path == '\\') { /* There is a heading separator */
;;;1990   		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
;;;1991   	} else {							/* No heading separator */
;;;1992   		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
;;;1993   	}
;;;1994   #else
;;;1995   	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
000006  9801              LDR      r0,[sp,#4]
000008  7800              LDRB     r0,[r0,#0]
00000a  282f              CMP      r0,#0x2f
00000c  d003              BEQ      |L37.22|
00000e  9801              LDR      r0,[sp,#4]
000010  7800              LDRB     r0,[r0,#0]
000012  285c              CMP      r0,#0x5c
000014  d102              BNE      |L37.28|
                  |L37.22|
;;;1996   		path++;
000016  9801              LDR      r0,[sp,#4]
000018  1c40              ADDS     r0,r0,#1
00001a  9001              STR      r0,[sp,#4]
                  |L37.28|
;;;1997   	dj->sclust = 0;						/* Start from the root dir */
00001c  2000              MOVS     r0,#0
00001e  60a0              STR      r0,[r4,#8]
;;;1998   #endif
;;;1999   
;;;2000   	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
000020  9801              LDR      r0,[sp,#4]
000022  7800              LDRB     r0,[r0,#0]
000024  2820              CMP      r0,#0x20
000026  d207              BCS      |L37.56|
;;;2001   		res = dir_sdi(dj, 0);
000028  2100              MOVS     r1,#0
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       dir_sdi
000030  4605              MOV      r5,r0
;;;2002   		dj->dir = 0;
000032  2000              MOVS     r0,#0
000034  6160              STR      r0,[r4,#0x14]
000036  e029              B        |L37.140|
                  |L37.56|
;;;2003   	} else {							/* Follow path */
;;;2004   		for (;;) {
000038  bf00              NOP      
                  |L37.58|
;;;2005   			res = create_name(dj, &path);	/* Get a segment */
00003a  a901              ADD      r1,sp,#4
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       create_name
000042  4605              MOV      r5,r0
;;;2006   			if (res != FR_OK) break;
000044  b105              CBZ      r5,|L37.72|
000046  e020              B        |L37.138|
                  |L37.72|
;;;2007   			res = dir_find(dj);				/* Find it */
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       dir_find
00004e  4605              MOV      r5,r0
;;;2008   			ns = *(dj->fn+NS);
000050  69a0              LDR      r0,[r4,#0x18]
000052  7ac6              LDRB     r6,[r0,#0xb]
;;;2009   			if (res != FR_OK) {				/* Failed to find the object */
000054  b145              CBZ      r5,|L37.104|
;;;2010   				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
000056  2d04              CMP      r5,#4
000058  d000              BEQ      |L37.92|
00005a  e016              B        |L37.138|
                  |L37.92|
;;;2011   				/* Object not found */
;;;2012   				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
00005c  bf00              NOP      
;;;2013   					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
;;;2014   					res = FR_OK;
;;;2015   					if (!(ns & NS_LAST)) continue;
;;;2016   				} else {							/* Could not find the object */
;;;2017   					if (!(ns & NS_LAST)) res = FR_NO_PATH;
00005e  f0060004          AND      r0,r6,#4
000062  b900              CBNZ     r0,|L37.102|
000064  2505              MOVS     r5,#5
                  |L37.102|
;;;2018   				}
;;;2019   				break;
000066  e010              B        |L37.138|
                  |L37.104|
;;;2020   			}
;;;2021   			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
000068  f0060004          AND      r0,r6,#4
00006c  b100              CBZ      r0,|L37.112|
00006e  e00c              B        |L37.138|
                  |L37.112|
;;;2022   			dir = dj->dir;						/* There is next segment. Follow the sub directory */
000070  6967              LDR      r7,[r4,#0x14]
;;;2023   			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
000072  7af8              LDRB     r0,[r7,#0xb]
000074  f0000010          AND      r0,r0,#0x10
000078  b908              CBNZ     r0,|L37.126|
;;;2024   				res = FR_NO_PATH; break;
00007a  2505              MOVS     r5,#5
00007c  e005              B        |L37.138|
                  |L37.126|
;;;2025   			}
;;;2026   			dj->sclust = ld_clust(dj->fs, dir);
00007e  4639              MOV      r1,r7
000080  6820              LDR      r0,[r4,#0]
000082  f7fffffe          BL       ld_clust
000086  60a0              STR      r0,[r4,#8]
000088  e7d7              B        |L37.58|
                  |L37.138|
00008a  bf00              NOP                            ;2006
                  |L37.140|
;;;2027   		}
;;;2028   	}
;;;2029   
;;;2030   	return res;
00008c  4628              MOV      r0,r5
;;;2031   }
00008e  e8bd81fc          POP      {r2-r8,pc}
;;;2032   
                          ENDP


                          AREA ||i.gen_numname||, CODE, READONLY, ALIGN=1

                  gen_numname PROC
;;;1376   #if _USE_LFN
;;;1377   void gen_numname (
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;1378   	BYTE *dst,			/* Pointer to generated SFN */
;;;1379   	const BYTE *src,	/* Pointer to source SFN to be modified */
;;;1380   	const WCHAR *lfn,	/* Pointer to LFN */
;;;1381   	WORD seq			/* Sequence number */
;;;1382   )
;;;1383   {
000004  4607              MOV      r7,r0
000006  468a              MOV      r10,r1
000008  4690              MOV      r8,r2
00000a  461c              MOV      r4,r3
;;;1384   	BYTE ns[8], c;
;;;1385   	UINT i, j;
;;;1386   
;;;1387   
;;;1388   	mem_cpy(dst, src, 11);
00000c  220b              MOVS     r2,#0xb
00000e  4651              MOV      r1,r10
000010  4638              MOV      r0,r7
000012  f7fffffe          BL       mem_cpy
;;;1389   
;;;1390   	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
000016  2c05              CMP      r4,#5
000018  dd0b              BLE      |L38.50|
;;;1391   		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
00001a  bf00              NOP      
                  |L38.28|
00001c  1060              ASRS     r0,r4,#1
00001e  eb0031c4          ADD      r1,r0,r4,LSL #15
000022  f8382b02          LDRH     r2,[r8],#2
000026  1888              ADDS     r0,r1,r2
000028  b284              UXTH     r4,r0
00002a  f8b80000          LDRH     r0,[r8,#0]
00002e  2800              CMP      r0,#0
000030  d1f4              BNE      |L38.28|
                  |L38.50|
;;;1392   	}
;;;1393   
;;;1394   	/* itoa (hexdecimal) */
;;;1395   	i = 7;
000032  2607              MOVS     r6,#7
;;;1396   	do {
000034  bf00              NOP      
                  |L38.54|
;;;1397   		c = (seq % 16) + '0';
000036  4620              MOV      r0,r4
000038  17e1              ASRS     r1,r4,#31
00003a  eb047111          ADD      r1,r4,r1,LSR #28
00003e  1109              ASRS     r1,r1,#4
000040  eba41101          SUB      r1,r4,r1,LSL #4
000044  3130              ADDS     r1,r1,#0x30
000046  f00109ff          AND      r9,r1,#0xff
;;;1398   		if (c > '9') c += 7;
00004a  f1b90f39          CMP      r9,#0x39
00004e  dd03              BLE      |L38.88|
000050  f1090007          ADD      r0,r9,#7
000054  f00009ff          AND      r9,r0,#0xff
                  |L38.88|
;;;1399   		ns[i--] = c;
000058  4630              MOV      r0,r6
00005a  1e76              SUBS     r6,r6,#1
00005c  f80d9000          STRB     r9,[sp,r0]
;;;1400   		seq /= 16;
000060  4620              MOV      r0,r4
000062  17e1              ASRS     r1,r4,#31
000064  eb047111          ADD      r1,r4,r1,LSR #28
000068  f3c1140f          UBFX     r4,r1,#4,#16
;;;1401   	} while (seq);
00006c  2c00              CMP      r4,#0
00006e  d1e2              BNE      |L38.54|
;;;1402   	ns[i] = '~';
000070  207e              MOVS     r0,#0x7e
000072  f80d0006          STRB     r0,[sp,r6]
;;;1403   
;;;1404   	/* Append the number */
;;;1405   	for (j = 0; j < i && dst[j] != ' '; j++) {
000076  2500              MOVS     r5,#0
000078  e00b              B        |L38.146|
                  |L38.122|
;;;1406   		if (IsDBCS1(dst[j])) {
00007a  5d78              LDRB     r0,[r7,r5]
00007c  2881              CMP      r0,#0x81
00007e  db07              BLT      |L38.144|
000080  5d78              LDRB     r0,[r7,r5]
000082  28fe              CMP      r0,#0xfe
000084  dc04              BGT      |L38.144|
;;;1407   			if (j == i - 1) break;
000086  1e70              SUBS     r0,r6,#1
000088  42a8              CMP      r0,r5
00008a  d100              BNE      |L38.142|
00008c  e006              B        |L38.156|
                  |L38.142|
;;;1408   			j++;
00008e  1c6d              ADDS     r5,r5,#1
                  |L38.144|
000090  1c6d              ADDS     r5,r5,#1              ;1405
                  |L38.146|
000092  42b5              CMP      r5,r6                 ;1405
000094  d202              BCS      |L38.156|
000096  5d78              LDRB     r0,[r7,r5]            ;1405
000098  2820              CMP      r0,#0x20              ;1405
00009a  d1ee              BNE      |L38.122|
                  |L38.156|
00009c  bf00              NOP                            ;1407
;;;1409   		}
;;;1410   	}
;;;1411   	do {
00009e  bf00              NOP      
                  |L38.160|
;;;1412   		dst[j++] = (i < 8) ? ns[i++] : ' ';
0000a0  2e08              CMP      r6,#8
0000a2  d204              BCS      |L38.174|
0000a4  4630              MOV      r0,r6
0000a6  1c76              ADDS     r6,r6,#1
0000a8  f81d0000          LDRB     r0,[sp,r0]
0000ac  e000              B        |L38.176|
                  |L38.174|
0000ae  2020              MOVS     r0,#0x20
                  |L38.176|
0000b0  4629              MOV      r1,r5
0000b2  1c6d              ADDS     r5,r5,#1
0000b4  5478              STRB     r0,[r7,r1]
;;;1413   	} while (j < 8);
0000b6  2d08              CMP      r5,#8
0000b8  d3f2              BCC      |L38.160|
;;;1414   }
0000ba  e8bd87fc          POP      {r2-r10,pc}
;;;1415   #endif
                          ENDP


                          AREA ||i.get_fat||, CODE, READONLY, ALIGN=1

                  get_fat PROC
;;;841    
;;;842    DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;843    	FATFS *fs,	/* File system object */
;;;844    	DWORD clst	/* Cluster# to get the link information */
;;;845    )
;;;846    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;847    	UINT wc, bc;
;;;848    	BYTE *p;
;;;849    
;;;850    
;;;851    	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
000008  2c02              CMP      r4,#2
00000a  d302              BCC      |L39.18|
00000c  69a8              LDR      r0,[r5,#0x18]
00000e  42a0              CMP      r0,r4
000010  d802              BHI      |L39.24|
                  |L39.18|
;;;852    		return 1;
000012  2001              MOVS     r0,#1
                  |L39.20|
;;;853    
;;;854    	switch (fs->fs_type) {
;;;855    	case FS_FAT12 :
;;;856    		bc = (UINT)clst; bc += bc / 2;
;;;857    		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
;;;858    		wc = fs->win[bc % SS(fs)]; bc++;
;;;859    		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
;;;860    		wc |= fs->win[bc % SS(fs)] << 8;
;;;861    		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
;;;862    
;;;863    	case FS_FAT16 :
;;;864    		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
;;;865    		p = &fs->win[clst * 2 % SS(fs)];
;;;866    		return LD_WORD(p);
;;;867    
;;;868    	case FS_FAT32 :
;;;869    		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
;;;870    		p = &fs->win[clst * 4 % SS(fs)];
;;;871    		return LD_DWORD(p) & 0x0FFFFFFF;
;;;872    	}
;;;873    
;;;874    	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
;;;875    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L39.24|
000018  7828              LDRB     r0,[r5,#0]            ;854
00001a  2801              CMP      r0,#1                 ;854
00001c  d004              BEQ      |L39.40|
00001e  2802              CMP      r0,#2                 ;854
000020  d02c              BEQ      |L39.124|
000022  2803              CMP      r0,#3                 ;854
000024  d15a              BNE      |L39.220|
000026  e03d              B        |L39.164|
                  |L39.40|
000028  4627              MOV      r7,r4                 ;856
00002a  eb070757          ADD      r7,r7,r7,LSR #1       ;856
00002e  6a68              LDR      r0,[r5,#0x24]         ;857
000030  eb002157          ADD      r1,r0,r7,LSR #9       ;857
000034  4628              MOV      r0,r5                 ;857
000036  f7fffffe          BL       move_window
00003a  b100              CBZ      r0,|L39.62|
00003c  e04e              B        |L39.220|
                  |L39.62|
00003e  f3c70108          UBFX     r1,r7,#0,#9           ;858
000042  f1050034          ADD      r0,r5,#0x34           ;858
000046  f8108001          LDRB     r8,[r0,r1]            ;858
00004a  1c7f              ADDS     r7,r7,#1              ;858
00004c  6a68              LDR      r0,[r5,#0x24]         ;859
00004e  eb002157          ADD      r1,r0,r7,LSR #9       ;859
000052  4628              MOV      r0,r5                 ;859
000054  f7fffffe          BL       move_window
000058  b100              CBZ      r0,|L39.92|
00005a  e03f              B        |L39.220|
                  |L39.92|
00005c  f3c70108          UBFX     r1,r7,#0,#9           ;860
000060  f1050034          ADD      r0,r5,#0x34           ;860
000064  5c40              LDRB     r0,[r0,r1]            ;860
000066  ea482800          ORR      r8,r8,r0,LSL #8       ;860
00006a  f0040001          AND      r0,r4,#1              ;861
00006e  b110              CBZ      r0,|L39.118|
000070  ea4f1018          LSR      r0,r8,#4              ;861
000074  e7ce              B        |L39.20|
                  |L39.118|
000076  f3c8000b          UBFX     r0,r8,#0,#12          ;861
00007a  e7cb              B        |L39.20|
                  |L39.124|
00007c  6a68              LDR      r0,[r5,#0x24]         ;864
00007e  eb002114          ADD      r1,r0,r4,LSR #8       ;864
000082  4628              MOV      r0,r5                 ;864
000084  f7fffffe          BL       move_window
000088  b100              CBZ      r0,|L39.140|
00008a  e027              B        |L39.220|
                  |L39.140|
00008c  f24010ff          MOV      r0,#0x1ff             ;865
000090  ea000144          AND      r1,r0,r4,LSL #1       ;865
000094  f1050034          ADD      r0,r5,#0x34           ;865
000098  180e              ADDS     r6,r1,r0              ;865
00009a  7830              LDRB     r0,[r6,#0]            ;866
00009c  7871              LDRB     r1,[r6,#1]            ;866
00009e  ea402001          ORR      r0,r0,r1,LSL #8       ;866
0000a2  e7b7              B        |L39.20|
                  |L39.164|
0000a4  6a68              LDR      r0,[r5,#0x24]         ;869
0000a6  eb0011d4          ADD      r1,r0,r4,LSR #7       ;869
0000aa  4628              MOV      r0,r5                 ;869
0000ac  f7fffffe          BL       move_window
0000b0  b100              CBZ      r0,|L39.180|
0000b2  e013              B        |L39.220|
                  |L39.180|
0000b4  f24010ff          MOV      r0,#0x1ff             ;870
0000b8  ea000184          AND      r1,r0,r4,LSL #2       ;870
0000bc  f1050034          ADD      r0,r5,#0x34           ;870
0000c0  180e              ADDS     r6,r1,r0              ;870
0000c2  78f0              LDRB     r0,[r6,#3]            ;871
0000c4  0600              LSLS     r0,r0,#24             ;871
0000c6  78b1              LDRB     r1,[r6,#2]            ;871
0000c8  ea404001          ORR      r0,r0,r1,LSL #16      ;871
0000cc  7871              LDRB     r1,[r6,#1]            ;871
0000ce  ea402001          ORR      r0,r0,r1,LSL #8       ;871
0000d2  7831              LDRB     r1,[r6,#0]            ;871
0000d4  4308              ORRS     r0,r0,r1              ;871
0000d6  f0204070          BIC      r0,r0,#0xf0000000     ;871
0000da  e79b              B        |L39.20|
                  |L39.220|
0000dc  bf00              NOP                            ;857
0000de  f04f30ff          MOV      r0,#0xffffffff        ;874
0000e2  e797              B        |L39.20|
;;;876    
                          ENDP


                          AREA ||i.get_fileinfo||, CODE, READONLY, ALIGN=1

                  get_fileinfo PROC
;;;1896   static
;;;1897   void get_fileinfo (		/* No return code */
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;1898   	DIR *dj,			/* Pointer to the directory object */
;;;1899   	FILINFO *fno	 	/* Pointer to the file information to be filled */
;;;1900   )
;;;1901   {
000004  4681              MOV      r9,r0
000006  460f              MOV      r7,r1
;;;1902   	UINT i;
;;;1903   	BYTE nt, *dir;
;;;1904   	TCHAR *p, c;
;;;1905   
;;;1906   
;;;1907   	p = fno->fname;
000008  f1070809          ADD      r8,r7,#9
;;;1908   	if (dj->sect) {
00000c  f8d90010          LDR      r0,[r9,#0x10]
000010  2800              CMP      r0,#0
000012  d051              BEQ      |L40.184|
;;;1909   		dir = dj->dir;
000014  f8d94014          LDR      r4,[r9,#0x14]
;;;1910   		nt = dir[DIR_NTres];		/* NT flag */
000018  7b20              LDRB     r0,[r4,#0xc]
00001a  9001              STR      r0,[sp,#4]
;;;1911   		for (i = 0; i < 8; i++) {	/* Copy name body */
00001c  2500              MOVS     r5,#0
00001e  e014              B        |L40.74|
                  |L40.32|
;;;1912   			c = dir[i];
000020  5d66              LDRB     r6,[r4,r5]
;;;1913   			if (c == ' ') break;
000022  2e20              CMP      r6,#0x20
000024  d100              BNE      |L40.40|
000026  e012              B        |L40.78|
                  |L40.40|
;;;1914   			if (c == NDDE) c = (TCHAR)DDE;
000028  2e05              CMP      r6,#5
00002a  d100              BNE      |L40.46|
00002c  26e5              MOVS     r6,#0xe5
                  |L40.46|
;;;1915   			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
00002e  9801              LDR      r0,[sp,#4]
000030  f0000008          AND      r0,r0,#8
000034  b130              CBZ      r0,|L40.68|
000036  2e41              CMP      r6,#0x41
000038  db04              BLT      |L40.68|
00003a  2e5a              CMP      r6,#0x5a
00003c  dc02              BGT      |L40.68|
00003e  f1060020          ADD      r0,r6,#0x20
000042  b2c6              UXTB     r6,r0
                  |L40.68|
;;;1916   #if _LFN_UNICODE
;;;1917   			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
;;;1918   				c = (c << 8) | dir[++i];
;;;1919   			c = ff_convert(c, 1);
;;;1920   			if (!c) c = '?';
;;;1921   #endif
;;;1922   			*p++ = c;
000044  f8086b01          STRB     r6,[r8],#1
000048  1c6d              ADDS     r5,r5,#1              ;1911
                  |L40.74|
00004a  2d08              CMP      r5,#8                 ;1911
00004c  d3e8              BCC      |L40.32|
                  |L40.78|
00004e  bf00              NOP                            ;1913
;;;1923   		}
;;;1924   		if (dir[8] != ' ') {		/* Copy name extension */
000050  7a20              LDRB     r0,[r4,#8]
000052  2820              CMP      r0,#0x20
000054  d019              BEQ      |L40.138|
;;;1925   			*p++ = '.';
000056  202e              MOVS     r0,#0x2e
000058  f8080b01          STRB     r0,[r8],#1
;;;1926   			for (i = 8; i < 11; i++) {
00005c  2508              MOVS     r5,#8
00005e  e011              B        |L40.132|
                  |L40.96|
;;;1927   				c = dir[i];
000060  5d66              LDRB     r6,[r4,r5]
;;;1928   				if (c == ' ') break;
000062  2e20              CMP      r6,#0x20
000064  d100              BNE      |L40.104|
000066  e00f              B        |L40.136|
                  |L40.104|
;;;1929   				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
000068  9801              LDR      r0,[sp,#4]
00006a  f0000010          AND      r0,r0,#0x10
00006e  b130              CBZ      r0,|L40.126|
000070  2e41              CMP      r6,#0x41
000072  db04              BLT      |L40.126|
000074  2e5a              CMP      r6,#0x5a
000076  dc02              BGT      |L40.126|
000078  f1060020          ADD      r0,r6,#0x20
00007c  b2c6              UXTB     r6,r0
                  |L40.126|
;;;1930   #if _LFN_UNICODE
;;;1931   				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
;;;1932   					c = (c << 8) | dir[++i];
;;;1933   				c = ff_convert(c, 1);
;;;1934   				if (!c) c = '?';
;;;1935   #endif
;;;1936   				*p++ = c;
00007e  f8086b01          STRB     r6,[r8],#1
000082  1c6d              ADDS     r5,r5,#1              ;1926
                  |L40.132|
000084  2d0b              CMP      r5,#0xb               ;1926
000086  d3eb              BCC      |L40.96|
                  |L40.136|
000088  bf00              NOP                            ;1928
                  |L40.138|
;;;1937   			}
;;;1938   		}
;;;1939   		fno->fattrib = dir[DIR_Attr];				/* Attribute */
00008a  7ae0              LDRB     r0,[r4,#0xb]
00008c  7238              STRB     r0,[r7,#8]
;;;1940   		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
00008e  7fe0              LDRB     r0,[r4,#0x1f]
000090  0601              LSLS     r1,r0,#24
000092  7fa0              LDRB     r0,[r4,#0x1e]
000094  ea414100          ORR      r1,r1,r0,LSL #16
000098  7f60              LDRB     r0,[r4,#0x1d]
00009a  ea412000          ORR      r0,r1,r0,LSL #8
00009e  7f21              LDRB     r1,[r4,#0x1c]
0000a0  4308              ORRS     r0,r0,r1
0000a2  6038              STR      r0,[r7,#0]
;;;1941   		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
0000a4  7e21              LDRB     r1,[r4,#0x18]
0000a6  7e60              LDRB     r0,[r4,#0x19]
0000a8  ea412000          ORR      r0,r1,r0,LSL #8
0000ac  80b8              STRH     r0,[r7,#4]
;;;1942   		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
0000ae  7da1              LDRB     r1,[r4,#0x16]
0000b0  7de0              LDRB     r0,[r4,#0x17]
0000b2  ea412000          ORR      r0,r1,r0,LSL #8
0000b6  80f8              STRH     r0,[r7,#6]
                  |L40.184|
;;;1943   	}
;;;1944   	*p = 0;		/* Terminate SFN str by a \0 */
0000b8  2000              MOVS     r0,#0
0000ba  f8880000          STRB     r0,[r8,#0]
;;;1945   
;;;1946   #if _USE_LFN
;;;1947   	if (fno->lfname && fno->lfsize) {
0000be  69b8              LDR      r0,[r7,#0x18]
0000c0  b3d0              CBZ      r0,|L40.312|
0000c2  69f8              LDR      r0,[r7,#0x1c]
0000c4  b3c0              CBZ      r0,|L40.312|
;;;1948   		TCHAR *tp = fno->lfname;
0000c6  f8d7b018          LDR      r11,[r7,#0x18]
;;;1949   		WCHAR w, *lfn;
;;;1950   
;;;1951   		i = 0;
0000ca  2500              MOVS     r5,#0
;;;1952   		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
0000cc  f8d90010          LDR      r0,[r9,#0x10]
0000d0  b370              CBZ      r0,|L40.304|
0000d2  f8b90020          LDRH     r0,[r9,#0x20]
0000d6  f64f71ff          MOV      r1,#0xffff
0000da  4288              CMP      r0,r1
0000dc  d028              BEQ      |L40.304|
;;;1953   			lfn = dj->lfn;
0000de  f8d9001c          LDR      r0,[r9,#0x1c]
0000e2  9000              STR      r0,[sp,#0]
;;;1954   			while ((w = *lfn++) != 0) {			/* Get an LFN char */
0000e4  e01c              B        |L40.288|
                  |L40.230|
;;;1955   #if !_LFN_UNICODE
;;;1956   				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
0000e6  2100              MOVS     r1,#0
0000e8  4650              MOV      r0,r10
0000ea  f7fffffe          BL       ff_convert
0000ee  4682              MOV      r10,r0
;;;1957   				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
0000f0  f1ba0f00          CMP      r10,#0
0000f4  d101              BNE      |L40.250|
0000f6  2500              MOVS     r5,#0
0000f8  e019              B        |L40.302|
                  |L40.250|
;;;1958   				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
0000fa  f1ba0fff          CMP      r10,#0xff
0000fe  dd05              BLE      |L40.268|
;;;1959   					tp[i++] = (TCHAR)(w >> 8);
000100  ea4f222a          ASR      r2,r10,#8
000104  4628              MOV      r0,r5
000106  1c6d              ADDS     r5,r5,#1
000108  f80b2000          STRB     r2,[r11,r0]
                  |L40.268|
;;;1960   #endif
;;;1961   				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
00010c  69f8              LDR      r0,[r7,#0x1c]
00010e  1e40              SUBS     r0,r0,#1
000110  42a8              CMP      r0,r5
000112  d801              BHI      |L40.280|
000114  2500              MOVS     r5,#0
000116  e00a              B        |L40.302|
                  |L40.280|
;;;1962   				tp[i++] = (TCHAR)w;
000118  4628              MOV      r0,r5
00011a  1c6d              ADDS     r5,r5,#1
00011c  f80ba000          STRB     r10,[r11,r0]
                  |L40.288|
000120  9800              LDR      r0,[sp,#0]            ;1954
000122  f8301b02          LDRH     r1,[r0],#2            ;1954
000126  ea5f0a01          MOVS     r10,r1                ;1954
00012a  9000              STR      r0,[sp,#0]            ;1954
00012c  d1db              BNE      |L40.230|
                  |L40.302|
00012e  bf00              NOP                            ;1957
                  |L40.304|
;;;1963   			}
;;;1964   		}
;;;1965   		tp[i] = 0;	/* Terminate the LFN str by a \0 */
000130  2000              MOVS     r0,#0
000132  f80b0005          STRB     r0,[r11,r5]
;;;1966   	}
000136  bf00              NOP      
                  |L40.312|
;;;1967   #endif
;;;1968   }
000138  e8bd9ffc          POP      {r2-r12,pc}
;;;1969   #endif /* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2*/
                          ENDP


                          AREA ||i.inc_lock||, CODE, READONLY, ALIGN=2

                  inc_lock PROC
;;;655    static
;;;656    UINT inc_lock (	/* Increment file open counter and returns its index (0:int error) */
000000  b530              PUSH     {r4,r5,lr}
;;;657    	DIR* dj,	/* Directory object pointing the file to register or increment */
;;;658    	int acc		/* Desired access mode (0:Read, !0:Write) */
;;;659    )
;;;660    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;661    	UINT i;
;;;662    
;;;663    
;;;664    	for (i = 0; i < _FS_LOCK; i++) {	/* Find the file */
000006  2100              MOVS     r1,#0
000008  e01b              B        |L41.66|
                  |L41.10|
;;;665    		if (Files[i].fs == dj->fs &&
00000a  eb010041          ADD      r0,r1,r1,LSL #1
00000e  4c32              LDR      r4,|L41.216|
000010  f8540020          LDR      r0,[r4,r0,LSL #2]
000014  6814              LDR      r4,[r2,#0]
000016  42a0              CMP      r0,r4
000018  d112              BNE      |L41.64|
;;;666    			Files[i].clu == dj->sclust &&
00001a  eb010041          ADD      r0,r1,r1,LSL #1
00001e  4c2e              LDR      r4,|L41.216|
000020  eb040080          ADD      r0,r4,r0,LSL #2
000024  6840              LDR      r0,[r0,#4]
000026  6894              LDR      r4,[r2,#8]
000028  42a0              CMP      r0,r4
00002a  d109              BNE      |L41.64|
;;;667    			Files[i].idx == dj->index) break;
00002c  eb010041          ADD      r0,r1,r1,LSL #1
000030  4c29              LDR      r4,|L41.216|
000032  eb040080          ADD      r0,r4,r0,LSL #2
000036  8900              LDRH     r0,[r0,#8]
000038  88d4              LDRH     r4,[r2,#6]
00003a  42a0              CMP      r0,r4
00003c  d100              BNE      |L41.64|
00003e  e002              B        |L41.70|
                  |L41.64|
000040  1c49              ADDS     r1,r1,#1              ;664
                  |L41.66|
000042  2903              CMP      r1,#3                 ;664
000044  d3e1              BCC      |L41.10|
                  |L41.70|
000046  bf00              NOP      
;;;668    	}
;;;669    
;;;670    	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
000048  2903              CMP      r1,#3
00004a  d127              BNE      |L41.156|
;;;671    		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
00004c  2100              MOVS     r1,#0
00004e  e000              B        |L41.82|
                  |L41.80|
000050  1c49              ADDS     r1,r1,#1
                  |L41.82|
000052  2903              CMP      r1,#3
000054  d206              BCS      |L41.100|
000056  eb010041          ADD      r0,r1,r1,LSL #1
00005a  4c1f              LDR      r4,|L41.216|
00005c  f8540020          LDR      r0,[r4,r0,LSL #2]
000060  2800              CMP      r0,#0
000062  d1f5              BNE      |L41.80|
                  |L41.100|
;;;672    		if (i == _FS_LOCK) return 0;	/* No space to register (int err) */
000064  2903              CMP      r1,#3
000066  d101              BNE      |L41.108|
000068  2000              MOVS     r0,#0
                  |L41.106|
;;;673    		Files[i].fs = dj->fs;
;;;674    		Files[i].clu = dj->sclust;
;;;675    		Files[i].idx = dj->index;
;;;676    		Files[i].ctr = 0;
;;;677    	}
;;;678    
;;;679    	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
;;;680    
;;;681    	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
;;;682    
;;;683    	return i + 1;
;;;684    }
00006a  bd30              POP      {r4,r5,pc}
                  |L41.108|
00006c  eb010441          ADD      r4,r1,r1,LSL #1       ;673
000070  4d19              LDR      r5,|L41.216|
000072  6810              LDR      r0,[r2,#0]            ;673
000074  f8450024          STR      r0,[r5,r4,LSL #2]     ;673
000078  eb010441          ADD      r4,r1,r1,LSL #1       ;674
00007c  eb050484          ADD      r4,r5,r4,LSL #2       ;674
000080  6890              LDR      r0,[r2,#8]            ;674
000082  6060              STR      r0,[r4,#4]            ;674
000084  88d0              LDRH     r0,[r2,#6]            ;675
000086  eb010441          ADD      r4,r1,r1,LSL #1       ;675
00008a  eb050484          ADD      r4,r5,r4,LSL #2       ;675
00008e  8120              STRH     r0,[r4,#8]            ;675
000090  2000              MOVS     r0,#0                 ;676
000092  eb010441          ADD      r4,r1,r1,LSL #1       ;676
000096  eb050484          ADD      r4,r5,r4,LSL #2       ;676
00009a  8160              STRH     r0,[r4,#0xa]          ;676
                  |L41.156|
00009c  b143              CBZ      r3,|L41.176|
00009e  eb010041          ADD      r0,r1,r1,LSL #1       ;679
0000a2  4c0d              LDR      r4,|L41.216|
0000a4  eb040080          ADD      r0,r4,r0,LSL #2       ;679
0000a8  8940              LDRH     r0,[r0,#0xa]          ;679
0000aa  b108              CBZ      r0,|L41.176|
0000ac  2000              MOVS     r0,#0                 ;679
0000ae  e7dc              B        |L41.106|
                  |L41.176|
0000b0  b113              CBZ      r3,|L41.184|
0000b2  f44f7080          MOV      r0,#0x100             ;681
0000b6  e006              B        |L41.198|
                  |L41.184|
0000b8  eb010041          ADD      r0,r1,r1,LSL #1       ;681
0000bc  4c06              LDR      r4,|L41.216|
0000be  eb040080          ADD      r0,r4,r0,LSL #2       ;681
0000c2  8940              LDRH     r0,[r0,#0xa]          ;681
0000c4  1c40              ADDS     r0,r0,#1              ;681
                  |L41.198|
0000c6  eb010441          ADD      r4,r1,r1,LSL #1       ;681
0000ca  4d03              LDR      r5,|L41.216|
0000cc  eb050484          ADD      r4,r5,r4,LSL #2       ;681
0000d0  8160              STRH     r0,[r4,#0xa]          ;681
0000d2  1c48              ADDS     r0,r1,#1              ;683
0000d4  e7c9              B        |L41.106|
;;;685    
                          ENDP

0000d6  0000              DCW      0x0000
                  |L41.216|
                          DCD      Files

                          AREA ||i.ld_clust||, CODE, READONLY, ALIGN=1

                  ld_clust PROC
;;;1238   static
;;;1239   DWORD ld_clust (
000000  b510              PUSH     {r4,lr}
;;;1240   	FATFS *fs,	/* Pointer to the fs object */
;;;1241   	BYTE *dir	/* Pointer to the directory entry */
;;;1242   )
;;;1243   {
000002  4602              MOV      r2,r0
;;;1244   	DWORD cl;
;;;1245   
;;;1246   	cl = LD_WORD(dir+DIR_FstClusLO);
000004  7e8c              LDRB     r4,[r1,#0x1a]
000006  7ecb              LDRB     r3,[r1,#0x1b]
000008  ea442003          ORR      r0,r4,r3,LSL #8
;;;1247   	if (fs->fs_type == FS_FAT32)
00000c  7813              LDRB     r3,[r2,#0]
00000e  2b03              CMP      r3,#3
000010  d105              BNE      |L42.30|
;;;1248   		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
000012  7d0c              LDRB     r4,[r1,#0x14]
000014  7d4b              LDRB     r3,[r1,#0x15]
000016  ea442303          ORR      r3,r4,r3,LSL #8
00001a  ea404003          ORR      r0,r0,r3,LSL #16
                  |L42.30|
;;;1249   
;;;1250   	return cl;
;;;1251   }
00001e  bd10              POP      {r4,pc}
;;;1252   
                          ENDP


                          AREA ||i.mem_cmp||, CODE, READONLY, ALIGN=1

                  mem_cmp PROC
;;;564    static
;;;565    int mem_cmp (const void* dst, const void* src, UINT cnt) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  4603              MOV      r3,r0
;;;566    	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
000004  461c              MOV      r4,r3
000006  460d              MOV      r5,r1
;;;567    	int r = 0;
000008  2000              MOVS     r0,#0
;;;568    
;;;569    	while (cnt-- && (r = *d++ - *s++) == 0) ;
00000a  bf00              NOP      
                  |L43.12|
00000c  0016              MOVS     r6,r2
00000e  f1a20201          SUB      r2,r2,#1
000012  d007              BEQ      |L43.36|
000014  f8147b01          LDRB     r7,[r4],#1
000018  f815cb01          LDRB     r12,[r5],#1
00001c  eba7060c          SUB      r6,r7,r12
000020  0030              MOVS     r0,r6
000022  d0f3              BEQ      |L43.12|
                  |L43.36|
;;;570    	return r;
;;;571    }
000024  bdf0              POP      {r4-r7,pc}
;;;572    
                          ENDP


                          AREA ||i.mem_cpy||, CODE, READONLY, ALIGN=1

                  mem_cpy PROC
;;;538    static
;;;539    void mem_cpy (void* dst, const void* src, UINT cnt) {
000000  b570              PUSH     {r4-r6,lr}
;;;540    	BYTE *d = (BYTE*)dst;
000002  4603              MOV      r3,r0
;;;541    	const BYTE *s = (const BYTE*)src;
000004  460c              MOV      r4,r1
;;;542    
;;;543    #if _WORD_ACCESS == 1
;;;544    	while (cnt >= sizeof (int)) {
;;;545    		*(int*)d = *(int*)s;
;;;546    		d += sizeof (int); s += sizeof (int);
;;;547    		cnt -= sizeof (int);
;;;548    	}
;;;549    #endif
;;;550    	while (cnt--)
000006  e003              B        |L44.16|
                  |L44.8|
;;;551    		*d++ = *s++;
000008  f8145b01          LDRB     r5,[r4],#1
00000c  f8035b01          STRB     r5,[r3],#1
                  |L44.16|
000010  0015              MOVS     r5,r2                 ;550
000012  f1a20201          SUB      r2,r2,#1              ;550
000016  d1f7              BNE      |L44.8|
;;;552    }
000018  bd70              POP      {r4-r6,pc}
;;;553    
                          ENDP


                          AREA ||i.mem_set||, CODE, READONLY, ALIGN=1

                  mem_set PROC
;;;555    static
;;;556    void mem_set (void* dst, int val, UINT cnt) {
000000  b530              PUSH     {r4,r5,lr}
;;;557    	BYTE *d = (BYTE*)dst;
000002  4603              MOV      r3,r0
;;;558    
;;;559    	while (cnt--)
000004  e001              B        |L45.10|
                  |L45.6|
;;;560    		*d++ = (BYTE)val;
000006  f8031b01          STRB     r1,[r3],#1
                  |L45.10|
00000a  0014              MOVS     r4,r2                 ;559
00000c  f1a20201          SUB      r2,r2,#1              ;559
000010  d1f9              BNE      |L45.6|
;;;561    }
000012  bd30              POP      {r4,r5,pc}
;;;562    
                          ENDP


                          AREA ||i.move_window||, CODE, READONLY, ALIGN=1

                  move_window PROC
;;;757    static
;;;758    FRESULT move_window (
000000  b570              PUSH     {r4-r6,lr}
;;;759    	FATFS *fs,		/* File system object */
;;;760    	DWORD sector	/* Sector number to make appearance in the fs->win[] */
;;;761    )
;;;762    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;763    	if (sector != fs->winsect) {	/* Changed current window */
000006  6b20              LDR      r0,[r4,#0x30]
000008  42a8              CMP      r0,r5
00000a  d010              BEQ      |L46.46|
;;;764    #if !_FS_READONLY
;;;765    		if (sync_window(fs) != FR_OK)
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       sync_window
000012  b108              CBZ      r0,|L46.24|
;;;766    			return FR_DISK_ERR;
000014  2001              MOVS     r0,#1
                  |L46.22|
;;;767    #endif
;;;768    		if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
;;;769    			return FR_DISK_ERR;
;;;770    		fs->winsect = sector;
;;;771    	}
;;;772    
;;;773    	return FR_OK;
;;;774    }
000016  bd70              POP      {r4-r6,pc}
                  |L46.24|
000018  7860              LDRB     r0,[r4,#1]            ;768
00001a  2301              MOVS     r3,#1                 ;768
00001c  462a              MOV      r2,r5                 ;768
00001e  f1040134          ADD      r1,r4,#0x34           ;768
000022  f7fffffe          BL       disk_read
000026  b108              CBZ      r0,|L46.44|
000028  2001              MOVS     r0,#1                 ;769
00002a  e7f4              B        |L46.22|
                  |L46.44|
00002c  6325              STR      r5,[r4,#0x30]         ;770
                  |L46.46|
00002e  2000              MOVS     r0,#0                 ;773
000030  e7f1              B        |L46.22|
;;;775    
                          ENDP


                          AREA ||i.pick_lfn||, CODE, READONLY, ALIGN=2

                  pick_lfn PROC
;;;1307   static
;;;1308   int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
000000  b5f0              PUSH     {r4-r7,lr}
;;;1309   	WCHAR *lfnbuf,		/* Pointer to the Unicode-LFN buffer */
;;;1310   	BYTE *dir			/* Pointer to the directory entry */
;;;1311   )
;;;1312   {
000002  4603              MOV      r3,r0
;;;1313   	UINT i, s;
;;;1314   	WCHAR wc, uc;
;;;1315   
;;;1316   
;;;1317   	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
000004  7808              LDRB     r0,[r1,#0]
000006  f000003f          AND      r0,r0,#0x3f
00000a  1e40              SUBS     r0,r0,#1
00000c  eb000780          ADD      r7,r0,r0,LSL #2
000010  eb0702c0          ADD      r2,r7,r0,LSL #3
;;;1318   
;;;1319   	s = 0; wc = 1;
000014  2500              MOVS     r5,#0
000016  2601              MOVS     r6,#1
;;;1320   	do {
000018  bf00              NOP      
                  |L47.26|
;;;1321   		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
00001a  4815              LDR      r0,|L47.112|
00001c  5d40              LDRB     r0,[r0,r5]
00001e  5c08              LDRB     r0,[r1,r0]
000020  4f13              LDR      r7,|L47.112|
000022  5d7f              LDRB     r7,[r7,r5]
000024  440f              ADD      r7,r7,r1
000026  787f              LDRB     r7,[r7,#1]
000028  ea402407          ORR      r4,r0,r7,LSL #8
;;;1322   		if (wc) {	/* Last char has not been processed */
00002c  b14e              CBZ      r6,|L47.66|
;;;1323   			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
00002e  2aff              CMP      r2,#0xff
000030  d301              BCC      |L47.54|
000032  2000              MOVS     r0,#0
                  |L47.52|
;;;1324   			lfnbuf[i++] = wc = uc;			/* Store it */
;;;1325   		} else {
;;;1326   			if (uc != 0xFFFF) return 0;		/* Check filler */
;;;1327   		}
;;;1328   	} while (++s < 13);						/* Read all character in the entry */
;;;1329   
;;;1330   	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
;;;1331   		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
;;;1332   		lfnbuf[i] = 0;
;;;1333   	}
;;;1334   
;;;1335   	return 1;
;;;1336   }
000034  bdf0              POP      {r4-r7,pc}
                  |L47.54|
000036  4626              MOV      r6,r4                 ;1324
000038  4610              MOV      r0,r2                 ;1324
00003a  1c52              ADDS     r2,r2,#1              ;1324
00003c  f8234010          STRH     r4,[r3,r0,LSL #1]     ;1324
000040  e005              B        |L47.78|
                  |L47.66|
000042  f64f70ff          MOV      r0,#0xffff            ;1326
000046  4284              CMP      r4,r0                 ;1326
000048  d001              BEQ      |L47.78|
00004a  2000              MOVS     r0,#0                 ;1326
00004c  e7f2              B        |L47.52|
                  |L47.78|
00004e  1c68              ADDS     r0,r5,#1              ;1328
000050  4605              MOV      r5,r0                 ;1328
000052  280d              CMP      r0,#0xd               ;1328
000054  d3e1              BCC      |L47.26|
000056  7808              LDRB     r0,[r1,#0]            ;1330
000058  f0000040          AND      r0,r0,#0x40           ;1330
00005c  b130              CBZ      r0,|L47.108|
00005e  2aff              CMP      r2,#0xff              ;1331
000060  d301              BCC      |L47.102|
000062  2000              MOVS     r0,#0                 ;1331
000064  e7e6              B        |L47.52|
                  |L47.102|
000066  2000              MOVS     r0,#0                 ;1332
000068  f8230012          STRH     r0,[r3,r2,LSL #1]     ;1332
                  |L47.108|
00006c  2001              MOVS     r0,#1                 ;1335
00006e  e7e1              B        |L47.52|
;;;1337   
                          ENDP

                  |L47.112|
                          DCD      LfnOfs

                          AREA ||i.put_fat||, CODE, READONLY, ALIGN=1

                  put_fat PROC
;;;884    
;;;885    FRESULT put_fat (
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;886    	FATFS *fs,	/* File system object */
;;;887    	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
;;;888    	DWORD val	/* New value to mark the cluster */
;;;889    )
;;;890    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;891    	UINT bc;
;;;892    	BYTE *p;
;;;893    	FRESULT res;
;;;894    
;;;895    
;;;896    	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
00000a  2e02              CMP      r6,#2
00000c  d302              BCC      |L48.20|
00000e  69a8              LDR      r0,[r5,#0x18]
000010  42b0              CMP      r0,r6
000012  d802              BHI      |L48.26|
                  |L48.20|
;;;897    		res = FR_INT_ERR;
000014  f04f0802          MOV      r8,#2
000018  e08a              B        |L48.304|
                  |L48.26|
;;;898    
;;;899    	} else {
;;;900    		switch (fs->fs_type) {
00001a  7828              LDRB     r0,[r5,#0]
00001c  2801              CMP      r0,#1
00001e  d004              BEQ      |L48.42|
000020  2802              CMP      r0,#2
000022  d041              BEQ      |L48.168|
000024  2803              CMP      r0,#3
000026  d17d              BNE      |L48.292|
000028  e054              B        |L48.212|
                  |L48.42|
;;;901    		case FS_FAT12 :
;;;902    			bc = (UINT)clst; bc += bc / 2;
00002a  46b1              MOV      r9,r6
00002c  eb090959          ADD      r9,r9,r9,LSR #1
;;;903    			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
000030  6a68              LDR      r0,[r5,#0x24]
000032  eb002159          ADD      r1,r0,r9,LSR #9
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       move_window
00003c  4680              MOV      r8,r0
;;;904    			if (res != FR_OK) break;
00003e  f1b80f00          CMP      r8,#0
000042  d000              BEQ      |L48.70|
000044  e071              B        |L48.298|
                  |L48.70|
;;;905    			p = &fs->win[bc % SS(fs)];
000046  f3c90108          UBFX     r1,r9,#0,#9
00004a  f1050034          ADD      r0,r5,#0x34
00004e  180c              ADDS     r4,r1,r0
;;;906    			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
000050  f0060001          AND      r0,r6,#1
000054  b120              CBZ      r0,|L48.96|
000056  b2f9              UXTB     r1,r7
000058  7820              LDRB     r0,[r4,#0]
00005a  f361101f          BFI      r0,r1,#4,#28
00005e  e000              B        |L48.98|
                  |L48.96|
000060  4638              MOV      r0,r7
                  |L48.98|
000062  7020              STRB     r0,[r4,#0]
;;;907    			bc++;
000064  f1090901          ADD      r9,r9,#1
;;;908    			fs->wflag = 1;
000068  2001              MOVS     r0,#1
00006a  7128              STRB     r0,[r5,#4]
;;;909    			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
00006c  6a68              LDR      r0,[r5,#0x24]
00006e  eb002159          ADD      r1,r0,r9,LSR #9
000072  4628              MOV      r0,r5
000074  f7fffffe          BL       move_window
000078  4680              MOV      r8,r0
;;;910    			if (res != FR_OK) break;
00007a  f1b80f00          CMP      r8,#0
00007e  d000              BEQ      |L48.130|
000080  e053              B        |L48.298|
                  |L48.130|
;;;911    			p = &fs->win[bc % SS(fs)];
000082  f3c90108          UBFX     r1,r9,#0,#9
000086  f1050034          ADD      r0,r5,#0x34
00008a  180c              ADDS     r4,r1,r0
;;;912    			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
00008c  f0060001          AND      r0,r6,#1
000090  b110              CBZ      r0,|L48.152|
000092  f3c71007          UBFX     r0,r7,#4,#8
000096  e005              B        |L48.164|
                  |L48.152|
000098  7820              LDRB     r0,[r4,#0]
00009a  f00000f0          AND      r0,r0,#0xf0
00009e  f3c72103          UBFX     r1,r7,#8,#4
0000a2  4308              ORRS     r0,r0,r1
                  |L48.164|
0000a4  7020              STRB     r0,[r4,#0]
;;;913    			break;
0000a6  e040              B        |L48.298|
                  |L48.168|
;;;914    
;;;915    		case FS_FAT16 :
;;;916    			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
0000a8  6a68              LDR      r0,[r5,#0x24]
0000aa  eb002116          ADD      r1,r0,r6,LSR #8
0000ae  4628              MOV      r0,r5
0000b0  f7fffffe          BL       move_window
0000b4  4680              MOV      r8,r0
;;;917    			if (res != FR_OK) break;
0000b6  f1b80f00          CMP      r8,#0
0000ba  d000              BEQ      |L48.190|
0000bc  e035              B        |L48.298|
                  |L48.190|
;;;918    			p = &fs->win[clst * 2 % SS(fs)];
0000be  f24010ff          MOV      r0,#0x1ff
0000c2  ea000146          AND      r1,r0,r6,LSL #1
0000c6  f1050034          ADD      r0,r5,#0x34
0000ca  180c              ADDS     r4,r1,r0
;;;919    			ST_WORD(p, (WORD)val);
0000cc  7027              STRB     r7,[r4,#0]
0000ce  0a38              LSRS     r0,r7,#8
0000d0  7060              STRB     r0,[r4,#1]
;;;920    			break;
0000d2  e02a              B        |L48.298|
                  |L48.212|
;;;921    
;;;922    		case FS_FAT32 :
;;;923    			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
0000d4  6a68              LDR      r0,[r5,#0x24]
0000d6  eb0011d6          ADD      r1,r0,r6,LSR #7
0000da  4628              MOV      r0,r5
0000dc  f7fffffe          BL       move_window
0000e0  4680              MOV      r8,r0
;;;924    			if (res != FR_OK) break;
0000e2  f1b80f00          CMP      r8,#0
0000e6  d000              BEQ      |L48.234|
0000e8  e01f              B        |L48.298|
                  |L48.234|
;;;925    			p = &fs->win[clst * 4 % SS(fs)];
0000ea  f24010ff          MOV      r0,#0x1ff
0000ee  ea000186          AND      r1,r0,r6,LSL #2
0000f2  f1050034          ADD      r0,r5,#0x34
0000f6  180c              ADDS     r4,r1,r0
;;;926    			val |= LD_DWORD(p) & 0xF0000000;
0000f8  78e0              LDRB     r0,[r4,#3]
0000fa  0600              LSLS     r0,r0,#24
0000fc  78a1              LDRB     r1,[r4,#2]
0000fe  ea404001          ORR      r0,r0,r1,LSL #16
000102  7861              LDRB     r1,[r4,#1]
000104  ea402001          ORR      r0,r0,r1,LSL #8
000108  7821              LDRB     r1,[r4,#0]
00010a  4308              ORRS     r0,r0,r1
00010c  f0004070          AND      r0,r0,#0xf0000000
000110  4307              ORRS     r7,r7,r0
;;;927    			ST_DWORD(p, val);
000112  7027              STRB     r7,[r4,#0]
000114  0a38              LSRS     r0,r7,#8
000116  7060              STRB     r0,[r4,#1]
000118  0c38              LSRS     r0,r7,#16
00011a  70a0              STRB     r0,[r4,#2]
00011c  0e38              LSRS     r0,r7,#24
00011e  70e0              STRB     r0,[r4,#3]
;;;928    			break;
000120  e003              B        |L48.298|
000122  e7ff              B        |L48.292|
                  |L48.292|
;;;929    
;;;930    		default :
;;;931    			res = FR_INT_ERR;
000124  f04f0802          MOV      r8,#2
000128  bf00              NOP                            ;900
                  |L48.298|
00012a  bf00              NOP                            ;904
;;;932    		}
;;;933    		fs->wflag = 1;
00012c  2001              MOVS     r0,#1
00012e  7128              STRB     r0,[r5,#4]
                  |L48.304|
;;;934    	}
;;;935    
;;;936    	return res;
000130  4640              MOV      r0,r8
;;;937    }
000132  e8bd87f0          POP      {r4-r10,pc}
;;;938    #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.remove_chain||, CODE, READONLY, ALIGN=1

                  remove_chain PROC
;;;947    static
;;;948    FRESULT remove_chain (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;949    	FATFS *fs,			/* File system object */
;;;950    	DWORD clst			/* Cluster# to remove a chain from */
;;;951    )
;;;952    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;953    	FRESULT res;
;;;954    	DWORD nxt;
;;;955    #if _USE_ERASE
;;;956    	DWORD scl = clst, ecl = clst, rt[2];
;;;957    #endif
;;;958    
;;;959    	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
000008  2e02              CMP      r6,#2
00000a  d302              BCC      |L49.18|
00000c  69a0              LDR      r0,[r4,#0x18]
00000e  42b0              CMP      r0,r6
000010  d801              BHI      |L49.22|
                  |L49.18|
;;;960    		res = FR_INT_ERR;
000012  2702              MOVS     r7,#2
000014  e025              B        |L49.98|
                  |L49.22|
;;;961    
;;;962    	} else {
;;;963    		res = FR_OK;
000016  2700              MOVS     r7,#0
;;;964    		while (clst < fs->n_fatent) {			/* Not a last link? */
000018  e01f              B        |L49.90|
                  |L49.26|
;;;965    			nxt = get_fat(fs, clst);			/* Get cluster status */
00001a  4631              MOV      r1,r6
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       get_fat
000022  4605              MOV      r5,r0
;;;966    			if (nxt == 0) break;				/* Empty cluster? */
000024  b905              CBNZ     r5,|L49.40|
000026  e01b              B        |L49.96|
                  |L49.40|
;;;967    			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
000028  2d01              CMP      r5,#1
00002a  d101              BNE      |L49.48|
00002c  2702              MOVS     r7,#2
00002e  e017              B        |L49.96|
                  |L49.48|
;;;968    			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
000030  1c68              ADDS     r0,r5,#1
000032  b908              CBNZ     r0,|L49.56|
000034  2701              MOVS     r7,#1
000036  e013              B        |L49.96|
                  |L49.56|
;;;969    			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
000038  2200              MOVS     r2,#0
00003a  4631              MOV      r1,r6
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       put_fat
000042  4607              MOV      r7,r0
;;;970    			if (res != FR_OK) break;
000044  b107              CBZ      r7,|L49.72|
000046  e00b              B        |L49.96|
                  |L49.72|
;;;971    			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
000048  6920              LDR      r0,[r4,#0x10]
00004a  1c40              ADDS     r0,r0,#1
00004c  b120              CBZ      r0,|L49.88|
;;;972    				fs->free_clust++;
00004e  6920              LDR      r0,[r4,#0x10]
000050  1c40              ADDS     r0,r0,#1
000052  6120              STR      r0,[r4,#0x10]
;;;973    				fs->fsi_flag = 1;
000054  2001              MOVS     r0,#1
000056  7160              STRB     r0,[r4,#5]
                  |L49.88|
;;;974    			}
;;;975    #if _USE_ERASE
;;;976    			if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
;;;977    				ecl = nxt;
;;;978    			} else {				/* End of contiguous clusters */ 
;;;979    				rt[0] = clust2sect(fs, scl);					/* Start sector */
;;;980    				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
;;;981    				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, rt);		/* Erase the block */
;;;982    				scl = ecl = nxt;
;;;983    			}
;;;984    #endif
;;;985    			clst = nxt;	/* Next cluster */
000058  462e              MOV      r6,r5
                  |L49.90|
00005a  69a0              LDR      r0,[r4,#0x18]         ;964
00005c  42b0              CMP      r0,r6                 ;964
00005e  d8dc              BHI      |L49.26|
                  |L49.96|
000060  bf00              NOP                            ;966
                  |L49.98|
;;;986    		}
;;;987    	}
;;;988    
;;;989    	return res;
000062  4638              MOV      r0,r7
;;;990    }
000064  e8bd81f0          POP      {r4-r8,pc}
;;;991    #endif
                          ENDP


                          AREA ||i.st_clust||, CODE, READONLY, ALIGN=1

                  st_clust PROC
;;;1255   static
;;;1256   void st_clust (
000000  7681              STRB     r1,[r0,#0x1a]
;;;1257   	BYTE *dir,	/* Pointer to the directory entry */
;;;1258   	DWORD cl	/* Value to be set */
;;;1259   )
;;;1260   {
;;;1261   	ST_WORD(dir+DIR_FstClusLO, cl);
000002  0a0b              LSRS     r3,r1,#8
000004  76c3              STRB     r3,[r0,#0x1b]
;;;1262   	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
000006  0c0a              LSRS     r2,r1,#16
000008  7502              STRB     r2,[r0,#0x14]
00000a  0e0b              LSRS     r3,r1,#24
00000c  7543              STRB     r3,[r0,#0x15]
;;;1263   }
00000e  4770              BX       lr
;;;1264   #endif
                          ENDP


                          AREA ||i.sum_sfn||, CODE, READONLY, ALIGN=1

                  sum_sfn PROC
;;;1424   static
;;;1425   BYTE sum_sfn (
000000  b530              PUSH     {r4,r5,lr}
;;;1426   	const BYTE *dir		/* Ptr to directory entry */
;;;1427   )
;;;1428   {
000002  4601              MOV      r1,r0
;;;1429   	BYTE sum = 0;
000004  2000              MOVS     r0,#0
;;;1430   	UINT n = 11;
000006  220b              MOVS     r2,#0xb
;;;1431   
;;;1432   	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
000008  bf00              NOP      
                  |L51.10|
00000a  1043              ASRS     r3,r0,#1
00000c  eb0314c0          ADD      r4,r3,r0,LSL #7
000010  f8115b01          LDRB     r5,[r1],#1
000014  1963              ADDS     r3,r4,r5
000016  b2d8              UXTB     r0,r3
000018  1e53              SUBS     r3,r2,#1
00001a  001a              MOVS     r2,r3
00001c  d1f5              BNE      |L51.10|
;;;1433   	return sum;
;;;1434   }
00001e  bd30              POP      {r4,r5,pc}
;;;1435   #endif
                          ENDP


                          AREA ||i.sync_fs||, CODE, READONLY, ALIGN=1

                  sync_fs PROC
;;;783    static
;;;784    FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
000000  b570              PUSH     {r4-r6,lr}
;;;785    	FATFS *fs		/* File system object */
;;;786    )
;;;787    {
000002  4604              MOV      r4,r0
;;;788    	FRESULT res;
;;;789    
;;;790    
;;;791    	res = sync_window(fs);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       sync_window
00000a  4605              MOV      r5,r0
;;;792    	if (res == FR_OK) {
00000c  2d00              CMP      r5,#0
00000e  d159              BNE      |L52.196|
;;;793    		/* Update FSInfo sector if needed */
;;;794    		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
000010  7820              LDRB     r0,[r4,#0]
000012  2803              CMP      r0,#3
000014  d14f              BNE      |L52.182|
000016  7960              LDRB     r0,[r4,#5]
000018  2800              CMP      r0,#0
00001a  d04c              BEQ      |L52.182|
;;;795    			fs->winsect = 0;
00001c  2000              MOVS     r0,#0
00001e  6320              STR      r0,[r4,#0x30]
;;;796    			/* Create FSInfo structure */
;;;797    			mem_set(fs->win, 0, 512);
000020  f44f7200          MOV      r2,#0x200
000024  2100              MOVS     r1,#0
000026  f1040034          ADD      r0,r4,#0x34
00002a  f7fffffe          BL       mem_set
;;;798    			ST_WORD(fs->win+BS_55AA, 0xAA55);
00002e  2155              MOVS     r1,#0x55
000030  f8841232          STRB     r1,[r4,#0x232]
000034  21aa              MOVS     r1,#0xaa
000036  f8841233          STRB     r1,[r4,#0x233]
;;;799    			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
00003a  2052              MOVS     r0,#0x52
00003c  f8840034          STRB     r0,[r4,#0x34]
000040  2152              MOVS     r1,#0x52
000042  2035              MOVS     r0,#0x35
000044  5501              STRB     r1,[r0,r4]
000046  2161              MOVS     r1,#0x61
000048  2036              MOVS     r0,#0x36
00004a  5501              STRB     r1,[r0,r4]
00004c  2141              MOVS     r1,#0x41
00004e  2037              MOVS     r0,#0x37
000050  5501              STRB     r1,[r0,r4]
;;;800    			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
000052  2172              MOVS     r1,#0x72
000054  f8841218          STRB     r1,[r4,#0x218]
000058  f8841219          STRB     r1,[r4,#0x219]
00005c  2141              MOVS     r1,#0x41
00005e  f884121a          STRB     r1,[r4,#0x21a]
000062  2161              MOVS     r1,#0x61
000064  f884121b          STRB     r1,[r4,#0x21b]
;;;801    			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
000068  7c21              LDRB     r1,[r4,#0x10]
00006a  f884121c          STRB     r1,[r4,#0x21c]
00006e  8a20              LDRH     r0,[r4,#0x10]
000070  0a01              LSRS     r1,r0,#8
000072  f884121d          STRB     r1,[r4,#0x21d]
000076  6920              LDR      r0,[r4,#0x10]
000078  0c01              LSRS     r1,r0,#16
00007a  f884121e          STRB     r1,[r4,#0x21e]
00007e  6920              LDR      r0,[r4,#0x10]
000080  0e01              LSRS     r1,r0,#24
000082  f884121f          STRB     r1,[r4,#0x21f]
;;;802    			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
000086  7b21              LDRB     r1,[r4,#0xc]
000088  f8841220          STRB     r1,[r4,#0x220]
00008c  89a0              LDRH     r0,[r4,#0xc]
00008e  0a01              LSRS     r1,r0,#8
000090  f8841221          STRB     r1,[r4,#0x221]
000094  68e0              LDR      r0,[r4,#0xc]
000096  0c01              LSRS     r1,r0,#16
000098  f8841222          STRB     r1,[r4,#0x222]
00009c  68e0              LDR      r0,[r4,#0xc]
00009e  0e01              LSRS     r1,r0,#24
0000a0  f8841223          STRB     r1,[r4,#0x223]
;;;803    			/* Write it into the FSInfo sector */
;;;804    			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
0000a4  7860              LDRB     r0,[r4,#1]
0000a6  2301              MOVS     r3,#1
0000a8  f1040134          ADD      r1,r4,#0x34
0000ac  6962              LDR      r2,[r4,#0x14]
0000ae  f7fffffe          BL       disk_write
;;;805    			fs->fsi_flag = 0;
0000b2  2000              MOVS     r0,#0
0000b4  7160              STRB     r0,[r4,#5]
                  |L52.182|
;;;806    		}
;;;807    		/* Make sure that no pending write process in the physical drive */
;;;808    		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
0000b6  7860              LDRB     r0,[r4,#1]
0000b8  2200              MOVS     r2,#0
0000ba  4611              MOV      r1,r2
0000bc  f7fffffe          BL       disk_ioctl
0000c0  b100              CBZ      r0,|L52.196|
;;;809    			res = FR_DISK_ERR;
0000c2  2501              MOVS     r5,#1
                  |L52.196|
;;;810    	}
;;;811    
;;;812    	return res;
0000c4  4628              MOV      r0,r5
;;;813    }
0000c6  bd70              POP      {r4-r6,pc}
;;;814    #endif
                          ENDP


                          AREA ||i.sync_window||, CODE, READONLY, ALIGN=1

                  sync_window PROC
;;;731    static
;;;732    FRESULT sync_window (
000000  b570              PUSH     {r4-r6,lr}
;;;733    	FATFS *fs		/* File system object */
;;;734    )
;;;735    {
000002  4604              MOV      r4,r0
;;;736    	DWORD wsect;
;;;737    	UINT nf;
;;;738    
;;;739    	
;;;740    	if (fs->wflag) {	/* Write back the sector if it is dirty */
000004  7920              LDRB     r0,[r4,#4]
000006  b310              CBZ      r0,|L53.78|
;;;741    		wsect = fs->winsect;	/* Current sector number */
000008  6b25              LDR      r5,[r4,#0x30]
;;;742    		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
00000a  7860              LDRB     r0,[r4,#1]
00000c  2301              MOVS     r3,#1
00000e  462a              MOV      r2,r5
000010  f1040134          ADD      r1,r4,#0x34
000014  f7fffffe          BL       disk_write
000018  b108              CBZ      r0,|L53.30|
;;;743    			return FR_DISK_ERR;
00001a  2001              MOVS     r0,#1
                  |L53.28|
;;;744    		fs->wflag = 0;
;;;745    		if (wsect >= fs->fatbase && wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area? */
;;;746    			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
;;;747    				wsect += fs->fsize;
;;;748    				disk_write(fs->drv, fs->win, wsect, 1);
;;;749    			}
;;;750    		}
;;;751    	}
;;;752    	return FR_OK;
;;;753    }
00001c  bd70              POP      {r4-r6,pc}
                  |L53.30|
00001e  2000              MOVS     r0,#0                 ;744
000020  7120              STRB     r0,[r4,#4]            ;744
000022  6a60              LDR      r0,[r4,#0x24]         ;745
000024  42a8              CMP      r0,r5                 ;745
000026  d812              BHI      |L53.78|
000028  69e1              LDR      r1,[r4,#0x1c]         ;745
00002a  6a60              LDR      r0,[r4,#0x24]         ;745
00002c  4408              ADD      r0,r0,r1              ;745
00002e  42a8              CMP      r0,r5                 ;745
000030  d90d              BLS      |L53.78|
000032  78e6              LDRB     r6,[r4,#3]            ;746
000034  e009              B        |L53.74|
                  |L53.54|
000036  69e0              LDR      r0,[r4,#0x1c]         ;747
000038  4405              ADD      r5,r5,r0              ;747
00003a  7860              LDRB     r0,[r4,#1]            ;748
00003c  2301              MOVS     r3,#1                 ;748
00003e  462a              MOV      r2,r5                 ;748
000040  f1040134          ADD      r1,r4,#0x34           ;748
000044  f7fffffe          BL       disk_write
000048  1e76              SUBS     r6,r6,#1              ;746
                  |L53.74|
00004a  2e02              CMP      r6,#2                 ;746
00004c  d2f3              BCS      |L53.54|
                  |L53.78|
00004e  2000              MOVS     r0,#0                 ;752
000050  e7e4              B        |L53.28|
;;;754    #endif
                          ENDP


                          AREA ||i.validate||, CODE, READONLY, ALIGN=1

                  validate PROC
;;;2234   static
;;;2235   FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
000000  b570              PUSH     {r4-r6,lr}
;;;2236   	void* obj		/* Pointer to the object FIL/DIR to check validity */
;;;2237   )
;;;2238   {
000002  4605              MOV      r5,r0
;;;2239   	FIL *fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
000004  462c              MOV      r4,r5
;;;2240   
;;;2241   
;;;2242   	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
000006  b14c              CBZ      r4,|L54.28|
000008  6820              LDR      r0,[r4,#0]
00000a  b138              CBZ      r0,|L54.28|
00000c  6820              LDR      r0,[r4,#0]
00000e  7800              LDRB     r0,[r0,#0]
000010  b120              CBZ      r0,|L54.28|
000012  6820              LDR      r0,[r4,#0]
000014  88c0              LDRH     r0,[r0,#6]
000016  88a1              LDRH     r1,[r4,#4]
000018  4288              CMP      r0,r1
00001a  d001              BEQ      |L54.32|
                  |L54.28|
;;;2243   		return FR_INVALID_OBJECT;
00001c  2009              MOVS     r0,#9
                  |L54.30|
;;;2244   
;;;2245   	ENTER_FF(fil->fs);		/* Lock file system */
;;;2246   
;;;2247   	if (disk_status(fil->fs->drv) & STA_NOINIT)
;;;2248   		return FR_NOT_READY;
;;;2249   
;;;2250   	return FR_OK;
;;;2251   }
00001e  bd70              POP      {r4-r6,pc}
                  |L54.32|
000020  6821              LDR      r1,[r4,#0]            ;2247
000022  7848              LDRB     r0,[r1,#1]            ;2247
000024  f7fffffe          BL       disk_status
000028  f0000001          AND      r0,r0,#1              ;2247
00002c  b108              CBZ      r0,|L54.50|
00002e  2003              MOVS     r0,#3                 ;2248
000030  e7f5              B        |L54.30|
                  |L54.50|
000032  2000              MOVS     r0,#0                 ;2250
000034  e7f3              B        |L54.30|
;;;2252   
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Files
                          %        36

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  LfnOfs
000000  01030507          DCB      0x01,0x03,0x05,0x07
000004  090e1012          DCB      0x09,0x0e,0x10,0x12
000008  1416181c          DCB      0x14,0x16,0x18,0x1c
00000c  1e                DCB      0x1e

                          AREA ||.data||, DATA, ALIGN=2

                  FatFs
                          %        8
                  Fsid
000008  0000              DCB      0x00,0x00
